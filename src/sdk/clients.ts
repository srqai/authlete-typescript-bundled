/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientsCreate } from "../funcs/clientsCreate.js";
import { clientsGet } from "../funcs/clientsGet.js";
import { clientsList } from "../funcs/clientsList.js";
import { clientsRotateSecret } from "../funcs/clientsRotateSecret.js";
import { clientsUpdate } from "../funcs/clientsUpdate.js";
import { clientsUpdateRegistration } from "../funcs/clientsUpdateRegistration.js";
import { clientsUpdateRegistrationForm } from "../funcs/clientsUpdateRegistrationForm.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Clients extends ClientSDK {
  /**
   * Get Client
   *
   * @remarks
   * Get a client.
   */
  async get(
    request: operations.ClientGetApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientGetApiResponse> {
    return unwrapAsync(clientsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List Clients
   *
   * @remarks
   * Get a list of clients on a service.
   *
   * If the access token can view a full service (including an admin), all clients within the
   * service are returned. Otherwise, only clients that the access token can view within the
   * service are returned.
   * - ViewClient: []
   */
  async list(
    request: operations.ClientGetListApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientGetListApiResponse> {
    return unwrapAsync(clientsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Client
   *
   * @remarks
   * Create a new client.
   */
  async create(
    request: operations.ClientCreateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientCreateApiResponse> {
    return unwrapAsync(clientsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client
   *
   * @remarks
   * Update a client.
   */
  async update(
    request: operations.ClientUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientUpdateApiResponse> {
    return unwrapAsync(clientsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate Client Secret
   *
   * @remarks
   * Refresh the client secret of a client. A new value of the client secret will be generated by the
   * Authlete server.
   *
   * If you want to specify a new value, use `/api/client/secret/update` API.
   */
  async rotateSecret(
    request: operations.ClientSecretRefreshApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientSecretRefreshApiResponse> {
    return unwrapAsync(clientsRotateSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client
   *
   * @remarks
   * Update a dynamically registered client. This API is supposed to be used to implement a client
   * registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)
   * (OAuth 2.0 Dynamic Registration Management).
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from the within the implementation of the client registration
   * management endpoint of the authorization server. The authorization server implementation should
   * retrieve the value of `action` from the response and take the following steps according to the value.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from a viewpoint of the client or developer, it is an error on the server side.
   * Therefore, the authorization server implementation should generate a response with "500 Internal
   * Server Error"s and `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the authorization server implementation should generate
   * and return to the client or developer.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client or developer since
   * "500 Internal Server Error" is not required by the specification.
   *
   * **BAD_REQUEST**
   *
   * When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
   * was wrong.
   *
   * The authorization server implementation should generate a response with "400 Bad Request" and `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the authorization server implementation should generate
   * and return to the client or developer.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * **UNAUTHORIZED**
   *
   * When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by
   * the client configuration request (RFC 7592) is invalid, or the client application which the token
   * is tied to does not exist any longer or is invalid.
   *
   * The HTTP status of the response returned to the client application must be "401 Unauthorized" and
   * the content type must be `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the endpoint implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 401 Unauthorized
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of
   * `Service.unauthorizedOnClientConfigSupported` for details.
   *
   * **UPDATED**
   *
   * When the value of `action` is `UPDATED`, it means that the request from the client or developer is
   * valid.
   *
   * The authorization server implementation should generate a response to the client or developer with
   * "200 OK" and `application/json`.
   *
   * The `responseContent` a JSON string which can be used as the entity body of the response.
   *
   * The following illustrates the response which the authorization server implementation should generate
   * and return to the client or developer.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   * </details>
   */
  async updateRegistration(
    request: operations.ClientRegistrationUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientRegistrationUpdateApiResponse> {
    return unwrapAsync(clientsUpdateRegistration(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client
   *
   * @remarks
   * Update a dynamically registered client. This API is supposed to be used to implement a client
   * registration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)
   * (OAuth 2.0 Dynamic Registration Management).
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from the within the implementation of the client registration
   * management endpoint of the authorization server. The authorization server implementation should
   * retrieve the value of `action` from the response and take the following steps according to the value.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from a viewpoint of the client or developer, it is an error on the server side.
   * Therefore, the authorization server implementation should generate a response with "500 Internal
   * Server Error"s and `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the authorization server implementation should generate
   * and return to the client or developer.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client or developer since
   * "500 Internal Server Error" is not required by the specification.
   *
   * **BAD_REQUEST**
   *
   * When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
   * was wrong.
   *
   * The authorization server implementation should generate a response with "400 Bad Request" and `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the authorization server implementation should generate
   * and return to the client or developer.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * **UNAUTHORIZED**
   *
   * When the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by
   * the client configuration request (RFC 7592) is invalid, or the client application which the token
   * is tied to does not exist any longer or is invalid.
   *
   * The HTTP status of the response returned to the client application must be "401 Unauthorized" and
   * the content type must be `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the endpoint implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 401 Unauthorized
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * NOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of
   * `Service.unauthorizedOnClientConfigSupported` for details.
   *
   * **UPDATED**
   *
   * When the value of `action` is `UPDATED`, it means that the request from the client or developer is
   * valid.
   *
   * The authorization server implementation should generate a response to the client or developer with
   * "200 OK" and `application/json`.
   *
   * The `responseContent` a JSON string which can be used as the entity body of the response.
   *
   * The following illustrates the response which the authorization server implementation should generate
   * and return to the client or developer.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   * </details>
   */
  async updateRegistrationForm(
    request: operations.ClientRegistrationUpdateApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientRegistrationUpdateApiFormResponse> {
    return unwrapAsync(clientsUpdateRegistrationForm(
      this,
      request,
      options,
    ));
  }
}
