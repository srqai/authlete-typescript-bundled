/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authorizationEndpointFailRequest } from "../funcs/authorizationEndpointFailRequest.js";
import { authorizationEndpointFailRequestForm } from "../funcs/authorizationEndpointFailRequestForm.js";
import { authorizationEndpointGetTicketInfo } from "../funcs/authorizationEndpointGetTicketInfo.js";
import { authorizationEndpointIssue } from "../funcs/authorizationEndpointIssue.js";
import { authorizationEndpointIssueForm } from "../funcs/authorizationEndpointIssueForm.js";
import { authorizationEndpointUpdateTicket } from "../funcs/authorizationEndpointUpdateTicket.js";
import { authorizationEndpointUpdateTicketForm } from "../funcs/authorizationEndpointUpdateTicketForm.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AuthorizationEndpoint extends ClientSDK {
  /**
   * Fail Authorization Request
   *
   * @remarks
   * This API generates a content of an error authorization response that the authorization server implementation
   * returns to the client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the authorization endpoint of the service
   * in order to generate an error response to the client application.
   *
   * The description of the `/auth/authorization` API describes the timing when this API should be called.
   *
   * The response from `/auth/authorization/fail` API has some parameters.
   * Among them, it is `action` parameter that the authorization server implementation should check first because
   * it denotes the next action that the authorization server implementation should take.
   * According to the value of `action`, the authorization server implementation must take the steps described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **BAD_REQUEST**
   *
   * When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
   * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
   * response to the authorization UI.
   *
   * A response with HTTP status of "400 Bad Request" should be returned to the client application and
   * Authlete recommends `application/json` as the content type.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "400 Bad Request" is not required by OAuth 2.0.
   *
   * **LOCATION**
   *
   * When the value of `action` is `LOCATION`, it means that the response to the client application must
   * be "302 Found" with Location header.
   *
   * The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
   * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
   * value of `Location` header.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 302 Found
   * Location: {responseContent}
   * Cache-Control: no-store
   * Pragma: no-cache
   * ```
   *
   * **FORM**
   *
   * When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
   * with an HTML which triggers redirection by JavaScript.
   * This happens when the authorization request from the client application contained `response_mode=form_post`.
   *
   * The value of `responseContent` is an HTML which can be used as the entity body of the response.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: text/html;charset=UTF-8
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   * </details>
   */
  async failRequest(
    request: operations.AuthAuthorizationFailApiRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthAuthorizationFailApiResponse> {
    return unwrapAsync(authorizationEndpointFailRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Fail Authorization Request
   *
   * @remarks
   * This API generates a content of an error authorization response that the authorization server implementation
   * returns to the client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the authorization endpoint of the service
   * in order to generate an error response to the client application.
   *
   * The description of the `/auth/authorization` API describes the timing when this API should be called.
   *
   * The response from `/auth/authorization/fail` API has some parameters.
   * Among them, it is `action` parameter that the authorization server implementation should check first because
   * it denotes the next action that the authorization server implementation should take.
   * According to the value of `action`, the authorization server implementation must take the steps described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **BAD_REQUEST**
   *
   * When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
   * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
   * response to the authorization UI.
   *
   * A response with HTTP status of "400 Bad Request" should be returned to the client application and
   * Authlete recommends `application/json` as the content type.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "400 Bad Request" is not required by OAuth 2.0.
   *
   * **LOCATION**
   *
   * When the value of `action` is `LOCATION`, it means that the response to the client application must
   * be "302 Found" with Location header.
   *
   * The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
   * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
   * value of `Location` header.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 302 Found
   * Location: {responseContent}
   * Cache-Control: no-store
   * Pragma: no-cache
   * ```
   *
   * **FORM**
   *
   * When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
   * with an HTML which triggers redirection by JavaScript.
   * This happens when the authorization request from the client application contained `response_mode=form_post`.
   *
   * The value of `responseContent` is an HTML which can be used as the entity body of the response.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: text/html;charset=UTF-8
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   * </details>
   */
  async failRequestForm(
    request: operations.AuthAuthorizationFailApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthAuthorizationFailApiFormResponse> {
    return unwrapAsync(authorizationEndpointFailRequestForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Authorization Response
   *
   * @remarks
   * This API parses request parameters of an authorization request and returns necessary data for the
   * authorization server implementation to process the authorization request further.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the authorization endpoint of
   * the service in order to generate a successful response to the client application.
   *
   * The description of the `/auth/authorization` API describes the timing when this API should be called
   * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
   *
   * The response from `/auth/authorization/issue` API has some parameters.
   * Among them, it is `action` parameter that the authorization server implementation should check first
   * because it denotes the next action that the authorization server implementation should take.
   * According to the value of `action`, the authorization server implementation must take the steps
   * described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error".
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **BAD_REQUEST**
   *
   * When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
   * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
   * response to the authorization UI.
   *
   * The HTTP status of the response returned to the client application should be "400 Bad Request"
   * and the content type should be `application/json` although OAuth 2.0 specification does not mention
   * the format of the error response.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "400 Bad Request" is not required by OAuth 2.0.
   *
   * **LOCATION**
   *
   * When the value of `action` is `LOCATION`, it means that the response to the client application
   * should be "302 Found" with `Location` header.
   *
   * The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
   * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
   * the value of `Location` header.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 302 Found
   * Location: {responseContent}
   * Cache-Control: no-store
   * Pragma: no-cache
   * ```
   *
   * **FORM**
   *
   * When the value of `action` is `FORM`, it means that the response to the client application should
   * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
   * request from the client contains `response_mode=form_post` request parameter.
   *
   * The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
   * so it can be used as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: text/html;charset=UTF-8
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   * </details>
   */
  async issue(
    request: operations.AuthAuthorizationIssueApiRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthAuthorizationIssueApiResponse> {
    return unwrapAsync(authorizationEndpointIssue(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Authorization Response
   *
   * @remarks
   * This API parses request parameters of an authorization request and returns necessary data for the
   * authorization server implementation to process the authorization request further.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the authorization endpoint of
   * the service in order to generate a successful response to the client application.
   *
   * The description of the `/auth/authorization` API describes the timing when this API should be called
   * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
   *
   * The response from `/auth/authorization/issue` API has some parameters.
   * Among them, it is `action` parameter that the authorization server implementation should check first
   * because it denotes the next action that the authorization server implementation should take.
   * According to the value of `action`, the authorization server implementation must take the steps
   * described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error".
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **BAD_REQUEST**
   *
   * When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
   * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
   * response to the authorization UI.
   *
   * The HTTP status of the response returned to the client application should be "400 Bad Request"
   * and the content type should be `application/json` although OAuth 2.0 specification does not mention
   * the format of the error response.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used as
   * the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application since
   * "400 Bad Request" is not required by OAuth 2.0.
   *
   * **LOCATION**
   *
   * When the value of `action` is `LOCATION`, it means that the response to the client application
   * should be "302 Found" with `Location` header.
   *
   * The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
   * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
   * the value of `Location` header.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 302 Found
   * Location: {responseContent}
   * Cache-Control: no-store
   * Pragma: no-cache
   * ```
   *
   * **FORM**
   *
   * When the value of `action` is `FORM`, it means that the response to the client application should
   * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
   * request from the client contains `response_mode=form_post` request parameter.
   *
   * The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
   * so it can be used as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: text/html;charset=UTF-8
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   * </details>
   */
  async issueForm(
    request: operations.AuthAuthorizationIssueApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthAuthorizationIssueApiFormResponse> {
    return unwrapAsync(authorizationEndpointIssueForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket Information
   */
  async getTicketInfo(
    request: operations.GetApiServiceIdAuthAuthorizationTicketInfoRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiServiceIdAuthAuthorizationTicketInfoResponse> {
    return unwrapAsync(authorizationEndpointGetTicketInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ticket Information
   */
  async updateTicket(
    request: operations.PostApiServiceIdAuthAuthorizationTicketUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiServiceIdAuthAuthorizationTicketUpdateResponse> {
    return unwrapAsync(authorizationEndpointUpdateTicket(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ticket Information
   */
  async updateTicketForm(
    request:
      operations.PostApiServiceIdAuthAuthorizationTicketUpdateFormRequest,
    options?: RequestOptions,
  ): Promise<
    operations.PostApiServiceIdAuthAuthorizationTicketUpdateFormResponse
  > {
    return unwrapAsync(authorizationEndpointUpdateTicketForm(
      this,
      request,
      options,
    ));
  }
}
