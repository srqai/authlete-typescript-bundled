/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialsIssue } from "../funcs/verifiableCredentialsIssue.js";
import { verifiableCredentialsOfferInfo } from "../funcs/verifiableCredentialsOfferInfo.js";
import { verifiableCredentialsOfferInfoForm } from "../funcs/verifiableCredentialsOfferInfoForm.js";
import { verifiableCredentialsParse } from "../funcs/verifiableCredentialsParse.js";
import { verifiableCredentialsParseForm } from "../funcs/verifiableCredentialsParseForm.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VerifiableCredentials extends ClientSDK {
  /**
   * /api/{serviceId}/vci/offer/info API
   */
  async offerInfo(
    request: operations.VciOfferInfoApiRequest,
    options?: RequestOptions,
  ): Promise<operations.VciOfferInfoApiResponse> {
    return unwrapAsync(verifiableCredentialsOfferInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/offer/info API
   */
  async offerInfoForm(
    request: operations.VciOfferInfoApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.VciOfferInfoApiFormResponse> {
    return unwrapAsync(verifiableCredentialsOfferInfoForm(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/parse API
   */
  async parse(
    request: operations.VciSingleParseApiRequest,
    options?: RequestOptions,
  ): Promise<operations.VciSingleParseApiResponse> {
    return unwrapAsync(verifiableCredentialsParse(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/parse API
   */
  async parseForm(
    request: operations.VciSingleParseApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.VciSingleParseApiFormResponse> {
    return unwrapAsync(verifiableCredentialsParseForm(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/issue API
   */
  async issue(
    request: operations.VciSingleIssueApiRequest,
    options?: RequestOptions,
  ): Promise<operations.VciSingleIssueApiResponse> {
    return unwrapAsync(verifiableCredentialsIssue(
      this,
      request,
      options,
    ));
  }
}
