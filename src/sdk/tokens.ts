/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tokensCreate } from "../funcs/tokensCreate.js";
import { tokensCreateForm } from "../funcs/tokensCreateForm.js";
import { tokensFail } from "../funcs/tokensFail.js";
import { tokensFailForm } from "../funcs/tokensFailForm.js";
import { tokensIssue } from "../funcs/tokensIssue.js";
import { tokensIssueForm } from "../funcs/tokensIssueForm.js";
import { tokensList } from "../funcs/tokensList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tokens extends ClientSDK {
  /**
   * Fail Token Request
   *
   * @remarks
   * This API generates a content of an error token response that the authorization server implementation
   * returns to the client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the token endpoint of the service
   * in order to generate an error response to the client application.
   *
   * The description of the `/auth/token` API describes the timing when this API should be called. See
   * the description for the case of `action=PASSWORD`.
   *
   * The response from `/auth/token/fail` API has some parameters. Among them, it is `action` parameter
   * that the authorization server implementation should check first because it denotes the next action
   * that the authorization server implementation should take. According to the value of `action`, the
   * authorization server implementation must take the steps described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error".
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application
   * since "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **BAD_REQUEST**
   *
   * When the value of `action` is `BAD_REQUEST`, it means that Authlete's `/auth/token/fail` API successfully
   * generated an error response for the client application.
   *
   * The HTTP status of the response returned to the client application must be "400 Bad Request" and
   * the content type must be `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * </details>
   */
  async fail(
    request: operations.AuthTokenFailApiRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenFailApiResponse> {
    return unwrapAsync(tokensFail(
      this,
      request,
      options,
    ));
  }

  /**
   * Fail Token Request
   *
   * @remarks
   * This API generates a content of an error token response that the authorization server implementation
   * returns to the client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the token endpoint of the service
   * in order to generate an error response to the client application.
   *
   * The description of the `/auth/token` API describes the timing when this API should be called. See
   * the description for the case of `action=PASSWORD`.
   *
   * The response from `/auth/token/fail` API has some parameters. Among them, it is `action` parameter
   * that the authorization server implementation should check first because it denotes the next action
   * that the authorization server implementation should take. According to the value of `action`, the
   * authorization server implementation must take the steps described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error".
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application
   * since "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **BAD_REQUEST**
   *
   * When the value of `action` is `BAD_REQUEST`, it means that Authlete's `/auth/token/fail` API successfully
   * generated an error response for the client application.
   *
   * The HTTP status of the response returned to the client application must be "400 Bad Request" and
   * the content type must be `application/json`.
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 400 Bad Request
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * </details>
   */
  async failForm(
    request: operations.AuthTokenFailApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenFailApiFormResponse> {
    return unwrapAsync(tokensFailForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Token Response
   *
   * @remarks
   * This API generates a content of a successful token response that the authorization server implementation
   * returns to the client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the token endpoint of the service
   * in order to generate a successful response to the client application.
   *
   * The description of the `/auth/token` API describes the timing when this API should be called. See
   * the description for the case of `action=PASSWORD`.
   *
   * The response from `/auth/token/issue` API has some parameters. Among them, it is `action` parameter
   * that the authorization server implementation should check first because it denotes the next action
   * that the authorization server implementation should take. According to the value of `action`, the
   * authorization server implementation must take the steps described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error".
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application
   * since "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **OK**
   *
   * When the value of `action` is `OK`, it means that Authlete's `/auth/token/issue` API successfully
   * generated an access token.
   *
   * The HTTP status of the response returned to the client application must be "200 OK" and the content
   * type must be`application/json`.
   *
   * The value of `responseContent` is a JSON string which contains an access token, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * </details>
   */
  async issue(
    request: operations.AuthTokenIssueApiRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenIssueApiResponse> {
    return unwrapAsync(tokensIssue(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Token Response
   *
   * @remarks
   * This API generates a content of a successful token response that the authorization server implementation
   * returns to the client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the token endpoint of the service
   * in order to generate a successful response to the client application.
   *
   * The description of the `/auth/token` API describes the timing when this API should be called. See
   * the description for the case of `action=PASSWORD`.
   *
   * The response from `/auth/token/issue` API has some parameters. Among them, it is `action` parameter
   * that the authorization server implementation should check first because it denotes the next action
   * that the authorization server implementation should take. According to the value of `action`, the
   * authorization server implementation must take the steps described below.
   *
   * **INTERNAL_SERVER_ERROR**
   *
   * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
   * server implementation was wrong or that an error occurred in Authlete.
   *
   * In either case, from the viewpoint of the client application, it is an error on the server side.
   * Therefore, the service implementation should generate a response to the client application with
   * HTTP status of "500 Internal Server Error".
   *
   * The value of `responseContent` is a JSON string which describes the error, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation should generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 500 Internal Server Error
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * The endpoint implementation may return another different response to the client application
   * since "500 Internal Server Error" is not required by OAuth 2.0.
   *
   * **OK**
   *
   * When the value of `action` is `OK`, it means that Authlete's `/auth/token/issue` API successfully
   * generated an access token.
   *
   * The HTTP status of the response returned to the client application must be "200 OK" and the content
   * type must be`application/json`.
   *
   * The value of `responseContent` is a JSON string which contains an access token, so it can be used
   * as the entity body of the response.
   *
   * The following illustrates the response which the service implementation must generate and return
   * to the client application.
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: application/json
   * Cache-Control: no-store
   * Pragma: no-cache
   *
   * {responseContent}
   * ```
   *
   * </details>
   */
  async issueForm(
    request: operations.AuthTokenIssueApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenIssueApiFormResponse> {
    return unwrapAsync(tokensIssueForm(
      this,
      request,
      options,
    ));
  }

  /**
   * List Issued Tokens
   *
   * @remarks
   * Get the list of access tokens that are associated with the service.
   */
  async list(
    request: operations.AuthTokenGetListApiRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenGetListApiResponse> {
    return unwrapAsync(tokensList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Access Token
   *
   * @remarks
   * Create an access token.
   */
  async create(
    request: operations.AuthTokenCreateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenCreateApiResponse> {
    return unwrapAsync(tokensCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Access Token
   *
   * @remarks
   * Create an access token.
   */
  async createForm(
    request: operations.AuthTokenCreateApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.AuthTokenCreateApiFormResponse> {
    return unwrapAsync(tokensCreateForm(
      this,
      request,
      options,
    ));
  }
}
