/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientManagementDeleteAuthorization } from "../funcs/clientManagementDeleteAuthorization.js";
import { clientManagementDeleteClient } from "../funcs/clientManagementDeleteClient.js";
import { clientManagementDeleteGrantedScopes } from "../funcs/clientManagementDeleteGrantedScopes.js";
import { clientManagementDeleteRequestableScopes } from "../funcs/clientManagementDeleteRequestableScopes.js";
import { clientManagementGetAuthorizedApplications } from "../funcs/clientManagementGetAuthorizedApplications.js";
import { clientManagementGetGrantedScopes } from "../funcs/clientManagementGetGrantedScopes.js";
import { clientManagementGetRequestableScopes } from "../funcs/clientManagementGetRequestableScopes.js";
import { clientManagementUpdateClientLock } from "../funcs/clientManagementUpdateClientLock.js";
import { clientManagementUpdateRequestableScopes } from "../funcs/clientManagementUpdateRequestableScopes.js";
import { clientManagementUpdateSecret } from "../funcs/clientManagementUpdateSecret.js";
import { clientManagementUpdateSecretForm } from "../funcs/clientManagementUpdateSecretForm.js";
import { clientManagementUpdateTokens } from "../funcs/clientManagementUpdateTokens.js";
import { clientManagementUpdateTokensForm } from "../funcs/clientManagementUpdateTokensForm.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ClientManagement extends ClientSDK {
  /**
   * Delete Client âš¡
   *
   * @remarks
   * Delete a client.
   */
  async deleteClient(
    request: operations.ClientDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientManagementDeleteClient(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Lock
   *
   * @remarks
   * Lock and unlock a client
   */
  async updateClientLock(
    request: operations.ClientFlagUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientFlagUpdateApiResponse> {
    return unwrapAsync(clientManagementUpdateClientLock(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Secret
   *
   * @remarks
   * Update the client secret of a client.
   *
   * If you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`
   * API.
   */
  async updateSecret(
    request: operations.ClientSecretUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientSecretUpdateApiResponse> {
    return unwrapAsync(clientManagementUpdateSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Secret
   *
   * @remarks
   * Update the client secret of a client.
   *
   * If you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`
   * API.
   */
  async updateSecretForm(
    request: operations.ClientSecretUpdateApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientSecretUpdateApiFormResponse> {
    return unwrapAsync(clientManagementUpdateSecretForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Authorized Applications
   *
   * @remarks
   * Get a list of client applications that an end-user has authorized.
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async getAuthorizedApplications(
    request: operations.ClientAuthorizationGetListApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientAuthorizationGetListApiResponse> {
    return unwrapAsync(clientManagementGetAuthorizedApplications(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Tokens
   *
   * @remarks
   * Update attributes of all existing access tokens given to a client application.
   */
  async updateTokens(
    request: operations.ClientAuthorizationUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientAuthorizationUpdateApiResponse> {
    return unwrapAsync(clientManagementUpdateTokens(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Tokens
   *
   * @remarks
   * Update attributes of all existing access tokens given to a client application.
   */
  async updateTokensForm(
    request: operations.ClientAuthorizationUpdateApiFormRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientAuthorizationUpdateApiFormResponse> {
    return unwrapAsync(clientManagementUpdateTokensForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Client Tokens
   *
   * @remarks
   * Delete all existing access tokens issued to a client application by an end-user.
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async deleteAuthorization(
    request: operations.ClientAuthorizationDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientAuthorizationDeleteApiResponse> {
    return unwrapAsync(clientManagementDeleteAuthorization(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Granted Scopes
   *
   * @remarks
   * Get the set of scopes that a user has granted to a client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * Possible values for `requestableScopes` parameter in the response from this API are as follows.
   *
   * **null**
   *
   * The user has not granted authorization to the client application in the past, or records about the
   * combination of the user and the client application have been deleted from Authlete's DB.
   *
   * **An empty set**
   *
   * The user has granted authorization to the client application in the past, but no scopes are associated
   * with the authorization.
   *
   * **A set with at least one element**
   *
   * The user has granted authorization to the client application in the past and some scopes are associated
   * with the authorization. These scopes are returned.
   * Example: `[ "profile", "email" ]`
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   * </details>
   */
  async getGrantedScopes(
    request: operations.ClientGrantedScopesGetApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientGrantedScopesGetApiResponse> {
    return unwrapAsync(clientManagementGetGrantedScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Granted Scopes
   *
   * @remarks
   * Delete the set of scopes that an end-user has granted to a client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * Even if records about granted scopes are deleted by calling this API, existing access tokens are
   * not deleted and scopes of existing access tokens are not changed.
   * </details>
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async deleteGrantedScopes(
    request: operations.ClientGrantedScopesDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientGrantedScopesDeleteApiResponse> {
    return unwrapAsync(clientManagementDeleteGrantedScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Requestable Scopes
   *
   * @remarks
   * Get the requestable scopes per client
   */
  async getRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesGetApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientExtensionRequestablesScopesGetApiResponse> {
    return unwrapAsync(clientManagementGetRequestableScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Requestable Scopes
   *
   * @remarks
   * Update requestable scopes of a client
   */
  async updateRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ClientExtensionRequestablesScopesUpdateApiResponse> {
    return unwrapAsync(clientManagementUpdateRequestableScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Requestable Scopes
   *
   * @remarks
   * Delete requestable scopes of a client
   */
  async deleteRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientManagementDeleteRequestableScopes(
      this,
      request,
      options,
    ));
  }
}
