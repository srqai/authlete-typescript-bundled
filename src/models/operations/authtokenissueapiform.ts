/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenIssueApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenIssueApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthTokenIssueApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenIssueApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenIssueApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenIssueApiFormAction = ClosedEnum<
  typeof AuthTokenIssueApiFormAction
>;

export type AuthTokenIssueApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenIssueApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthTokenIssueApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthTokenIssueApiFormElement> | undefined;
};

export type AuthTokenIssueApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthTokenIssueApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthTokenIssueApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenIssueApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format is JSON.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
   *
   * @remarks
   * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
   * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
   */
  refreshToken?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued refresh token in seconds.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The subject (= resource owner's ID) of the access token.
   *
   * @remarks
   * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
   * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
   * the access token is not associated with any specific end-user.
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   */
  scopes?: Array<string> | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   * This parameter is `null` when no extra property is associated with the issued access token.
   */
  properties?: Array<AuthTokenIssueApiFormProperty> | undefined;
  /**
   * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
   *
   * @remarks
   * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
   * original random-string one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthTokenIssueApiFormAuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<AuthTokenIssueApiFormServiceAttribute> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<AuthTokenIssueApiFormClientAttribute> | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The scopes associated with the refresh token. May be null.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormRequestBody$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthTokenIssueApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiFormRequestBody$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormRequestBody$ {
  /** @deprecated use `AuthTokenIssueApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormRequestBody$Outbound;
}

export function authTokenIssueApiFormRequestBodyToJSON(
  authTokenIssueApiFormRequestBody: AuthTokenIssueApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormRequestBody$outboundSchema.parse(
      authTokenIssueApiFormRequestBody,
    ),
  );
}

export function authTokenIssueApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenIssueApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenIssueApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenIssueApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthTokenIssueApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenIssueApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormRequest$ {
  /** @deprecated use `AuthTokenIssueApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormRequest$Outbound;
}

export function authTokenIssueApiFormRequestToJSON(
  authTokenIssueApiFormRequest: AuthTokenIssueApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormRequest$outboundSchema.parse(
      authTokenIssueApiFormRequest,
    ),
  );
}

export function authTokenIssueApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenIssueApiFormAction
> = z.nativeEnum(AuthTokenIssueApiFormAction);

/** @internal */
export const AuthTokenIssueApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenIssueApiFormAction
> = AuthTokenIssueApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormAction$ {
  /** @deprecated use `AuthTokenIssueApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenIssueApiFormProperty$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenIssueApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormProperty$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormProperty$ {
  /** @deprecated use `AuthTokenIssueApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormProperty$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormProperty$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormProperty$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormProperty$Outbound;
}

export function authTokenIssueApiFormPropertyToJSON(
  authTokenIssueApiFormProperty: AuthTokenIssueApiFormProperty,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormProperty$outboundSchema.parse(
      authTokenIssueApiFormProperty,
    ),
  );
}

export function authTokenIssueApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormProperty' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormElement$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthTokenIssueApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormElement$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormElement$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormElement$ {
  /** @deprecated use `AuthTokenIssueApiFormElement$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormElement$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormElement$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormElement$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormElement$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormElement$Outbound;
}

export function authTokenIssueApiFormElementToJSON(
  authTokenIssueApiFormElement: AuthTokenIssueApiFormElement,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormElement$outboundSchema.parse(
      authTokenIssueApiFormElement,
    ),
  );
}

export function authTokenIssueApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormElement' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormAuthorizationDetails$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormAuthorizationDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  elements: z.array(z.lazy(() => AuthTokenIssueApiFormElement$inboundSchema))
    .optional(),
});

/** @internal */
export type AuthTokenIssueApiFormAuthorizationDetails$Outbound = {
  elements?: Array<AuthTokenIssueApiFormElement$Outbound> | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthTokenIssueApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthTokenIssueApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(z.lazy(() => AuthTokenIssueApiFormElement$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormAuthorizationDetails$ {
  /** @deprecated use `AuthTokenIssueApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormAuthorizationDetails$Outbound;
}

export function authTokenIssueApiFormAuthorizationDetailsToJSON(
  authTokenIssueApiFormAuthorizationDetails:
    AuthTokenIssueApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormAuthorizationDetails$outboundSchema.parse(
      authTokenIssueApiFormAuthorizationDetails,
    ),
  );
}

export function authTokenIssueApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenIssueApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenIssueApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenIssueApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormServiceAttribute$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthTokenIssueApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormServiceAttribute$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormServiceAttribute$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormServiceAttribute$ {
  /** @deprecated use `AuthTokenIssueApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormServiceAttribute$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormServiceAttribute$Outbound;
}

export function authTokenIssueApiFormServiceAttributeToJSON(
  authTokenIssueApiFormServiceAttribute: AuthTokenIssueApiFormServiceAttribute,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormServiceAttribute$outboundSchema.parse(
      authTokenIssueApiFormServiceAttribute,
    ),
  );
}

export function authTokenIssueApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormServiceAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenIssueApiFormServiceAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormClientAttribute$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthTokenIssueApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormClientAttribute$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormClientAttribute$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormClientAttribute$ {
  /** @deprecated use `AuthTokenIssueApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormClientAttribute$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormClientAttribute$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormClientAttribute$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormClientAttribute$Outbound;
}

export function authTokenIssueApiFormClientAttributeToJSON(
  authTokenIssueApiFormClientAttribute: AuthTokenIssueApiFormClientAttribute,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormClientAttribute$outboundSchema.parse(
      authTokenIssueApiFormClientAttribute,
    ),
  );
}

export function authTokenIssueApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormClientAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenIssueApiFormClientAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const AuthTokenIssueApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenIssueApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(z.lazy(() => AuthTokenIssueApiFormProperty$inboundSchema))
    .optional(),
  jwtAccessToken: z.string().optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenIssueApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthTokenIssueApiFormServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthTokenIssueApiFormClientAttribute$inboundSchema),
  ).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenIssueApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  refreshToken?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  refreshTokenDuration?: number | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<AuthTokenIssueApiFormProperty$Outbound> | undefined;
  jwtAccessToken?: string | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenIssueApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<AuthTokenIssueApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<AuthTokenIssueApiFormClientAttribute$Outbound>
    | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenIssueApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(
    z.lazy(() => AuthTokenIssueApiFormProperty$outboundSchema),
  ).optional(),
  jwtAccessToken: z.string().optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenIssueApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthTokenIssueApiFormServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthTokenIssueApiFormClientAttribute$outboundSchema),
  ).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormResponse$ {
  /** @deprecated use `AuthTokenIssueApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormResponse$Outbound;
}

export function authTokenIssueApiFormResponseToJSON(
  authTokenIssueApiFormResponse: AuthTokenIssueApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenIssueApiFormResponse$outboundSchema.parse(
      authTokenIssueApiFormResponse,
    ),
  );
}

export function authTokenIssueApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenIssueApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenIssueApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenIssueApiFormResponse' from JSON`,
  );
}
