/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciOfferInfoApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciOfferInfoApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type VciOfferInfoApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciOfferInfoApiFormRequestBody;
};

/**
 * The result of the `/vci/offer/info` API call.
 */
export const VciOfferInfoApiFormAction = {
  Ok: "OK",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  CallerError: "CALLER_ERROR",
  AuthleteError: "AUTHLETE_ERROR",
} as const;
/**
 * The result of the `/vci/offer/info` API call.
 */
export type VciOfferInfoApiFormAction = ClosedEnum<
  typeof VciOfferInfoApiFormAction
>;

export type VciOfferInfoApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type VciOfferInfoApiFormInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The credential offer in the JSON format.
   */
  credentialOffer?: string | undefined;
  /**
   * The identifier of the credential issuer.
   */
  credentialIssuer?: string | undefined;
  /**
   * The value of the `credentials` object in the JSON format.
   */
  credentials?: string | undefined;
  /**
   * The flag indicating whether the `authorization_code` object is
   *
   * @remarks
   * included in the `grants` object.
   */
  authorizationCodeGrantIncluded?: boolean | undefined;
  /**
   * The flag indicating whether the `issuer_state` property is
   *
   * @remarks
   * included in the `authorization_code` object in the `grants`
   * object.
   */
  issuerStateIncluded?: boolean | undefined;
  /**
   * The value of the `issuer_state` property in the
   *
   * @remarks
   * `authorization_code` object in the `grants` object.
   */
  issuerState?: string | undefined;
  /**
   * The flag indicating whether the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object is
   * included in the `grants` object.
   */
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  /**
   * The value of the `pre-authorized_code` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  preAuthorizedCode?: string | undefined;
  /**
   * The value of the `user_pin_required` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  userPinRequired?: boolean | undefined;
  /**
   * The value of the user PIN associated with the credential offer.
   */
  userPin?: string | undefined;
  /**
   * The subject associated with the credential offer.
   */
  subject?: string | undefined;
  /**
   * The time at which the credential offer will expire.
   */
  expiresAt?: number | undefined;
  /**
   * The general-purpose arbitrary string.
   */
  context?: string | undefined;
  /**
   * Extra properties to associate with the credential offer.
   */
  properties?: Array<VciOfferInfoApiFormProperty> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT
   *
   * @remarks
   * access token.
   */
  jwtAtClaims?: string | undefined;
  /**
   * The time at which the user authentication was performed during
   *
   * @remarks
   * the course of issuing the credential offer.
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication
   *
   * @remarks
   * performed during the course of issuing the credential offer.
   */
  acr?: string | undefined;
};

export type VciOfferInfoApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The result of the `/vci/offer/info` API call.
   */
  action?: VciOfferInfoApiFormAction | undefined;
  info?: VciOfferInfoApiFormInfo | undefined;
};

/** @internal */
export const VciOfferInfoApiFormRequestBody$inboundSchema: z.ZodType<
  VciOfferInfoApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type VciOfferInfoApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiFormRequestBody$outboundSchema: z.ZodType<
  VciOfferInfoApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormRequestBody$ {
  /** @deprecated use `VciOfferInfoApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormRequestBody$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiFormRequestBody$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormRequestBody$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormRequestBody$Outbound;
}

export function vciOfferInfoApiFormRequestBodyToJSON(
  vciOfferInfoApiFormRequestBody: VciOfferInfoApiFormRequestBody,
): string {
  return JSON.stringify(
    VciOfferInfoApiFormRequestBody$outboundSchema.parse(
      vciOfferInfoApiFormRequestBody,
    ),
  );
}

export function vciOfferInfoApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiFormRequest$inboundSchema: z.ZodType<
  VciOfferInfoApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciOfferInfoApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciOfferInfoApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: VciOfferInfoApiFormRequestBody$Outbound;
};

/** @internal */
export const VciOfferInfoApiFormRequest$outboundSchema: z.ZodType<
  VciOfferInfoApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciOfferInfoApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormRequest$ {
  /** @deprecated use `VciOfferInfoApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormRequest$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiFormRequest$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormRequest$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormRequest$Outbound;
}

export function vciOfferInfoApiFormRequestToJSON(
  vciOfferInfoApiFormRequest: VciOfferInfoApiFormRequest,
): string {
  return JSON.stringify(
    VciOfferInfoApiFormRequest$outboundSchema.parse(vciOfferInfoApiFormRequest),
  );
}

export function vciOfferInfoApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciOfferInfoApiFormAction
> = z.nativeEnum(VciOfferInfoApiFormAction);

/** @internal */
export const VciOfferInfoApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciOfferInfoApiFormAction
> = VciOfferInfoApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormAction$ {
  /** @deprecated use `VciOfferInfoApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormAction$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiFormAction$outboundSchema;
}

/** @internal */
export const VciOfferInfoApiFormProperty$inboundSchema: z.ZodType<
  VciOfferInfoApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type VciOfferInfoApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const VciOfferInfoApiFormProperty$outboundSchema: z.ZodType<
  VciOfferInfoApiFormProperty$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormProperty$ {
  /** @deprecated use `VciOfferInfoApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormProperty$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiFormProperty$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormProperty$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormProperty$Outbound;
}

export function vciOfferInfoApiFormPropertyToJSON(
  vciOfferInfoApiFormProperty: VciOfferInfoApiFormProperty,
): string {
  return JSON.stringify(
    VciOfferInfoApiFormProperty$outboundSchema.parse(
      vciOfferInfoApiFormProperty,
    ),
  );
}

export function vciOfferInfoApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiFormProperty' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiFormInfo$inboundSchema: z.ZodType<
  VciOfferInfoApiFormInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  credentials: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  userPinRequired: z.boolean().optional(),
  userPin: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(z.lazy(() => VciOfferInfoApiFormProperty$inboundSchema))
    .optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
});

/** @internal */
export type VciOfferInfoApiFormInfo$Outbound = {
  identifier?: string | undefined;
  credentialOffer?: string | undefined;
  credentialIssuer?: string | undefined;
  credentials?: string | undefined;
  authorizationCodeGrantIncluded?: boolean | undefined;
  issuerStateIncluded?: boolean | undefined;
  issuerState?: string | undefined;
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  preAuthorizedCode?: string | undefined;
  userPinRequired?: boolean | undefined;
  userPin?: string | undefined;
  subject?: string | undefined;
  expiresAt?: number | undefined;
  context?: string | undefined;
  properties?: Array<VciOfferInfoApiFormProperty$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
};

/** @internal */
export const VciOfferInfoApiFormInfo$outboundSchema: z.ZodType<
  VciOfferInfoApiFormInfo$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormInfo
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  credentials: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  userPinRequired: z.boolean().optional(),
  userPin: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(z.lazy(() => VciOfferInfoApiFormProperty$outboundSchema))
    .optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormInfo$ {
  /** @deprecated use `VciOfferInfoApiFormInfo$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormInfo$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormInfo$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiFormInfo$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormInfo$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormInfo$Outbound;
}

export function vciOfferInfoApiFormInfoToJSON(
  vciOfferInfoApiFormInfo: VciOfferInfoApiFormInfo,
): string {
  return JSON.stringify(
    VciOfferInfoApiFormInfo$outboundSchema.parse(vciOfferInfoApiFormInfo),
  );
}

export function vciOfferInfoApiFormInfoFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiFormInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiFormInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiFormInfo' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiFormResponse$inboundSchema: z.ZodType<
  VciOfferInfoApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciOfferInfoApiFormAction$inboundSchema.optional(),
  info: z.lazy(() => VciOfferInfoApiFormInfo$inboundSchema).optional(),
});

/** @internal */
export type VciOfferInfoApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  info?: VciOfferInfoApiFormInfo$Outbound | undefined;
};

/** @internal */
export const VciOfferInfoApiFormResponse$outboundSchema: z.ZodType<
  VciOfferInfoApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciOfferInfoApiFormAction$outboundSchema.optional(),
  info: z.lazy(() => VciOfferInfoApiFormInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormResponse$ {
  /** @deprecated use `VciOfferInfoApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormResponse$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiFormResponse$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormResponse$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormResponse$Outbound;
}

export function vciOfferInfoApiFormResponseToJSON(
  vciOfferInfoApiFormResponse: VciOfferInfoApiFormResponse,
): string {
  return JSON.stringify(
    VciOfferInfoApiFormResponse$outboundSchema.parse(
      vciOfferInfoApiFormResponse,
    ),
  );
}

export function vciOfferInfoApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiFormResponse' from JSON`,
  );
}
