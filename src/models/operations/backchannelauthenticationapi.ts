/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BackchannelAuthenticationApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type BackchannelAuthenticationApiRequestBody = {
  /**
   * Parameters of a backchannel authentication request which are the request parameters that the
   *
   * @remarks
   * backchannel authentication endpoint of the OpenID provider implementation received from the client
   * application.
   *
   * The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
   * of the request from the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from Authorization header of the backchannel authentication request from
   *
   * @remarks
   * the client application.
   *
   * If the backchannel authentication endpoint of the OpenID provider implementation supports Basic
   * Authentication as a means of client authentication, and the request from the client application
   * contained its client ID in Authorization header, the value should be extracted and set to this parameter.
   */
  clientId?: string | undefined;
  /**
   * The client secret extracted from Authorization header of the backchannel authentication request
   *
   * @remarks
   * from the client application.
   *
   * If the backchannel authentication endpoint of the OpenID provider implementation supports Basic
   * Authentication as a means of client authentication, and the request from the client application
   * contained its client secret in Authorization header, the value should be extracted and set to
   * this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certification used in the TLS connection between the client application and the
   *
   * @remarks
   * backchannel authentication endpoint of the OpenID provider.
   */
  clientCertificate?: string | undefined;
  /**
   * The client certificate path presented by the client during client authentication. Each element
   *
   * @remarks
   * is a string in PEM format.
   */
  clientCertificatePath?: string | undefined;
};

export type BackchannelAuthenticationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: BackchannelAuthenticationApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  UserIdentification: "USER_IDENTIFICATION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationApiAction = ClosedEnum<
  typeof BackchannelAuthenticationApiAction
>;

export type BackchannelAuthenticationApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<BackchannelAuthenticationApiDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<BackchannelAuthenticationApiAttribute> | undefined;
};

export type BackchannelAuthenticationApiElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type BackchannelAuthenticationApiAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<BackchannelAuthenticationApiElement> | undefined;
};

export type BackchannelAuthenticationApiServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

export const BackchannelAuthenticationApiDeliveryMode = {
  Ping: "PING",
  Poll: "POLL",
  Push: "PUSH",
} as const;
export type BackchannelAuthenticationApiDeliveryMode = ClosedEnum<
  typeof BackchannelAuthenticationApiDeliveryMode
>;

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const BackchannelAuthenticationApiGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type BackchannelAuthenticationApiGmAction = ClosedEnum<
  typeof BackchannelAuthenticationApiGmAction
>;

export type BackchannelAuthenticationApiGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type BackchannelAuthenticationApiGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type BackchannelAuthenticationApiGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<BackchannelAuthenticationApiGrantElement> | undefined;
};

export type BackchannelAuthenticationApiGrant = {
  scopes?: Array<BackchannelAuthenticationApiGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | BackchannelAuthenticationApiGrantAuthorizationDetails
    | undefined;
};

export type BackchannelAuthenticationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the backchannel
   *
   * @remarks
   * authentication request is the client ID alias. `false` if the value is the original
   * numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the backchannel authentication request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The scopes requested by the backchannel authentication request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `scope` request parameter in the backchannel
   * authentication request. However, because unregistered scopes are dropped on Authlete side,
   * if the `scope` request parameter contains unknown scopes, the list returned by this
   * property becomes different from the value of the `scope` request parameter.
   *
   * Note that `description` property and `descriptions` property of each `scope` object
   * in the array contained in this property is always null even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<BackchannelAuthenticationApiScope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   */
  claimNames?: Array<string> | undefined;
  /**
   * The client notification token included in the backchannel authentication request.
   *
   * @remarks
   */
  clientNotificationToken?: string | undefined;
  /**
   * The list of ACR values requested by the backchannel authentication request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `acr_values` request parameter in the
   * backchannel authentication request. However, because unsupported ACR values are dropped
   * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
   * the list returned by this property becomes different from the value of the `acr_values`
   * request parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The type of the hint for end-user identification which was included in the backchannel authentication request.
   *
   * @remarks
   */
  hintType?: string | undefined;
  /**
   * The value of the hint for end-user identification.
   *
   * @remarks
   */
  hint?: string | undefined;
  /**
   * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
   *
   * @remarks
   */
  sub?: string | undefined;
  /**
   * The binding message included in the backchannel authentication request.
   *
   * @remarks
   */
  bindingMessage?: string | undefined;
  /**
   * The binding message included in the backchannel authentication request.
   *
   * @remarks
   */
  userCode?: string | undefined;
  /**
   * The flag which indicates whether a user code is required.
   *
   * @remarks
   *
   * `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
   * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
   * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
   * are `true`.
   */
  userCodeRequired?: boolean | undefined;
  /**
   * The requested expiry for the authentication request ID (`auth_req_id`).
   *
   * @remarks
   */
  requestedExpiry?: number | undefined;
  /**
   * The request context of the backchannel authentication request.
   *
   * @remarks
   *
   * It is the value of the request_context claim in the signed authentication request and
   * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
   */
  requestContext?: string | undefined;
  /**
   * The warnings raised during processing the backchannel authentication request.
   *
   * @remarks
   */
  warnings?: Array<string> | undefined;
  /**
   * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
   *
   * @remarks
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  ticket?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | BackchannelAuthenticationApiAuthorizationDetails
    | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?:
    | Array<BackchannelAuthenticationApiServiceAttribute>
    | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?:
    | Array<BackchannelAuthenticationApiClientAttribute>
    | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<BackchannelAuthenticationApiDynamicScope> | undefined;
  deliveryMode?: BackchannelAuthenticationApiDeliveryMode | undefined;
  /**
   * The client authentication method that was performed.
   *
   * @remarks
   */
  clientAuthMethod?: string | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: BackchannelAuthenticationApiGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: BackchannelAuthenticationApiGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiRequestBody$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiRequestBody$Outbound = {
  parameters: string;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiRequestBody$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiRequestBody$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiRequestBody
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiRequestBody$ {
  /** @deprecated use `BackchannelAuthenticationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiRequestBody$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiRequestBody$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiRequestBody$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiRequestBody$Outbound;
}

export function backchannelAuthenticationApiRequestBodyToJSON(
  backchannelAuthenticationApiRequestBody:
    BackchannelAuthenticationApiRequestBody,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiRequestBody$outboundSchema.parse(
      backchannelAuthenticationApiRequestBody,
    ),
  );
}

export function backchannelAuthenticationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    BackchannelAuthenticationApiRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BackchannelAuthenticationApiRequest$Outbound = {
  serviceId: string;
  RequestBody: BackchannelAuthenticationApiRequestBody$Outbound;
};

/** @internal */
export const BackchannelAuthenticationApiRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    BackchannelAuthenticationApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiRequest$Outbound;
}

export function backchannelAuthenticationApiRequestToJSON(
  backchannelAuthenticationApiRequest: BackchannelAuthenticationApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiRequest$outboundSchema.parse(
      backchannelAuthenticationApiRequest,
    ),
  );
}

export function backchannelAuthenticationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof BackchannelAuthenticationApiAction
> = z.nativeEnum(BackchannelAuthenticationApiAction);

/** @internal */
export const BackchannelAuthenticationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof BackchannelAuthenticationApiAction
> = BackchannelAuthenticationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiAction$ {
  /** @deprecated use `BackchannelAuthenticationApiAction$inboundSchema` instead. */
  export const inboundSchema = BackchannelAuthenticationApiAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiDescription$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiDescription$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiDescription$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiDescription$ {
  /** @deprecated use `BackchannelAuthenticationApiDescription$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiDescription$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiDescription$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiDescription$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiDescription$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiDescription$Outbound;
}

export function backchannelAuthenticationApiDescriptionToJSON(
  backchannelAuthenticationApiDescription:
    BackchannelAuthenticationApiDescription,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiDescription$outboundSchema.parse(
      backchannelAuthenticationApiDescription,
    ),
  );
}

export function backchannelAuthenticationApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiDescription' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiAttribute$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiAttribute$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiAttribute$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiAttribute$ {
  /** @deprecated use `BackchannelAuthenticationApiAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiAttribute$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiAttribute$Outbound;
}

export function backchannelAuthenticationApiAttributeToJSON(
  backchannelAuthenticationApiAttribute: BackchannelAuthenticationApiAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiAttribute$outboundSchema.parse(
      backchannelAuthenticationApiAttribute,
    ),
  );
}

export function backchannelAuthenticationApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiScope$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => BackchannelAuthenticationApiDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type BackchannelAuthenticationApiScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<BackchannelAuthenticationApiDescription$Outbound>
    | undefined;
  attributes?:
    | Array<BackchannelAuthenticationApiAttribute$Outbound>
    | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiScope$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiScope$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => BackchannelAuthenticationApiDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiScope$ {
  /** @deprecated use `BackchannelAuthenticationApiScope$inboundSchema` instead. */
  export const inboundSchema = BackchannelAuthenticationApiScope$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiScope$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiScope$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiScope$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiScope$Outbound;
}

export function backchannelAuthenticationApiScopeToJSON(
  backchannelAuthenticationApiScope: BackchannelAuthenticationApiScope,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiScope$outboundSchema.parse(
      backchannelAuthenticationApiScope,
    ),
  );
}

export function backchannelAuthenticationApiScopeFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackchannelAuthenticationApiScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiScope' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiElement$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiElement$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiElement$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiElement$ {
  /** @deprecated use `BackchannelAuthenticationApiElement$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiElement$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiElement$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiElement$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiElement$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiElement$Outbound;
}

export function backchannelAuthenticationApiElementToJSON(
  backchannelAuthenticationApiElement: BackchannelAuthenticationApiElement,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiElement$outboundSchema.parse(
      backchannelAuthenticationApiElement,
    ),
  );
}

export function backchannelAuthenticationApiElementFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiElement' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiAuthorizationDetails$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiAuthorizationDetails$Outbound = {
  elements?: Array<BackchannelAuthenticationApiElement$Outbound> | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiAuthorizationDetails$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiAuthorizationDetails$ {
  /** @deprecated use `BackchannelAuthenticationApiAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiAuthorizationDetails$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiAuthorizationDetails$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiAuthorizationDetails$Outbound;
}

export function backchannelAuthenticationApiAuthorizationDetailsToJSON(
  backchannelAuthenticationApiAuthorizationDetails:
    BackchannelAuthenticationApiAuthorizationDetails,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiAuthorizationDetails$outboundSchema.parse(
      backchannelAuthenticationApiAuthorizationDetails,
    ),
  );
}

export function backchannelAuthenticationApiAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiServiceAttribute$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiServiceAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiServiceAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiServiceAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiServiceAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiServiceAttribute$ {
  /** @deprecated use `BackchannelAuthenticationApiServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiServiceAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiServiceAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiServiceAttribute$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiServiceAttribute$Outbound;
}

export function backchannelAuthenticationApiServiceAttributeToJSON(
  backchannelAuthenticationApiServiceAttribute:
    BackchannelAuthenticationApiServiceAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiServiceAttribute$outboundSchema.parse(
      backchannelAuthenticationApiServiceAttribute,
    ),
  );
}

export function backchannelAuthenticationApiServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiServiceAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiServiceAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiClientAttribute$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiClientAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiClientAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiClientAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiClientAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiClientAttribute$ {
  /** @deprecated use `BackchannelAuthenticationApiClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiClientAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiClientAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiClientAttribute$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiClientAttribute$Outbound;
}

export function backchannelAuthenticationApiClientAttributeToJSON(
  backchannelAuthenticationApiClientAttribute:
    BackchannelAuthenticationApiClientAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiClientAttribute$outboundSchema.parse(
      backchannelAuthenticationApiClientAttribute,
    ),
  );
}

export function backchannelAuthenticationApiClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiClientAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiClientAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiClientAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiDynamicScope$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiDynamicScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiDynamicScope$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiDynamicScope$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiDynamicScope
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiDynamicScope$ {
  /** @deprecated use `BackchannelAuthenticationApiDynamicScope$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiDynamicScope$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiDynamicScope$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiDynamicScope$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiDynamicScope$Outbound;
}

export function backchannelAuthenticationApiDynamicScopeToJSON(
  backchannelAuthenticationApiDynamicScope:
    BackchannelAuthenticationApiDynamicScope,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiDynamicScope$outboundSchema.parse(
      backchannelAuthenticationApiDynamicScope,
    ),
  );
}

export function backchannelAuthenticationApiDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiDynamicScope,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiDynamicScope$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiDynamicScope' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiDeliveryMode$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiDeliveryMode> = z
    .nativeEnum(BackchannelAuthenticationApiDeliveryMode);

/** @internal */
export const BackchannelAuthenticationApiDeliveryMode$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiDeliveryMode> =
    BackchannelAuthenticationApiDeliveryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiDeliveryMode$ {
  /** @deprecated use `BackchannelAuthenticationApiDeliveryMode$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiDeliveryMode$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiDeliveryMode$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiDeliveryMode$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiGmAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiGmAction> = z.nativeEnum(
    BackchannelAuthenticationApiGmAction,
  );

/** @internal */
export const BackchannelAuthenticationApiGmAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiGmAction> =
    BackchannelAuthenticationApiGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiGmAction$ {
  /** @deprecated use `BackchannelAuthenticationApiGmAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiGmAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGmAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiGmAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiGrantScope$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiGrantScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type BackchannelAuthenticationApiGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiGrantScope$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiGrantScope$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiGrantScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiGrantScope$ {
  /** @deprecated use `BackchannelAuthenticationApiGrantScope$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiGrantScope$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrantScope$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiGrantScope$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrantScope$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiGrantScope$Outbound;
}

export function backchannelAuthenticationApiGrantScopeToJSON(
  backchannelAuthenticationApiGrantScope:
    BackchannelAuthenticationApiGrantScope,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiGrantScope$outboundSchema.parse(
      backchannelAuthenticationApiGrantScope,
    ),
  );
}

export function backchannelAuthenticationApiGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiGrantScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiGrantScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiGrantScope' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiGrantElement$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiGrantElement$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiGrantElement$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiGrantElement$ {
  /** @deprecated use `BackchannelAuthenticationApiGrantElement$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiGrantElement$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiGrantElement$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrantElement$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiGrantElement$Outbound;
}

export function backchannelAuthenticationApiGrantElementToJSON(
  backchannelAuthenticationApiGrantElement:
    BackchannelAuthenticationApiGrantElement,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiGrantElement$outboundSchema.parse(
      backchannelAuthenticationApiGrantElement,
    ),
  );
}

export function backchannelAuthenticationApiGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiGrantElement,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiGrantElement$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiGrantElement' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiGrantAuthorizationDetails$Outbound = {
  elements?:
    | Array<BackchannelAuthenticationApiGrantElement$Outbound>
    | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiGrantAuthorizationDetails$ {
  /** @deprecated use `BackchannelAuthenticationApiGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiGrantAuthorizationDetails$Outbound;
}

export function backchannelAuthenticationApiGrantAuthorizationDetailsToJSON(
  backchannelAuthenticationApiGrantAuthorizationDetails:
    BackchannelAuthenticationApiGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiGrantAuthorizationDetails$outboundSchema.parse(
      backchannelAuthenticationApiGrantAuthorizationDetails,
    ),
  );
}

export function backchannelAuthenticationApiGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiGrant$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiGrantScope$inboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type BackchannelAuthenticationApiGrant$Outbound = {
  scopes?: Array<BackchannelAuthenticationApiGrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | BackchannelAuthenticationApiGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiGrant$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiGrant$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiGrant
> = z.object({
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiGrantScope$outboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiGrant$ {
  /** @deprecated use `BackchannelAuthenticationApiGrant$inboundSchema` instead. */
  export const inboundSchema = BackchannelAuthenticationApiGrant$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrant$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiGrant$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiGrant$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiGrant$Outbound;
}

export function backchannelAuthenticationApiGrantToJSON(
  backchannelAuthenticationApiGrant: BackchannelAuthenticationApiGrant,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiGrant$outboundSchema.parse(
      backchannelAuthenticationApiGrant,
    ),
  );
}

export function backchannelAuthenticationApiGrantFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackchannelAuthenticationApiGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiGrant' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(z.lazy(() => BackchannelAuthenticationApiScope$inboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  clientNotificationToken: z.string().optional(),
  acrs: z.array(z.string()).optional(),
  hintType: z.string().optional(),
  hint: z.string().optional(),
  sub: z.string().optional(),
  bindingMessage: z.string().optional(),
  userCode: z.string().optional(),
  userCodeRequired: z.boolean().optional(),
  requestedExpiry: z.number().int().optional(),
  requestContext: z.string().optional(),
  warnings: z.array(z.string()).optional(),
  ticket: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiClientAttribute$inboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiDynamicScope$inboundSchema),
  ).optional(),
  deliveryMode: BackchannelAuthenticationApiDeliveryMode$inboundSchema
    .optional(),
  clientAuthMethod: z.string().optional(),
  gmAction: BackchannelAuthenticationApiGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => BackchannelAuthenticationApiGrant$inboundSchema)
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  scopes?: Array<BackchannelAuthenticationApiScope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  clientNotificationToken?: string | undefined;
  acrs?: Array<string> | undefined;
  hintType?: string | undefined;
  hint?: string | undefined;
  sub?: string | undefined;
  bindingMessage?: string | undefined;
  userCode?: string | undefined;
  userCodeRequired?: boolean | undefined;
  requestedExpiry?: number | undefined;
  requestContext?: string | undefined;
  warnings?: Array<string> | undefined;
  ticket?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | BackchannelAuthenticationApiAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<BackchannelAuthenticationApiServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<BackchannelAuthenticationApiClientAttribute$Outbound>
    | undefined;
  dynamicScopes?:
    | Array<BackchannelAuthenticationApiDynamicScope$Outbound>
    | undefined;
  deliveryMode?: string | undefined;
  clientAuthMethod?: string | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: BackchannelAuthenticationApiGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiResponse$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiResponse$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiScope$outboundSchema),
  ).optional(),
  claimNames: z.array(z.string()).optional(),
  clientNotificationToken: z.string().optional(),
  acrs: z.array(z.string()).optional(),
  hintType: z.string().optional(),
  hint: z.string().optional(),
  sub: z.string().optional(),
  bindingMessage: z.string().optional(),
  userCode: z.string().optional(),
  userCodeRequired: z.boolean().optional(),
  requestedExpiry: z.number().int().optional(),
  requestContext: z.string().optional(),
  warnings: z.array(z.string()).optional(),
  ticket: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiClientAttribute$outboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiDynamicScope$outboundSchema),
  ).optional(),
  deliveryMode: BackchannelAuthenticationApiDeliveryMode$outboundSchema
    .optional(),
  clientAuthMethod: z.string().optional(),
  gmAction: BackchannelAuthenticationApiGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => BackchannelAuthenticationApiGrant$outboundSchema)
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiResponse$ {
  /** @deprecated use `BackchannelAuthenticationApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiResponse$Outbound;
}

export function backchannelAuthenticationApiResponseToJSON(
  backchannelAuthenticationApiResponse: BackchannelAuthenticationApiResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiResponse$outboundSchema.parse(
      backchannelAuthenticationApiResponse,
    ),
  );
}

export function backchannelAuthenticationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiResponse' from JSON`,
  );
}
