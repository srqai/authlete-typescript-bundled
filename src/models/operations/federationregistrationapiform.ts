/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FederationRegistrationApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type FederationRegistrationApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type FederationRegistrationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: FederationRegistrationApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const FederationRegistrationApiFormAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type FederationRegistrationApiFormAction = ClosedEnum<
  typeof FederationRegistrationApiFormAction
>;

export type FederationRegistrationApiFormClientName = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type FederationRegistrationApiFormDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const FederationRegistrationApiFormClientType = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type FederationRegistrationApiFormClientType = ClosedEnum<
  typeof FederationRegistrationApiFormClientType
>;

/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export const FederationRegistrationApiFormApplicationType = {
  Web: "WEB",
  Native: "NATIVE",
} as const;
/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export type FederationRegistrationApiFormApplicationType = ClosedEnum<
  typeof FederationRegistrationApiFormApplicationType
>;

export type FederationRegistrationApiFormLogoUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const FederationRegistrationApiFormGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type FederationRegistrationApiFormGrantType = ClosedEnum<
  typeof FederationRegistrationApiFormGrantType
>;

export const FederationRegistrationApiFormResponseType = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type FederationRegistrationApiFormResponseType = ClosedEnum<
  typeof FederationRegistrationApiFormResponseType
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const FederationRegistrationApiFormAuthorizationSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type FederationRegistrationApiFormAuthorizationSignAlg = ClosedEnum<
  typeof FederationRegistrationApiFormAuthorizationSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const FederationRegistrationApiFormAuthorizationEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type FederationRegistrationApiFormAuthorizationEncryptionAlg =
  ClosedEnum<typeof FederationRegistrationApiFormAuthorizationEncryptionAlg>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const FederationRegistrationApiFormAuthorizationEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type FederationRegistrationApiFormAuthorizationEncryptionEnc =
  ClosedEnum<typeof FederationRegistrationApiFormAuthorizationEncryptionEnc>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const FederationRegistrationApiFormTokenAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type FederationRegistrationApiFormTokenAuthMethod = ClosedEnum<
  typeof FederationRegistrationApiFormTokenAuthMethod
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const FederationRegistrationApiFormTokenAuthSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type FederationRegistrationApiFormTokenAuthSignAlg = ClosedEnum<
  typeof FederationRegistrationApiFormTokenAuthSignAlg
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const FederationRegistrationApiFormRequestSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type FederationRegistrationApiFormRequestSignAlg = ClosedEnum<
  typeof FederationRegistrationApiFormRequestSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const FederationRegistrationApiFormRequestEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type FederationRegistrationApiFormRequestEncryptionAlg = ClosedEnum<
  typeof FederationRegistrationApiFormRequestEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const FederationRegistrationApiFormRequestEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type FederationRegistrationApiFormRequestEncryptionEnc = ClosedEnum<
  typeof FederationRegistrationApiFormRequestEncryptionEnc
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const FederationRegistrationApiFormIdTokenSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type FederationRegistrationApiFormIdTokenSignAlg = ClosedEnum<
  typeof FederationRegistrationApiFormIdTokenSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const FederationRegistrationApiFormIdTokenEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type FederationRegistrationApiFormIdTokenEncryptionAlg = ClosedEnum<
  typeof FederationRegistrationApiFormIdTokenEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const FederationRegistrationApiFormIdTokenEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type FederationRegistrationApiFormIdTokenEncryptionEnc = ClosedEnum<
  typeof FederationRegistrationApiFormIdTokenEncryptionEnc
>;

/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const FederationRegistrationApiFormSubjectType = {
  Public: "PUBLIC",
  Pairwise: "PAIRWISE",
} as const;
/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type FederationRegistrationApiFormSubjectType = ClosedEnum<
  typeof FederationRegistrationApiFormSubjectType
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const FederationRegistrationApiFormUserInfoSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type FederationRegistrationApiFormUserInfoSignAlg = ClosedEnum<
  typeof FederationRegistrationApiFormUserInfoSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const FederationRegistrationApiFormUserInfoEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type FederationRegistrationApiFormUserInfoEncryptionAlg = ClosedEnum<
  typeof FederationRegistrationApiFormUserInfoEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const FederationRegistrationApiFormUserInfoEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type FederationRegistrationApiFormUserInfoEncryptionEnc = ClosedEnum<
  typeof FederationRegistrationApiFormUserInfoEncryptionEnc
>;

export type FederationRegistrationApiFormTosUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type FederationRegistrationApiFormPolicyUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type FederationRegistrationApiFormClientUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const FederationRegistrationApiFormBcRequestSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type FederationRegistrationApiFormBcRequestSignAlg = ClosedEnum<
  typeof FederationRegistrationApiFormBcRequestSignAlg
>;

export type FederationRegistrationApiFormAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type FederationRegistrationApiFormExtension = {
  /**
   * The set of scopes that the client application is allowed to request. This paramter will be one
   *
   * @remarks
   * of the following.
   *
   *   - `null`
   *   - an empty set
   *   - a set with at least one element
   *
   * When the value of this parameter is `null`, it means that the set of scopes that the client
   * application is allowed to request is the set of the scopes that the service supports. When the
   * value of this parameter is an empty set, it means that the client application is not allowed to
   * request any scopes. When the value of this parameter is a set with at least one element, it means
   * that the set is the set of scopes that the client application is allowed to request.
   */
  requestableScopes?: Array<string> | undefined;
  /**
   * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
   *
   * @remarks
   * can define the set of scopes which this client application can request. If `false`, this client
   * application can request any scope which is supported by the authorization server.
   */
  requestableScopesEnabled?: boolean | undefined;
  /**
   * The value of the duration of access tokens per client in seconds. In normal cases, the value of
   *
   * @remarks
   * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
   * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of access tokens issued to the client application.
   *
   * Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
   * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of refresh tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The value of the duration of ID tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
   * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of ID tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  idTokenDuration?: number | undefined;
  /**
   * Get the flag indicating whether the client is explicitly given a
   *
   * @remarks
   * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
   */
  tokenExchangePermitted?: boolean | undefined;
};

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const FederationRegistrationApiFormClientRegistrationType = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type FederationRegistrationApiFormClientRegistrationType = ClosedEnum<
  typeof FederationRegistrationApiFormClientRegistrationType
>;

export const FederationRegistrationApiFormFapiMode = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type FederationRegistrationApiFormFapiMode = ClosedEnum<
  typeof FederationRegistrationApiFormFapiMode
>;

export const FederationRegistrationApiFormResponseMode = {
  Query: "QUERY",
  Fragment: "FRAGMENT",
  FormPost: "FORM_POST",
  Jwt: "JWT",
  QueryJwt: "QUERY_JWT",
  FragmentJwt: "FRAGMENT_JWT",
  FormPostJwt: "FORM_POST_JWT",
} as const;
export type FederationRegistrationApiFormResponseMode = ClosedEnum<
  typeof FederationRegistrationApiFormResponseMode
>;

export type FederationRegistrationApiFormClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The sequential number of the service of the client application. The value of this property is
   *
   * @remarks
   * assigned by Authlete.
   */
  serviceNumber?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<FederationRegistrationApiFormClientName> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<FederationRegistrationApiFormDescription> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
   *
   * @remarks
   * property is assigned by Authlete.
   *
   * Note that Authlete issues a client secret even to a "public" client application, but the client
   * application should not use the client secret unless it changes its client type to "confidential".
   * That is, a public client application should behave as if it had not been issued a client secret.
   * To be specific, a token request from a public client of Authlete should not come along with a
   * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
   * says as follows.
   *
   * > Confidential clients or other clients issued client credentials MUST authenticate with the
   * authorization server as described in Section 2.3 when making requests to the token endpoint.
   */
  clientSecret?: string | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: FederationRegistrationApiFormClientType | undefined;
  /**
   * The application type. The value of this property affects the validation steps for a redirect URI.
   *
   * @remarks
   * See the description about `redirectUris` property for more details.
   */
  applicationType?: FederationRegistrationApiFormApplicationType | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<FederationRegistrationApiFormLogoUris> | undefined;
  /**
   * An array of email addresses of people responsible for the client application.
   *
   * @remarks
   *
   * This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
   * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  contacts?: Array<string> | undefined;
  /**
   * The flag to indicate whether this client use TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The flag to indicate whether this client has been registered dynamically.
   *
   * @remarks
   * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  dynamicallyRegistered?: boolean | undefined;
  /**
   * The unique identifier string assigned by the client developer or software publisher used by
   *
   * @remarks
   * registration endpoints to identify the client software to be dynamically registered.
   *
   * This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareId?: string | undefined;
  /**
   * The version identifier string for the client software identified by the software ID.
   *
   * @remarks
   *
   * This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareVersion?: string | undefined;
  /**
   * The hash of the registration access token for this client.
   *
   * @remarks
   */
  registrationAccessTokenHash?: string | undefined;
  /**
   * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  createdAt?: number | undefined;
  /**
   * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  modifiedAt?: number | undefined;
  /**
   * A string array of grant types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  grantTypes?: Array<FederationRegistrationApiFormGrantType> | undefined;
  /**
   * A string array of response types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  responseTypes?: Array<FederationRegistrationApiFormResponseType> | undefined;
  /**
   * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
   *
   * @remarks
   * Requirements for a redirect URI are as follows.
   *
   * **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
   *
   * - Must be an absolute URI.
   * - Must not have a fragment component.
   *
   * **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * application_type")
   *
   * - The scheme of the redirect URI used for Implicit Grant by a client application whose application
   * is `web` must be `https`. This is checked at runtime by Authlete.
   * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
   * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
   * - The scheme of the redirect URI used by a client application whose application type is `native`
   * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
   * is `localhost`. This is checked at runtime by Authlete.
   *
   * **Requirements by Authlete**
   *
   * - Must consist of printable ASCII letters only.
   * - Must not exceed 200 letters.
   *
   * Note that Authlete allows the application type to be `null`. In other words, a client application
   * does not have to choose `web` or `native` as its application type.
   * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
   *
   * An authorization request from a client application which has not registered any redirect URI
   * fails unless at least all the following conditions are satisfied.
   *
   * - The client type of the client application is `confidential`.
   * - The value of `response_type` request parameter is `code`.
   * - The authorization request has the `redirect_uri` request parameter.
   * - The value of `scope` request parameter does not contain `openid`.
   *
   * RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
   * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
   * details), but OpenID Connect requires exact match.
   */
  redirectUris?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  authorizationSignAlg?:
    | FederationRegistrationApiFormAuthorizationSignAlg
    | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  authorizationEncryptionAlg?:
    | FederationRegistrationApiFormAuthorizationEncryptionAlg
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  authorizationEncryptionEnc?:
    | FederationRegistrationApiFormAuthorizationEncryptionEnc
    | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tokenAuthMethod?: FederationRegistrationApiFormTokenAuthMethod | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  tokenAuthSignAlg?: FederationRegistrationApiFormTokenAuthSignAlg | undefined;
  /**
   * The key ID of a JWK containing a self-signed certificate of this client.
   *
   * @remarks
   */
  selfSignedCertificateKeyId?: string | undefined;
  /**
   * The string representation of the expected subject distinguished name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSubjectDn?: string | undefined;
  /**
   * The string representation of the expected DNS subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanDns?: string | undefined;
  /**
   * The string representation of the expected URI subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanUri?: string | undefined;
  /**
   * The string representation of the expected IP address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanIp?: string | undefined;
  /**
   * The string representation of the expected email address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanEmail?: string | undefined;
  /**
   * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
   *
   * @remarks
   * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
   * in "OAuth 2.0 Pushed Authorization Requests".
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether authorization requests from this client are always required to
   *
   * @remarks
   * utilize a request object by using either `request` or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
   * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
   * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  requestSignAlg?: FederationRegistrationApiFormRequestSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  requestEncryptionAlg?:
    | FederationRegistrationApiFormRequestEncryptionAlg
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  requestEncryptionEnc?:
    | FederationRegistrationApiFormRequestEncryptionEnc
    | undefined;
  /**
   * An array of URLs each of which points to a request object.
   *
   * @remarks
   *
   * Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
   * This property is used for the pre-registration.
   * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
   */
  requestUris?: Array<string> | undefined;
  /**
   * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
   *
   * @remarks
   *
   * This property corresponds to `default_max_age` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  defaultMaxAge?: number | undefined;
  /**
   * The default ACRs (Authentication Context Class References). This value is used when an authorization
   *
   * @remarks
   * request from the client application has neither `acr_values` request parameter nor `acr` claim
   * in claims request parameter.
   */
  defaultAcrs?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  idTokenSignAlg?: FederationRegistrationApiFormIdTokenSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  idTokenEncryptionAlg?:
    | FederationRegistrationApiFormIdTokenEncryptionAlg
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  idTokenEncryptionEnc?:
    | FederationRegistrationApiFormIdTokenEncryptionEnc
    | undefined;
  /**
   * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
   *
   * @remarks
   *
   * This property corresponds to `require_auth_time` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  authTimeRequired?: boolean | undefined;
  /**
   * The subject type that the client application requests. Details about the subject type are described in
   *
   * @remarks
   * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
   *
   * This property corresponds to `subject_type` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  subjectType?: FederationRegistrationApiFormSubjectType | undefined;
  /**
   * The value of the sector identifier URI.
   *
   * @remarks
   * This represents the `sector_identifier_uri` client metadata which is defined in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
   */
  sectorIdentifierUri?: string | undefined;
  /**
   * The sector identifier host component as derived from either the `sector_identifier_uri` or the
   *
   * @remarks
   * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
   * are also registered, the value of this property is `null`.
   */
  derivedSectorIdentifier?: string | undefined;
  /**
   * The URL pointing to the JWK Set of the client application.
   *
   * @remarks
   * The content pointed to by the URL is JSON which complies with the format described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
   * and/or signs request objects, it must make available its JWK Set containing public keys for the
   * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
   * Set from the URL as necessary.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * The content of the JWK Set of the client application.
   *
   * @remarks
   * The format is described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwks?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  userInfoSignAlg?: FederationRegistrationApiFormUserInfoSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  userInfoEncryptionAlg?:
    | FederationRegistrationApiFormUserInfoEncryptionAlg
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  userInfoEncryptionEnc?:
    | FederationRegistrationApiFormUserInfoEncryptionEnc
    | undefined;
  /**
   * The URL which a third party can use to initiate a login by the client application.
   *
   * @remarks
   *
   * This property corresponds to `initiate_login_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  loginUri?: string | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<FederationRegistrationApiFormTosUris> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<FederationRegistrationApiFormPolicyUris> | undefined;
  /**
   * The URL pointing to the home page of the client application.
   *
   * @remarks
   *
   * This property corresponds to `client_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientUri?: string | undefined;
  /**
   * Home page URLs with language tags.
   *
   * @remarks
   * If the client application has different home pages for different languages, this property can
   * be used to register the URLs.
   */
  clientUris?: Array<FederationRegistrationApiFormClientUris> | undefined;
  /**
   * The backchannel token delivery mode.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_token_delivery_mode` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcDeliveryMode?: string | undefined;
  /**
   * The backchannel client notification endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_client_notification_endpoint` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcNotificationEndpoint?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  bcRequestSignAlg?: FederationRegistrationApiFormBcRequestSignAlg | undefined;
  /**
   * The boolean flag to indicate whether a user code is required when this client makes a backchannel
   *
   * @remarks
   * authentication request.
   *
   * This property corresponds to the `backchannel_user_code_parameter` metadata.
   */
  bcUserCodeRequired?: boolean | undefined;
  /**
   * The attributes of this client.
   *
   * @remarks
   */
  attributes?: Array<FederationRegistrationApiFormAttribute> | undefined;
  extension?: FederationRegistrationApiFormExtension | undefined;
  /**
   * The authorization details types that this client may use as values of the `type` field in
   *
   * @remarks
   * `authorization_details`.
   *
   * This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
   * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
   *
   * Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
   * to align with the change made by the 5th draft of the RAR specification.
   */
  authorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The custom client metadata in JSON format.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
   * to corresponding properties of the client application. For example, the value of the `client_name`
   * client metadata in Client Registration/Update Request is set to the clientName property. On the
   * other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
   * of Service, Authlete can recognize them and stores their values into the database. The stored
   * custom client metadata values can be referenced by this property.
   */
  customMetadata?: string | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the service is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
   *   since this signals to the OP that a client_secret value needs to be returned from which the
   *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
   *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
   *   is present. If both signing and encryption are requested, the Request Object will be signed
   *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
   *   is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The property that represents the client metadata is `requestEncryptionAlg`. See the description
   * of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   *   MUST also be provided.
   *
   * The property that represents the client metadata is `requestEncryptionEnc`. See the description
   * of `requestEncryptionEnc`  for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The digest algorithm that this client requests the server to use
   *
   * @remarks
   * when it computes digest values of <a href=
   * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
   * >external attachments</a>, which may be referenced from within ID tokens
   * or userinfo responses (or any place that can have the `verified_claims` claim).
   *
   * Possible values are listed in the <a href=
   * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
   * >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
   * but the server does not necessarily support all the values there. When
   * this property is omitted, `sha-256` is used as the default algorithm.
   *
   * This property corresponds to the `digest_algorithm` client metadata
   * which was defined by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
   */
  digestAlgorithm?: string | undefined;
  /**
   * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
   *
   * @remarks
   *
   * Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
   *
   * Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * If the DPoP is required for this client
   *
   * @remarks
   */
  dpopRequired?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "automatic" client registration of OIDC Federation.
   */
  automaticallyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "explicit" client registration of OIDC Federation.
   */
  explicitlyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsRequestSigned?: boolean | undefined;
  /**
   * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
   *
   * @remarks
   */
  rsSignedRequestKeyId?: string | undefined;
  /**
   * The client registration types that the client has declared it may use.
   *
   * @remarks
   */
  clientRegistrationTypes?:
    | Array<FederationRegistrationApiFormClientRegistrationType>
    | undefined;
  /**
   * The human-readable name representing the organization that manages this client. This property corresponds
   *
   * @remarks
   * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
   *
   * @remarks
   * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * the entity ID of this client.
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
   *
   * @remarks
   * the mechanism defined in OpenID Connect Federation 1.0
   */
  trustAnchorId?: string | undefined;
  /**
   * The trust chain that was used when this client was registered or updated by the mechanism defined in
   *
   * @remarks
   * OpenID Connect Federation 1.0
   */
  trustChain?: Array<string> | undefined;
  /**
   * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
   *
   * @remarks
   * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
   */
  trustChainExpiresAt?: number | undefined;
  /**
   * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
   *
   * @remarks
   */
  trustChainUpdatedAt?: number | undefined;
  /**
   * The flag which indicates whether this client is locked.
   *
   * @remarks
   */
  locked?: boolean | undefined;
  /**
   * The URL of the credential offer endpoint at which this client
   *
   * @remarks
   * (wallet) receives a credential offer from the credential issuer.
   */
  credentialOfferEndpoint?: string | undefined;
  /**
   * The FAPI modes for this client.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests from this client
   * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
   * is supported by the service, and the FAPI modes for the service are set to `null`.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
   * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
   * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
   * the service, and the FAPI modes for the service are set to `null`.
   */
  fapiModes?: Array<FederationRegistrationApiFormFapiMode> | undefined;
  /**
   * The response modes that this client may use.
   */
  responseModes?: Array<FederationRegistrationApiFormResponseMode> | undefined;
  /**
   * True if credential responses to this client must be always encrypted.
   */
  credentialResponseEncryptionRequired?: boolean | undefined;
};

export type FederationRegistrationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: FederationRegistrationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  client?: FederationRegistrationApiFormClient | undefined;
};

/** @internal */
export const FederationRegistrationApiFormRequestBody$inboundSchema: z.ZodType<
  FederationRegistrationApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type FederationRegistrationApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiFormRequestBody$outboundSchema: z.ZodType<
  FederationRegistrationApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormRequestBody$ {
  /** @deprecated use `FederationRegistrationApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormRequestBody$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormRequestBody$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequestBody$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormRequestBody$Outbound;
}

export function federationRegistrationApiFormRequestBodyToJSON(
  federationRegistrationApiFormRequestBody:
    FederationRegistrationApiFormRequestBody,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormRequestBody$outboundSchema.parse(
      federationRegistrationApiFormRequestBody,
    ),
  );
}

export function federationRegistrationApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FederationRegistrationApiFormRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FederationRegistrationApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormRequest$inboundSchema: z.ZodType<
  FederationRegistrationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    FederationRegistrationApiFormRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FederationRegistrationApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: FederationRegistrationApiFormRequestBody$Outbound;
};

/** @internal */
export const FederationRegistrationApiFormRequest$outboundSchema: z.ZodType<
  FederationRegistrationApiFormRequest$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    FederationRegistrationApiFormRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormRequest$ {
  /** @deprecated use `FederationRegistrationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormRequest$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormRequest$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequest$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormRequest$Outbound;
}

export function federationRegistrationApiFormRequestToJSON(
  federationRegistrationApiFormRequest: FederationRegistrationApiFormRequest,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormRequest$outboundSchema.parse(
      federationRegistrationApiFormRequest,
    ),
  );
}

export function federationRegistrationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof FederationRegistrationApiFormAction
> = z.nativeEnum(FederationRegistrationApiFormAction);

/** @internal */
export const FederationRegistrationApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormAction> =
    FederationRegistrationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormAction$ {
  /** @deprecated use `FederationRegistrationApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormAction$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormAction$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormClientName$inboundSchema: z.ZodType<
  FederationRegistrationApiFormClientName,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormClientName$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormClientName$outboundSchema: z.ZodType<
  FederationRegistrationApiFormClientName$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormClientName
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormClientName$ {
  /** @deprecated use `FederationRegistrationApiFormClientName$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormClientName$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClientName$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormClientName$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClientName$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormClientName$Outbound;
}

export function federationRegistrationApiFormClientNameToJSON(
  federationRegistrationApiFormClientName:
    FederationRegistrationApiFormClientName,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormClientName$outboundSchema.parse(
      federationRegistrationApiFormClientName,
    ),
  );
}

export function federationRegistrationApiFormClientNameFromJSON(
  jsonString: string,
): SafeParseResult<
  FederationRegistrationApiFormClientName,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormClientName$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FederationRegistrationApiFormClientName' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormDescription$inboundSchema: z.ZodType<
  FederationRegistrationApiFormDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormDescription$outboundSchema: z.ZodType<
  FederationRegistrationApiFormDescription$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormDescription$ {
  /** @deprecated use `FederationRegistrationApiFormDescription$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormDescription$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormDescription$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormDescription$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormDescription$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormDescription$Outbound;
}

export function federationRegistrationApiFormDescriptionToJSON(
  federationRegistrationApiFormDescription:
    FederationRegistrationApiFormDescription,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormDescription$outboundSchema.parse(
      federationRegistrationApiFormDescription,
    ),
  );
}

export function federationRegistrationApiFormDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  FederationRegistrationApiFormDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FederationRegistrationApiFormDescription' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormClientType$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormClientType> = z
    .nativeEnum(FederationRegistrationApiFormClientType);

/** @internal */
export const FederationRegistrationApiFormClientType$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormClientType> =
    FederationRegistrationApiFormClientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormClientType$ {
  /** @deprecated use `FederationRegistrationApiFormClientType$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormClientType$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClientType$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormClientType$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormApplicationType$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormApplicationType> = z
    .nativeEnum(FederationRegistrationApiFormApplicationType);

/** @internal */
export const FederationRegistrationApiFormApplicationType$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormApplicationType> =
    FederationRegistrationApiFormApplicationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormApplicationType$ {
  /** @deprecated use `FederationRegistrationApiFormApplicationType$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormApplicationType$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormApplicationType$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormApplicationType$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormLogoUris$inboundSchema: z.ZodType<
  FederationRegistrationApiFormLogoUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormLogoUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormLogoUris$outboundSchema: z.ZodType<
  FederationRegistrationApiFormLogoUris$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormLogoUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormLogoUris$ {
  /** @deprecated use `FederationRegistrationApiFormLogoUris$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormLogoUris$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormLogoUris$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormLogoUris$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormLogoUris$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormLogoUris$Outbound;
}

export function federationRegistrationApiFormLogoUrisToJSON(
  federationRegistrationApiFormLogoUris: FederationRegistrationApiFormLogoUris,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormLogoUris$outboundSchema.parse(
      federationRegistrationApiFormLogoUris,
    ),
  );
}

export function federationRegistrationApiFormLogoUrisFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormLogoUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormLogoUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormLogoUris' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormGrantType$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormGrantType> = z.nativeEnum(
    FederationRegistrationApiFormGrantType,
  );

/** @internal */
export const FederationRegistrationApiFormGrantType$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormGrantType> =
    FederationRegistrationApiFormGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormGrantType$ {
  /** @deprecated use `FederationRegistrationApiFormGrantType$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormGrantType$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormGrantType$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormGrantType$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormResponseType$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormResponseType> = z
    .nativeEnum(FederationRegistrationApiFormResponseType);

/** @internal */
export const FederationRegistrationApiFormResponseType$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormResponseType> =
    FederationRegistrationApiFormResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormResponseType$ {
  /** @deprecated use `FederationRegistrationApiFormResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormResponseType$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormResponseType$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormAuthorizationSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormAuthorizationSignAlg> = z
    .nativeEnum(FederationRegistrationApiFormAuthorizationSignAlg);

/** @internal */
export const FederationRegistrationApiFormAuthorizationSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormAuthorizationSignAlg> =
    FederationRegistrationApiFormAuthorizationSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormAuthorizationSignAlg$ {
  /** @deprecated use `FederationRegistrationApiFormAuthorizationSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormAuthorizationSignAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAuthorizationSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormAuthorizationSignAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormAuthorizationEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<
    typeof FederationRegistrationApiFormAuthorizationEncryptionAlg
  > = z.nativeEnum(FederationRegistrationApiFormAuthorizationEncryptionAlg);

/** @internal */
export const FederationRegistrationApiFormAuthorizationEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<
    typeof FederationRegistrationApiFormAuthorizationEncryptionAlg
  > = FederationRegistrationApiFormAuthorizationEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormAuthorizationEncryptionAlg$ {
  /** @deprecated use `FederationRegistrationApiFormAuthorizationEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormAuthorizationEncryptionAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAuthorizationEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormAuthorizationEncryptionAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormAuthorizationEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<
    typeof FederationRegistrationApiFormAuthorizationEncryptionEnc
  > = z.nativeEnum(FederationRegistrationApiFormAuthorizationEncryptionEnc);

/** @internal */
export const FederationRegistrationApiFormAuthorizationEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<
    typeof FederationRegistrationApiFormAuthorizationEncryptionEnc
  > = FederationRegistrationApiFormAuthorizationEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormAuthorizationEncryptionEnc$ {
  /** @deprecated use `FederationRegistrationApiFormAuthorizationEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormAuthorizationEncryptionEnc$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAuthorizationEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormAuthorizationEncryptionEnc$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormTokenAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormTokenAuthMethod> = z
    .nativeEnum(FederationRegistrationApiFormTokenAuthMethod);

/** @internal */
export const FederationRegistrationApiFormTokenAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormTokenAuthMethod> =
    FederationRegistrationApiFormTokenAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormTokenAuthMethod$ {
  /** @deprecated use `FederationRegistrationApiFormTokenAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormTokenAuthMethod$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormTokenAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormTokenAuthMethod$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormTokenAuthSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormTokenAuthSignAlg> = z
    .nativeEnum(FederationRegistrationApiFormTokenAuthSignAlg);

/** @internal */
export const FederationRegistrationApiFormTokenAuthSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormTokenAuthSignAlg> =
    FederationRegistrationApiFormTokenAuthSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormTokenAuthSignAlg$ {
  /** @deprecated use `FederationRegistrationApiFormTokenAuthSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormTokenAuthSignAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormTokenAuthSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormTokenAuthSignAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormRequestSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormRequestSignAlg> = z
    .nativeEnum(FederationRegistrationApiFormRequestSignAlg);

/** @internal */
export const FederationRegistrationApiFormRequestSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormRequestSignAlg> =
    FederationRegistrationApiFormRequestSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormRequestSignAlg$ {
  /** @deprecated use `FederationRegistrationApiFormRequestSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormRequestSignAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequestSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormRequestSignAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormRequestEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormRequestEncryptionAlg> = z
    .nativeEnum(FederationRegistrationApiFormRequestEncryptionAlg);

/** @internal */
export const FederationRegistrationApiFormRequestEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormRequestEncryptionAlg> =
    FederationRegistrationApiFormRequestEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormRequestEncryptionAlg$ {
  /** @deprecated use `FederationRegistrationApiFormRequestEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormRequestEncryptionAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequestEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormRequestEncryptionAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormRequestEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormRequestEncryptionEnc> = z
    .nativeEnum(FederationRegistrationApiFormRequestEncryptionEnc);

/** @internal */
export const FederationRegistrationApiFormRequestEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormRequestEncryptionEnc> =
    FederationRegistrationApiFormRequestEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormRequestEncryptionEnc$ {
  /** @deprecated use `FederationRegistrationApiFormRequestEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormRequestEncryptionEnc$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormRequestEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormRequestEncryptionEnc$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormIdTokenSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormIdTokenSignAlg> = z
    .nativeEnum(FederationRegistrationApiFormIdTokenSignAlg);

/** @internal */
export const FederationRegistrationApiFormIdTokenSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormIdTokenSignAlg> =
    FederationRegistrationApiFormIdTokenSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormIdTokenSignAlg$ {
  /** @deprecated use `FederationRegistrationApiFormIdTokenSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormIdTokenSignAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormIdTokenSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormIdTokenSignAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormIdTokenEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormIdTokenEncryptionAlg> = z
    .nativeEnum(FederationRegistrationApiFormIdTokenEncryptionAlg);

/** @internal */
export const FederationRegistrationApiFormIdTokenEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormIdTokenEncryptionAlg> =
    FederationRegistrationApiFormIdTokenEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormIdTokenEncryptionAlg$ {
  /** @deprecated use `FederationRegistrationApiFormIdTokenEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormIdTokenEncryptionAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormIdTokenEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormIdTokenEncryptionAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormIdTokenEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormIdTokenEncryptionEnc> = z
    .nativeEnum(FederationRegistrationApiFormIdTokenEncryptionEnc);

/** @internal */
export const FederationRegistrationApiFormIdTokenEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormIdTokenEncryptionEnc> =
    FederationRegistrationApiFormIdTokenEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormIdTokenEncryptionEnc$ {
  /** @deprecated use `FederationRegistrationApiFormIdTokenEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormIdTokenEncryptionEnc$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormIdTokenEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormIdTokenEncryptionEnc$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormSubjectType$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormSubjectType> = z
    .nativeEnum(FederationRegistrationApiFormSubjectType);

/** @internal */
export const FederationRegistrationApiFormSubjectType$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormSubjectType> =
    FederationRegistrationApiFormSubjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormSubjectType$ {
  /** @deprecated use `FederationRegistrationApiFormSubjectType$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormSubjectType$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormSubjectType$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormSubjectType$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormUserInfoSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormUserInfoSignAlg> = z
    .nativeEnum(FederationRegistrationApiFormUserInfoSignAlg);

/** @internal */
export const FederationRegistrationApiFormUserInfoSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormUserInfoSignAlg> =
    FederationRegistrationApiFormUserInfoSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormUserInfoSignAlg$ {
  /** @deprecated use `FederationRegistrationApiFormUserInfoSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormUserInfoSignAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormUserInfoSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormUserInfoSignAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormUserInfoEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormUserInfoEncryptionAlg> = z
    .nativeEnum(FederationRegistrationApiFormUserInfoEncryptionAlg);

/** @internal */
export const FederationRegistrationApiFormUserInfoEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormUserInfoEncryptionAlg> =
    FederationRegistrationApiFormUserInfoEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormUserInfoEncryptionAlg$ {
  /** @deprecated use `FederationRegistrationApiFormUserInfoEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormUserInfoEncryptionAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormUserInfoEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormUserInfoEncryptionAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormUserInfoEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormUserInfoEncryptionEnc> = z
    .nativeEnum(FederationRegistrationApiFormUserInfoEncryptionEnc);

/** @internal */
export const FederationRegistrationApiFormUserInfoEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormUserInfoEncryptionEnc> =
    FederationRegistrationApiFormUserInfoEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormUserInfoEncryptionEnc$ {
  /** @deprecated use `FederationRegistrationApiFormUserInfoEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormUserInfoEncryptionEnc$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormUserInfoEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormUserInfoEncryptionEnc$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormTosUris$inboundSchema: z.ZodType<
  FederationRegistrationApiFormTosUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormTosUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormTosUris$outboundSchema: z.ZodType<
  FederationRegistrationApiFormTosUris$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormTosUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormTosUris$ {
  /** @deprecated use `FederationRegistrationApiFormTosUris$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormTosUris$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormTosUris$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormTosUris$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormTosUris$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormTosUris$Outbound;
}

export function federationRegistrationApiFormTosUrisToJSON(
  federationRegistrationApiFormTosUris: FederationRegistrationApiFormTosUris,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormTosUris$outboundSchema.parse(
      federationRegistrationApiFormTosUris,
    ),
  );
}

export function federationRegistrationApiFormTosUrisFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormTosUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormTosUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormTosUris' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormPolicyUris$inboundSchema: z.ZodType<
  FederationRegistrationApiFormPolicyUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormPolicyUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormPolicyUris$outboundSchema: z.ZodType<
  FederationRegistrationApiFormPolicyUris$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormPolicyUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormPolicyUris$ {
  /** @deprecated use `FederationRegistrationApiFormPolicyUris$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormPolicyUris$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormPolicyUris$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormPolicyUris$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormPolicyUris$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormPolicyUris$Outbound;
}

export function federationRegistrationApiFormPolicyUrisToJSON(
  federationRegistrationApiFormPolicyUris:
    FederationRegistrationApiFormPolicyUris,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormPolicyUris$outboundSchema.parse(
      federationRegistrationApiFormPolicyUris,
    ),
  );
}

export function federationRegistrationApiFormPolicyUrisFromJSON(
  jsonString: string,
): SafeParseResult<
  FederationRegistrationApiFormPolicyUris,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormPolicyUris$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FederationRegistrationApiFormPolicyUris' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormClientUris$inboundSchema: z.ZodType<
  FederationRegistrationApiFormClientUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormClientUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormClientUris$outboundSchema: z.ZodType<
  FederationRegistrationApiFormClientUris$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormClientUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormClientUris$ {
  /** @deprecated use `FederationRegistrationApiFormClientUris$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormClientUris$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClientUris$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormClientUris$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClientUris$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormClientUris$Outbound;
}

export function federationRegistrationApiFormClientUrisToJSON(
  federationRegistrationApiFormClientUris:
    FederationRegistrationApiFormClientUris,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormClientUris$outboundSchema.parse(
      federationRegistrationApiFormClientUris,
    ),
  );
}

export function federationRegistrationApiFormClientUrisFromJSON(
  jsonString: string,
): SafeParseResult<
  FederationRegistrationApiFormClientUris,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormClientUris$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FederationRegistrationApiFormClientUris' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormBcRequestSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormBcRequestSignAlg> = z
    .nativeEnum(FederationRegistrationApiFormBcRequestSignAlg);

/** @internal */
export const FederationRegistrationApiFormBcRequestSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormBcRequestSignAlg> =
    FederationRegistrationApiFormBcRequestSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormBcRequestSignAlg$ {
  /** @deprecated use `FederationRegistrationApiFormBcRequestSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormBcRequestSignAlg$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormBcRequestSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormBcRequestSignAlg$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormAttribute$inboundSchema: z.ZodType<
  FederationRegistrationApiFormAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type FederationRegistrationApiFormAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormAttribute$outboundSchema: z.ZodType<
  FederationRegistrationApiFormAttribute$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormAttribute$ {
  /** @deprecated use `FederationRegistrationApiFormAttribute$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormAttribute$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAttribute$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormAttribute$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormAttribute$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormAttribute$Outbound;
}

export function federationRegistrationApiFormAttributeToJSON(
  federationRegistrationApiFormAttribute:
    FederationRegistrationApiFormAttribute,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormAttribute$outboundSchema.parse(
      federationRegistrationApiFormAttribute,
    ),
  );
}

export function federationRegistrationApiFormAttributeFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormAttribute' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormExtension$inboundSchema: z.ZodType<
  FederationRegistrationApiFormExtension,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/** @internal */
export type FederationRegistrationApiFormExtension$Outbound = {
  requestableScopes?: Array<string> | undefined;
  requestableScopesEnabled?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  tokenExchangePermitted?: boolean | undefined;
};

/** @internal */
export const FederationRegistrationApiFormExtension$outboundSchema: z.ZodType<
  FederationRegistrationApiFormExtension$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormExtension
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormExtension$ {
  /** @deprecated use `FederationRegistrationApiFormExtension$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormExtension$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormExtension$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormExtension$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormExtension$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormExtension$Outbound;
}

export function federationRegistrationApiFormExtensionToJSON(
  federationRegistrationApiFormExtension:
    FederationRegistrationApiFormExtension,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormExtension$outboundSchema.parse(
      federationRegistrationApiFormExtension,
    ),
  );
}

export function federationRegistrationApiFormExtensionFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormExtension, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormExtension$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormExtension' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormClientRegistrationType$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormClientRegistrationType> =
    z.nativeEnum(FederationRegistrationApiFormClientRegistrationType);

/** @internal */
export const FederationRegistrationApiFormClientRegistrationType$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormClientRegistrationType> =
    FederationRegistrationApiFormClientRegistrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormClientRegistrationType$ {
  /** @deprecated use `FederationRegistrationApiFormClientRegistrationType$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormClientRegistrationType$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClientRegistrationType$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormClientRegistrationType$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormFapiMode$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormFapiMode> = z.nativeEnum(
    FederationRegistrationApiFormFapiMode,
  );

/** @internal */
export const FederationRegistrationApiFormFapiMode$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormFapiMode> =
    FederationRegistrationApiFormFapiMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormFapiMode$ {
  /** @deprecated use `FederationRegistrationApiFormFapiMode$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormFapiMode$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormFapiMode$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormFapiMode$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormResponseMode$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormResponseMode> = z
    .nativeEnum(FederationRegistrationApiFormResponseMode);

/** @internal */
export const FederationRegistrationApiFormResponseMode$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationApiFormResponseMode> =
    FederationRegistrationApiFormResponseMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormResponseMode$ {
  /** @deprecated use `FederationRegistrationApiFormResponseMode$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormResponseMode$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormResponseMode$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormResponseMode$outboundSchema;
}

/** @internal */
export const FederationRegistrationApiFormClient$inboundSchema: z.ZodType<
  FederationRegistrationApiFormClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => FederationRegistrationApiFormClientName$inboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => FederationRegistrationApiFormDescription$inboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: FederationRegistrationApiFormClientType$inboundSchema.optional(),
  applicationType: FederationRegistrationApiFormApplicationType$inboundSchema
    .optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(
    z.lazy(() => FederationRegistrationApiFormLogoUris$inboundSchema),
  ).optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(FederationRegistrationApiFormGrantType$inboundSchema)
    .optional(),
  responseTypes: z.array(
    FederationRegistrationApiFormResponseType$inboundSchema,
  ).optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg:
    FederationRegistrationApiFormAuthorizationSignAlg$inboundSchema.optional(),
  authorizationEncryptionAlg:
    FederationRegistrationApiFormAuthorizationEncryptionAlg$inboundSchema
      .optional(),
  authorizationEncryptionEnc:
    FederationRegistrationApiFormAuthorizationEncryptionEnc$inboundSchema
      .optional(),
  tokenAuthMethod: FederationRegistrationApiFormTokenAuthMethod$inboundSchema
    .optional(),
  tokenAuthSignAlg: FederationRegistrationApiFormTokenAuthSignAlg$inboundSchema
    .optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: FederationRegistrationApiFormRequestSignAlg$inboundSchema
    .optional(),
  requestEncryptionAlg:
    FederationRegistrationApiFormRequestEncryptionAlg$inboundSchema.optional(),
  requestEncryptionEnc:
    FederationRegistrationApiFormRequestEncryptionEnc$inboundSchema.optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: FederationRegistrationApiFormIdTokenSignAlg$inboundSchema
    .optional(),
  idTokenEncryptionAlg:
    FederationRegistrationApiFormIdTokenEncryptionAlg$inboundSchema.optional(),
  idTokenEncryptionEnc:
    FederationRegistrationApiFormIdTokenEncryptionEnc$inboundSchema.optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: FederationRegistrationApiFormSubjectType$inboundSchema
    .optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: FederationRegistrationApiFormUserInfoSignAlg$inboundSchema
    .optional(),
  userInfoEncryptionAlg:
    FederationRegistrationApiFormUserInfoEncryptionAlg$inboundSchema.optional(),
  userInfoEncryptionEnc:
    FederationRegistrationApiFormUserInfoEncryptionEnc$inboundSchema.optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(
    z.lazy(() => FederationRegistrationApiFormTosUris$inboundSchema),
  ).optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => FederationRegistrationApiFormPolicyUris$inboundSchema),
  ).optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(
    z.lazy(() => FederationRegistrationApiFormClientUris$inboundSchema),
  ).optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: FederationRegistrationApiFormBcRequestSignAlg$inboundSchema
    .optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(
    z.lazy(() => FederationRegistrationApiFormAttribute$inboundSchema),
  ).optional(),
  extension: z.lazy(() => FederationRegistrationApiFormExtension$inboundSchema)
    .optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    FederationRegistrationApiFormClientRegistrationType$inboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(FederationRegistrationApiFormFapiMode$inboundSchema)
    .optional(),
  responseModes: z.array(
    FederationRegistrationApiFormResponseMode$inboundSchema,
  ).optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/** @internal */
export type FederationRegistrationApiFormClient$Outbound = {
  number?: number | undefined;
  serviceNumber?: number | undefined;
  clientName?: string | undefined;
  clientNames?:
    | Array<FederationRegistrationApiFormClientName$Outbound>
    | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<FederationRegistrationApiFormDescription$Outbound>
    | undefined;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  applicationType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<FederationRegistrationApiFormLogoUris$Outbound> | undefined;
  contacts?: Array<string> | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  dynamicallyRegistered?: boolean | undefined;
  softwareId?: string | undefined;
  softwareVersion?: string | undefined;
  registrationAccessTokenHash?: string | undefined;
  createdAt?: number | undefined;
  modifiedAt?: number | undefined;
  grantTypes?: Array<string> | undefined;
  responseTypes?: Array<string> | undefined;
  redirectUris?: Array<string> | undefined;
  authorizationSignAlg?: string | undefined;
  authorizationEncryptionAlg?: string | undefined;
  authorizationEncryptionEnc?: string | undefined;
  tokenAuthMethod?: string | undefined;
  tokenAuthSignAlg?: string | undefined;
  selfSignedCertificateKeyId?: string | undefined;
  tlsClientAuthSubjectDn?: string | undefined;
  tlsClientAuthSanDns?: string | undefined;
  tlsClientAuthSanUri?: string | undefined;
  tlsClientAuthSanIp?: string | undefined;
  tlsClientAuthSanEmail?: string | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  requestSignAlg?: string | undefined;
  requestEncryptionAlg?: string | undefined;
  requestEncryptionEnc?: string | undefined;
  requestUris?: Array<string> | undefined;
  defaultMaxAge?: number | undefined;
  defaultAcrs?: Array<string> | undefined;
  idTokenSignAlg?: string | undefined;
  idTokenEncryptionAlg?: string | undefined;
  idTokenEncryptionEnc?: string | undefined;
  authTimeRequired?: boolean | undefined;
  subjectType?: string | undefined;
  sectorIdentifierUri?: string | undefined;
  derivedSectorIdentifier?: string | undefined;
  jwksUri?: string | undefined;
  jwks?: string | undefined;
  userInfoSignAlg?: string | undefined;
  userInfoEncryptionAlg?: string | undefined;
  userInfoEncryptionEnc?: string | undefined;
  loginUri?: string | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<FederationRegistrationApiFormTosUris$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?:
    | Array<FederationRegistrationApiFormPolicyUris$Outbound>
    | undefined;
  clientUri?: string | undefined;
  clientUris?:
    | Array<FederationRegistrationApiFormClientUris$Outbound>
    | undefined;
  bcDeliveryMode?: string | undefined;
  bcNotificationEndpoint?: string | undefined;
  bcRequestSignAlg?: string | undefined;
  bcUserCodeRequired?: boolean | undefined;
  attributes?:
    | Array<FederationRegistrationApiFormAttribute$Outbound>
    | undefined;
  extension?: FederationRegistrationApiFormExtension$Outbound | undefined;
  authorizationDetailsTypes?: Array<string> | undefined;
  customMetadata?: string | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  digestAlgorithm?: string | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  dpopRequired?: boolean | undefined;
  automaticallyRegistered?: boolean | undefined;
  explicitlyRegistered?: boolean | undefined;
  rsRequestSigned?: boolean | undefined;
  rsSignedRequestKeyId?: string | undefined;
  clientRegistrationTypes?: Array<string> | undefined;
  organizationName?: string | undefined;
  signedJwksUri?: string | undefined;
  entityId?: string | undefined;
  trustAnchorId?: string | undefined;
  trustChain?: Array<string> | undefined;
  trustChainExpiresAt?: number | undefined;
  trustChainUpdatedAt?: number | undefined;
  locked?: boolean | undefined;
  credentialOfferEndpoint?: string | undefined;
  fapiModes?: Array<string> | undefined;
  responseModes?: Array<string> | undefined;
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const FederationRegistrationApiFormClient$outboundSchema: z.ZodType<
  FederationRegistrationApiFormClient$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormClient
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => FederationRegistrationApiFormClientName$outboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => FederationRegistrationApiFormDescription$outboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: FederationRegistrationApiFormClientType$outboundSchema.optional(),
  applicationType: FederationRegistrationApiFormApplicationType$outboundSchema
    .optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(
    z.lazy(() => FederationRegistrationApiFormLogoUris$outboundSchema),
  ).optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(FederationRegistrationApiFormGrantType$outboundSchema)
    .optional(),
  responseTypes: z.array(
    FederationRegistrationApiFormResponseType$outboundSchema,
  ).optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg:
    FederationRegistrationApiFormAuthorizationSignAlg$outboundSchema.optional(),
  authorizationEncryptionAlg:
    FederationRegistrationApiFormAuthorizationEncryptionAlg$outboundSchema
      .optional(),
  authorizationEncryptionEnc:
    FederationRegistrationApiFormAuthorizationEncryptionEnc$outboundSchema
      .optional(),
  tokenAuthMethod: FederationRegistrationApiFormTokenAuthMethod$outboundSchema
    .optional(),
  tokenAuthSignAlg: FederationRegistrationApiFormTokenAuthSignAlg$outboundSchema
    .optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: FederationRegistrationApiFormRequestSignAlg$outboundSchema
    .optional(),
  requestEncryptionAlg:
    FederationRegistrationApiFormRequestEncryptionAlg$outboundSchema.optional(),
  requestEncryptionEnc:
    FederationRegistrationApiFormRequestEncryptionEnc$outboundSchema.optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: FederationRegistrationApiFormIdTokenSignAlg$outboundSchema
    .optional(),
  idTokenEncryptionAlg:
    FederationRegistrationApiFormIdTokenEncryptionAlg$outboundSchema.optional(),
  idTokenEncryptionEnc:
    FederationRegistrationApiFormIdTokenEncryptionEnc$outboundSchema.optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: FederationRegistrationApiFormSubjectType$outboundSchema
    .optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: FederationRegistrationApiFormUserInfoSignAlg$outboundSchema
    .optional(),
  userInfoEncryptionAlg:
    FederationRegistrationApiFormUserInfoEncryptionAlg$outboundSchema
      .optional(),
  userInfoEncryptionEnc:
    FederationRegistrationApiFormUserInfoEncryptionEnc$outboundSchema
      .optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(
    z.lazy(() => FederationRegistrationApiFormTosUris$outboundSchema),
  ).optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => FederationRegistrationApiFormPolicyUris$outboundSchema),
  ).optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(
    z.lazy(() => FederationRegistrationApiFormClientUris$outboundSchema),
  ).optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: FederationRegistrationApiFormBcRequestSignAlg$outboundSchema
    .optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(
    z.lazy(() => FederationRegistrationApiFormAttribute$outboundSchema),
  ).optional(),
  extension: z.lazy(() => FederationRegistrationApiFormExtension$outboundSchema)
    .optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    FederationRegistrationApiFormClientRegistrationType$outboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(FederationRegistrationApiFormFapiMode$outboundSchema)
    .optional(),
  responseModes: z.array(
    FederationRegistrationApiFormResponseMode$outboundSchema,
  ).optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormClient$ {
  /** @deprecated use `FederationRegistrationApiFormClient$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormClient$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClient$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormClient$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormClient$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormClient$Outbound;
}

export function federationRegistrationApiFormClientToJSON(
  federationRegistrationApiFormClient: FederationRegistrationApiFormClient,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormClient$outboundSchema.parse(
      federationRegistrationApiFormClient,
    ),
  );
}

export function federationRegistrationApiFormClientFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormClient' from JSON`,
  );
}

/** @internal */
export const FederationRegistrationApiFormResponse$inboundSchema: z.ZodType<
  FederationRegistrationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: z.lazy(() => FederationRegistrationApiFormClient$inboundSchema)
    .optional(),
});

/** @internal */
export type FederationRegistrationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: FederationRegistrationApiFormClient$Outbound | undefined;
};

/** @internal */
export const FederationRegistrationApiFormResponse$outboundSchema: z.ZodType<
  FederationRegistrationApiFormResponse$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: z.lazy(() => FederationRegistrationApiFormClient$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormResponse$ {
  /** @deprecated use `FederationRegistrationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormResponse$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormResponse$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormResponse$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormResponse$Outbound;
}

export function federationRegistrationApiFormResponseToJSON(
  federationRegistrationApiFormResponse: FederationRegistrationApiFormResponse,
): string {
  return JSON.stringify(
    FederationRegistrationApiFormResponse$outboundSchema.parse(
      federationRegistrationApiFormResponse,
    ),
  );
}

export function federationRegistrationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FederationRegistrationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiFormResponse' from JSON`,
  );
}
