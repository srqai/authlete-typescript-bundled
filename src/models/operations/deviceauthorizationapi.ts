/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeviceAuthorizationApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type DeviceAuthorizationApiRequestBody = {
  /**
   * Parameters of a device authorization request which are the request parameters that the device
   *
   * @remarks
   * authorization endpoint of the authorization server implementation received from the client application.
   *
   * The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
   * of the request from the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from Authorization header of the device authorization request from the
   *
   * @remarks
   * client application.
   *
   * If the device authorization endpoint of the authorization server implementation supports Basic
   * `Authentication` as a means of client authentication, and the request from the client application
   * contained its client ID in `Authorization` header, the value should be extracted and set to this
   * parameter.
   */
  clientId?: string | undefined;
  /**
   * The client secret extracted from `Authorization` header of the device authorization request from
   *
   * @remarks
   * the client application.
   *
   * If the device authorization endpoint of the authorization server implementation supports Basic
   * Authentication as a means of client authentication, and the request from the client application
   * contained its client secret in `Authorization` header, the value should be extracted and set to
   * this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate used in the TLS connection between the client application and the device
   *
   * @remarks
   * authorization endpoint of the authorization server.
   */
  clientCertificate?: string | undefined;
  /**
   * The client certificate path presented by the client during client authentication. Each element
   *
   * @remarks
   * is a string in PEM format.
   */
  clientCertificatePath?: string | undefined;
};

export type DeviceAuthorizationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: DeviceAuthorizationApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const DeviceAuthorizationApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type DeviceAuthorizationApiAction = ClosedEnum<
  typeof DeviceAuthorizationApiAction
>;

export type DeviceAuthorizationApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<DeviceAuthorizationApiDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<DeviceAuthorizationApiAttribute> | undefined;
};

export type DeviceAuthorizationApiElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceAuthorizationApiAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceAuthorizationApiElement> | undefined;
};

export type DeviceAuthorizationApiServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const DeviceAuthorizationApiGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type DeviceAuthorizationApiGmAction = ClosedEnum<
  typeof DeviceAuthorizationApiGmAction
>;

export type DeviceAuthorizationApiGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type DeviceAuthorizationApiGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceAuthorizationApiGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceAuthorizationApiGrantElement> | undefined;
};

export type DeviceAuthorizationApiGrant = {
  scopes?: Array<DeviceAuthorizationApiGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | DeviceAuthorizationApiGrantAuthorizationDetails
    | undefined;
};

export type DeviceAuthorizationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: DeviceAuthorizationApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the device authorization request.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the device authorization
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the device authorization
   *
   * @remarks
   * request is the client ID alias. `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the device authorization request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The client authentication method that should be performed at the device authorization
   *
   * @remarks
   * endpoint.
   */
  clientAuthMethod?: string | undefined;
  /**
   * The scopes requested by the device authorization request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the scope request parameter in the device
   * authorization request. However, because unregistered scopes are dropped on Authlete
   * side, if the `scope` request parameter contains unknown scopes, the list returned by
   * this property becomes different from the value of the `scope` request parameter.
   *
   * Note that `description` property and `descriptions` property of each scope object in the
   * array contained in this property is always `null` even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<DeviceAuthorizationApiScope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   */
  claimNames?: Array<string> | undefined;
  /**
   * The list of ACR values requested by the device authorization request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `acr_values` request parameter in the
   * device authorization request. However, because unsupported ACR values are dropped
   * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
   * the list returned by this property becomes different from the value of the `acr_values`
   * request parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The device verification code. This corresponds to the `device_code` property in the
   *
   * @remarks
   * response to the client.
   */
  deviceCode?: string | undefined;
  /**
   * The end-user verification code. This corresponds to the `user_code` property in the
   *
   * @remarks
   * response to the client.
   */
  userCode?: string | undefined;
  /**
   * The end-user verification URI. This corresponds to the `verification_uri` property in
   *
   * @remarks
   * the response to the client.
   */
  verificationUri?: string | undefined;
  /**
   * The end-user verification URI that includes the end-user verification code. This corresponds
   *
   * @remarks
   * to the `verification_uri_complete` property in the response to the client.
   */
  verificationUriComplete?: string | undefined;
  /**
   * The duration of the device verification code in seconds. This corresponds to the `expires_in`
   *
   * @remarks
   * property in the response to the client.
   */
  expiresIn?: number | undefined;
  /**
   * The minimum amount of time in seconds that the client must wait for between polling
   *
   * @remarks
   * requests to the token endpoint. This corresponds to the `interval` property in the response
   * to the client.
   */
  interval?: number | undefined;
  /**
   * The warnings raised during processing the backchannel authentication request.
   *
   * @remarks
   */
  warnings?: Array<string> | undefined;
  /**
   * The resources specified by the `resource` request parameters. See "Resource Indicators
   *
   * @remarks
   * for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: DeviceAuthorizationApiAuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<DeviceAuthorizationApiServiceAttribute> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<DeviceAuthorizationApiClientAttribute> | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<DeviceAuthorizationApiDynamicScope> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: DeviceAuthorizationApiGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: DeviceAuthorizationApiGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceAuthorizationApiRequestBody$inboundSchema: z.ZodType<
  DeviceAuthorizationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiRequestBody$Outbound = {
  parameters: string;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiRequestBody$outboundSchema: z.ZodType<
  DeviceAuthorizationApiRequestBody$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiRequestBody
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiRequestBody$ {
  /** @deprecated use `DeviceAuthorizationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiRequestBody$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiRequestBody$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiRequestBody$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiRequestBody$Outbound;
}

export function deviceAuthorizationApiRequestBodyToJSON(
  deviceAuthorizationApiRequestBody: DeviceAuthorizationApiRequestBody,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiRequestBody$outboundSchema.parse(
      deviceAuthorizationApiRequestBody,
    ),
  );
}

export function deviceAuthorizationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiRequest$inboundSchema: z.ZodType<
  DeviceAuthorizationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => DeviceAuthorizationApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeviceAuthorizationApiRequest$Outbound = {
  serviceId: string;
  RequestBody: DeviceAuthorizationApiRequestBody$Outbound;
};

/** @internal */
export const DeviceAuthorizationApiRequest$outboundSchema: z.ZodType<
  DeviceAuthorizationApiRequest$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => DeviceAuthorizationApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiRequest$ {
  /** @deprecated use `DeviceAuthorizationApiRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiRequest$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiRequest$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiRequest$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiRequest$Outbound;
}

export function deviceAuthorizationApiRequestToJSON(
  deviceAuthorizationApiRequest: DeviceAuthorizationApiRequest,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiRequest$outboundSchema.parse(
      deviceAuthorizationApiRequest,
    ),
  );
}

export function deviceAuthorizationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiRequest' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiAction
> = z.nativeEnum(DeviceAuthorizationApiAction);

/** @internal */
export const DeviceAuthorizationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiAction
> = DeviceAuthorizationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiAction$ {
  /** @deprecated use `DeviceAuthorizationApiAction$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiAction$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiAction$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiAction$outboundSchema;
}

/** @internal */
export const DeviceAuthorizationApiDescription$inboundSchema: z.ZodType<
  DeviceAuthorizationApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiDescription$outboundSchema: z.ZodType<
  DeviceAuthorizationApiDescription$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiDescription$ {
  /** @deprecated use `DeviceAuthorizationApiDescription$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiDescription$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiDescription$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiDescription$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiDescription$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiDescription$Outbound;
}

export function deviceAuthorizationApiDescriptionToJSON(
  deviceAuthorizationApiDescription: DeviceAuthorizationApiDescription,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiDescription$outboundSchema.parse(
      deviceAuthorizationApiDescription,
    ),
  );
}

export function deviceAuthorizationApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiDescription' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiAttribute$inboundSchema: z.ZodType<
  DeviceAuthorizationApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiAttribute$outboundSchema: z.ZodType<
  DeviceAuthorizationApiAttribute$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiAttribute$ {
  /** @deprecated use `DeviceAuthorizationApiAttribute$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiAttribute$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiAttribute$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiAttribute$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiAttribute$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiAttribute$Outbound;
}

export function deviceAuthorizationApiAttributeToJSON(
  deviceAuthorizationApiAttribute: DeviceAuthorizationApiAttribute,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiAttribute$outboundSchema.parse(
      deviceAuthorizationApiAttribute,
    ),
  );
}

export function deviceAuthorizationApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiScope$inboundSchema: z.ZodType<
  DeviceAuthorizationApiScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceAuthorizationApiDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceAuthorizationApiAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type DeviceAuthorizationApiScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?: Array<DeviceAuthorizationApiDescription$Outbound> | undefined;
  attributes?: Array<DeviceAuthorizationApiAttribute$Outbound> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiScope$outboundSchema: z.ZodType<
  DeviceAuthorizationApiScope$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceAuthorizationApiDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceAuthorizationApiAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiScope$ {
  /** @deprecated use `DeviceAuthorizationApiScope$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiScope$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiScope$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiScope$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiScope$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiScope$Outbound;
}

export function deviceAuthorizationApiScopeToJSON(
  deviceAuthorizationApiScope: DeviceAuthorizationApiScope,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiScope$outboundSchema.parse(
      deviceAuthorizationApiScope,
    ),
  );
}

export function deviceAuthorizationApiScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiScope' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiElement$inboundSchema: z.ZodType<
  DeviceAuthorizationApiElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiElement$outboundSchema: z.ZodType<
  DeviceAuthorizationApiElement$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiElement$ {
  /** @deprecated use `DeviceAuthorizationApiElement$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiElement$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiElement$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiElement$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiElement$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiElement$Outbound;
}

export function deviceAuthorizationApiElementToJSON(
  deviceAuthorizationApiElement: DeviceAuthorizationApiElement,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiElement$outboundSchema.parse(
      deviceAuthorizationApiElement,
    ),
  );
}

export function deviceAuthorizationApiElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiElement' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiAuthorizationDetails$inboundSchema:
  z.ZodType<DeviceAuthorizationApiAuthorizationDetails, z.ZodTypeDef, unknown> =
    z.object({
      elements: z.array(
        z.lazy(() => DeviceAuthorizationApiElement$inboundSchema),
      ).optional(),
    });

/** @internal */
export type DeviceAuthorizationApiAuthorizationDetails$Outbound = {
  elements?: Array<DeviceAuthorizationApiElement$Outbound> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiAuthorizationDetails$ {
  /** @deprecated use `DeviceAuthorizationApiAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiAuthorizationDetails$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiAuthorizationDetails$Outbound;
}

export function deviceAuthorizationApiAuthorizationDetailsToJSON(
  deviceAuthorizationApiAuthorizationDetails:
    DeviceAuthorizationApiAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiAuthorizationDetails$outboundSchema.parse(
      deviceAuthorizationApiAuthorizationDetails,
    ),
  );
}

export function deviceAuthorizationApiAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceAuthorizationApiAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceAuthorizationApiAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiServiceAttribute$inboundSchema: z.ZodType<
  DeviceAuthorizationApiServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiServiceAttribute$outboundSchema: z.ZodType<
  DeviceAuthorizationApiServiceAttribute$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiServiceAttribute$ {
  /** @deprecated use `DeviceAuthorizationApiServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiServiceAttribute$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiServiceAttribute$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiServiceAttribute$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiServiceAttribute$Outbound;
}

export function deviceAuthorizationApiServiceAttributeToJSON(
  deviceAuthorizationApiServiceAttribute:
    DeviceAuthorizationApiServiceAttribute,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiServiceAttribute$outboundSchema.parse(
      deviceAuthorizationApiServiceAttribute,
    ),
  );
}

export function deviceAuthorizationApiServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiServiceAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiServiceAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiServiceAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiClientAttribute$inboundSchema: z.ZodType<
  DeviceAuthorizationApiClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiClientAttribute$outboundSchema: z.ZodType<
  DeviceAuthorizationApiClientAttribute$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiClientAttribute$ {
  /** @deprecated use `DeviceAuthorizationApiClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiClientAttribute$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiClientAttribute$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiClientAttribute$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiClientAttribute$Outbound;
}

export function deviceAuthorizationApiClientAttributeToJSON(
  deviceAuthorizationApiClientAttribute: DeviceAuthorizationApiClientAttribute,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiClientAttribute$outboundSchema.parse(
      deviceAuthorizationApiClientAttribute,
    ),
  );
}

export function deviceAuthorizationApiClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiClientAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiClientAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiClientAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiDynamicScope$inboundSchema: z.ZodType<
  DeviceAuthorizationApiDynamicScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiDynamicScope$outboundSchema: z.ZodType<
  DeviceAuthorizationApiDynamicScope$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiDynamicScope
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiDynamicScope$ {
  /** @deprecated use `DeviceAuthorizationApiDynamicScope$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiDynamicScope$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiDynamicScope$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiDynamicScope$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiDynamicScope$Outbound;
}

export function deviceAuthorizationApiDynamicScopeToJSON(
  deviceAuthorizationApiDynamicScope: DeviceAuthorizationApiDynamicScope,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiDynamicScope$outboundSchema.parse(
      deviceAuthorizationApiDynamicScope,
    ),
  );
}

export function deviceAuthorizationApiDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiDynamicScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiDynamicScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiDynamicScope' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiGmAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiGmAction
> = z.nativeEnum(DeviceAuthorizationApiGmAction);

/** @internal */
export const DeviceAuthorizationApiGmAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiGmAction
> = DeviceAuthorizationApiGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiGmAction$ {
  /** @deprecated use `DeviceAuthorizationApiGmAction$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiGmAction$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGmAction$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiGmAction$outboundSchema;
}

/** @internal */
export const DeviceAuthorizationApiGrantScope$inboundSchema: z.ZodType<
  DeviceAuthorizationApiGrantScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type DeviceAuthorizationApiGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiGrantScope$outboundSchema: z.ZodType<
  DeviceAuthorizationApiGrantScope$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiGrantScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiGrantScope$ {
  /** @deprecated use `DeviceAuthorizationApiGrantScope$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiGrantScope$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrantScope$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiGrantScope$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrantScope$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiGrantScope$Outbound;
}

export function deviceAuthorizationApiGrantScopeToJSON(
  deviceAuthorizationApiGrantScope: DeviceAuthorizationApiGrantScope,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiGrantScope$outboundSchema.parse(
      deviceAuthorizationApiGrantScope,
    ),
  );
}

export function deviceAuthorizationApiGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiGrantScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiGrantScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiGrantScope' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiGrantElement$inboundSchema: z.ZodType<
  DeviceAuthorizationApiGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiGrantElement$outboundSchema: z.ZodType<
  DeviceAuthorizationApiGrantElement$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiGrantElement$ {
  /** @deprecated use `DeviceAuthorizationApiGrantElement$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiGrantElement$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiGrantElement$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrantElement$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiGrantElement$Outbound;
}

export function deviceAuthorizationApiGrantElementToJSON(
  deviceAuthorizationApiGrantElement: DeviceAuthorizationApiGrantElement,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiGrantElement$outboundSchema.parse(
      deviceAuthorizationApiGrantElement,
    ),
  );
}

export function deviceAuthorizationApiGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiGrantElement' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    DeviceAuthorizationApiGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DeviceAuthorizationApiGrantAuthorizationDetails$Outbound = {
  elements?: Array<DeviceAuthorizationApiGrantElement$Outbound> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiGrantAuthorizationDetails$ {
  /** @deprecated use `DeviceAuthorizationApiGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    DeviceAuthorizationApiGrantAuthorizationDetails$Outbound;
}

export function deviceAuthorizationApiGrantAuthorizationDetailsToJSON(
  deviceAuthorizationApiGrantAuthorizationDetails:
    DeviceAuthorizationApiGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiGrantAuthorizationDetails$outboundSchema.parse(
      deviceAuthorizationApiGrantAuthorizationDetails,
    ),
  );
}

export function deviceAuthorizationApiGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceAuthorizationApiGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceAuthorizationApiGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiGrant$inboundSchema: z.ZodType<
  DeviceAuthorizationApiGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.lazy(() => DeviceAuthorizationApiGrantScope$inboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type DeviceAuthorizationApiGrant$Outbound = {
  scopes?: Array<DeviceAuthorizationApiGrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceAuthorizationApiGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const DeviceAuthorizationApiGrant$outboundSchema: z.ZodType<
  DeviceAuthorizationApiGrant$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiGrant
> = z.object({
  scopes: z.array(z.lazy(() => DeviceAuthorizationApiGrantScope$outboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiGrant$ {
  /** @deprecated use `DeviceAuthorizationApiGrant$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiGrant$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrant$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiGrant$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiGrant$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiGrant$Outbound;
}

export function deviceAuthorizationApiGrantToJSON(
  deviceAuthorizationApiGrant: DeviceAuthorizationApiGrant,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiGrant$outboundSchema.parse(
      deviceAuthorizationApiGrant,
    ),
  );
}

export function deviceAuthorizationApiGrantFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiGrant' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiResponse$inboundSchema: z.ZodType<
  DeviceAuthorizationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceAuthorizationApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  clientAuthMethod: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceAuthorizationApiScope$inboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  deviceCode: z.string().optional(),
  userCode: z.string().optional(),
  verificationUri: z.string().optional(),
  verificationUriComplete: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
  warnings: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiClientAttribute$inboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceAuthorizationApiDynamicScope$inboundSchema),
  ).optional(),
  gmAction: DeviceAuthorizationApiGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceAuthorizationApiGrant$inboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type DeviceAuthorizationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  clientAuthMethod?: string | undefined;
  scopes?: Array<DeviceAuthorizationApiScope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  acrs?: Array<string> | undefined;
  deviceCode?: string | undefined;
  userCode?: string | undefined;
  verificationUri?: string | undefined;
  verificationUriComplete?: string | undefined;
  expiresIn?: number | undefined;
  interval?: number | undefined;
  warnings?: Array<string> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceAuthorizationApiAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<DeviceAuthorizationApiServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<DeviceAuthorizationApiClientAttribute$Outbound>
    | undefined;
  dynamicScopes?:
    | Array<DeviceAuthorizationApiDynamicScope$Outbound>
    | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: DeviceAuthorizationApiGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceAuthorizationApiResponse$outboundSchema: z.ZodType<
  DeviceAuthorizationApiResponse$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceAuthorizationApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  clientAuthMethod: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceAuthorizationApiScope$outboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  deviceCode: z.string().optional(),
  userCode: z.string().optional(),
  verificationUri: z.string().optional(),
  verificationUriComplete: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
  warnings: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiClientAttribute$outboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceAuthorizationApiDynamicScope$outboundSchema),
  ).optional(),
  gmAction: DeviceAuthorizationApiGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceAuthorizationApiGrant$outboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiResponse$ {
  /** @deprecated use `DeviceAuthorizationApiResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiResponse$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiResponse$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiResponse$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiResponse$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiResponse$Outbound;
}

export function deviceAuthorizationApiResponseToJSON(
  deviceAuthorizationApiResponse: DeviceAuthorizationApiResponse,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiResponse$outboundSchema.parse(
      deviceAuthorizationApiResponse,
    ),
  );
}

export function deviceAuthorizationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiResponse' from JSON`,
  );
}
