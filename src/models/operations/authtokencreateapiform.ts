/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenCreateApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenCreateApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthTokenCreateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenCreateApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenCreateApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenCreateApiFormAction = ClosedEnum<
  typeof AuthTokenCreateApiFormAction
>;

export type AuthTokenCreateApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenCreateApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthTokenCreateApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthTokenCreateApiFormElement> | undefined;
};

export type AuthTokenCreateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenCreateApiFormAction | undefined;
  /**
   * The newly issued access token.
   */
  accessToken?: string | undefined;
  /**
   * The ID of the client application associated with the access token.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The time at which the access token expires.
   *
   * @remarks
   */
  expiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  expiresIn?: number | undefined;
  /**
   * The grant type for the newly issued access token.
   *
   * @remarks
   */
  grantType?: string | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<AuthTokenCreateApiFormProperty> | undefined;
  /**
   * The newly issued refresh token.
   *
   * @remarks
   */
  refreshToken?: string | undefined;
  /**
   * Scopes which are associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The subject (= unique identifier) of the user associated with the newly issued access
   *
   * @remarks
   * token.
   */
  subject?: string | undefined;
  /**
   * The token type of the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
   *
   * @remarks
   * is set to a `non-null` value), a JWT-based access token is issued along with the original
   * random-string one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthTokenCreateApiFormAuthorizationDetails | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The scopes associated with the refresh token. May be null.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormRequestBody$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthTokenCreateApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiFormRequestBody$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormRequestBody$ {
  /** @deprecated use `AuthTokenCreateApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormRequestBody$Outbound;
}

export function authTokenCreateApiFormRequestBodyToJSON(
  authTokenCreateApiFormRequestBody: AuthTokenCreateApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormRequestBody$outboundSchema.parse(
      authTokenCreateApiFormRequestBody,
    ),
  );
}

export function authTokenCreateApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenCreateApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenCreateApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenCreateApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenCreateApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthTokenCreateApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenCreateApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormRequest$ {
  /** @deprecated use `AuthTokenCreateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormRequest$Outbound;
}

export function authTokenCreateApiFormRequestToJSON(
  authTokenCreateApiFormRequest: AuthTokenCreateApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormRequest$outboundSchema.parse(
      authTokenCreateApiFormRequest,
    ),
  );
}

export function authTokenCreateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenCreateApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenCreateApiFormAction
> = z.nativeEnum(AuthTokenCreateApiFormAction);

/** @internal */
export const AuthTokenCreateApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenCreateApiFormAction
> = AuthTokenCreateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormAction$ {
  /** @deprecated use `AuthTokenCreateApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenCreateApiFormProperty$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenCreateApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormProperty$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormProperty$ {
  /** @deprecated use `AuthTokenCreateApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormProperty$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormProperty$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormProperty$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormProperty$Outbound;
}

export function authTokenCreateApiFormPropertyToJSON(
  authTokenCreateApiFormProperty: AuthTokenCreateApiFormProperty,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormProperty$outboundSchema.parse(
      authTokenCreateApiFormProperty,
    ),
  );
}

export function authTokenCreateApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormProperty' from JSON`,
  );
}

/** @internal */
export const AuthTokenCreateApiFormElement$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthTokenCreateApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormElement$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormElement$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormElement$ {
  /** @deprecated use `AuthTokenCreateApiFormElement$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormElement$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormElement$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormElement$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormElement$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormElement$Outbound;
}

export function authTokenCreateApiFormElementToJSON(
  authTokenCreateApiFormElement: AuthTokenCreateApiFormElement,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormElement$outboundSchema.parse(
      authTokenCreateApiFormElement,
    ),
  );
}

export function authTokenCreateApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormElement' from JSON`,
  );
}

/** @internal */
export const AuthTokenCreateApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<AuthTokenCreateApiFormAuthorizationDetails, z.ZodTypeDef, unknown> =
    z.object({
      elements: z.array(
        z.lazy(() => AuthTokenCreateApiFormElement$inboundSchema),
      ).optional(),
    });

/** @internal */
export type AuthTokenCreateApiFormAuthorizationDetails$Outbound = {
  elements?: Array<AuthTokenCreateApiFormElement$Outbound> | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthTokenCreateApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthTokenCreateApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthTokenCreateApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormAuthorizationDetails$ {
  /** @deprecated use `AuthTokenCreateApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormAuthorizationDetails$Outbound;
}

export function authTokenCreateApiFormAuthorizationDetailsToJSON(
  authTokenCreateApiFormAuthorizationDetails:
    AuthTokenCreateApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormAuthorizationDetails$outboundSchema.parse(
      authTokenCreateApiFormAuthorizationDetails,
    ),
  );
}

export function authTokenCreateApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenCreateApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenCreateApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenCreateApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthTokenCreateApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenCreateApiFormAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  clientId: z.number().int().optional(),
  expiresAt: z.number().int().optional(),
  expiresIn: z.number().int().optional(),
  grantType: z.string().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenCreateApiFormProperty$inboundSchema),
  ).optional(),
  refreshToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  tokenType: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenCreateApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenCreateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  clientId?: number | undefined;
  expiresAt?: number | undefined;
  expiresIn?: number | undefined;
  grantType?: string | undefined;
  properties?: Array<AuthTokenCreateApiFormProperty$Outbound> | undefined;
  refreshToken?: string | undefined;
  scopes?: Array<string> | undefined;
  subject?: string | undefined;
  tokenType?: string | undefined;
  jwtAccessToken?: string | undefined;
  authorizationDetails?:
    | AuthTokenCreateApiFormAuthorizationDetails$Outbound
    | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenCreateApiFormAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  clientId: z.number().int().optional(),
  expiresAt: z.number().int().optional(),
  expiresIn: z.number().int().optional(),
  grantType: z.string().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenCreateApiFormProperty$outboundSchema),
  ).optional(),
  refreshToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  tokenType: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenCreateApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormResponse$ {
  /** @deprecated use `AuthTokenCreateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormResponse$Outbound;
}

export function authTokenCreateApiFormResponseToJSON(
  authTokenCreateApiFormResponse: AuthTokenCreateApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenCreateApiFormResponse$outboundSchema.parse(
      authTokenCreateApiFormResponse,
    ),
  );
}

export function authTokenCreateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenCreateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenCreateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenCreateApiFormResponse' from JSON`,
  );
}
