/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClientRegistrationGetApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type ClientRegistrationGetApiRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type ClientRegistrationGetApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: ClientRegistrationGetApiRequestBody;
};

export type ClientRegistrationGetApiResponse = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationGetApiRequestBody$inboundSchema: z.ZodType<
  ClientRegistrationGetApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type ClientRegistrationGetApiRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationGetApiRequestBody$outboundSchema: z.ZodType<
  ClientRegistrationGetApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientRegistrationGetApiRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiRequestBody$ {
  /** @deprecated use `ClientRegistrationGetApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationGetApiRequestBody$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationGetApiRequestBody$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiRequestBody$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiRequestBody$Outbound;
}

export function clientRegistrationGetApiRequestBodyToJSON(
  clientRegistrationGetApiRequestBody: ClientRegistrationGetApiRequestBody,
): string {
  return JSON.stringify(
    ClientRegistrationGetApiRequestBody$outboundSchema.parse(
      clientRegistrationGetApiRequestBody,
    ),
  );
}

export function clientRegistrationGetApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationGetApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientRegistrationGetApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationGetApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationGetApiRequest$inboundSchema: z.ZodType<
  ClientRegistrationGetApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => ClientRegistrationGetApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientRegistrationGetApiRequest$Outbound = {
  serviceId: string;
  RequestBody: ClientRegistrationGetApiRequestBody$Outbound;
};

/** @internal */
export const ClientRegistrationGetApiRequest$outboundSchema: z.ZodType<
  ClientRegistrationGetApiRequest$Outbound,
  z.ZodTypeDef,
  ClientRegistrationGetApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => ClientRegistrationGetApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiRequest$ {
  /** @deprecated use `ClientRegistrationGetApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationGetApiRequest$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationGetApiRequest$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiRequest$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiRequest$Outbound;
}

export function clientRegistrationGetApiRequestToJSON(
  clientRegistrationGetApiRequest: ClientRegistrationGetApiRequest,
): string {
  return JSON.stringify(
    ClientRegistrationGetApiRequest$outboundSchema.parse(
      clientRegistrationGetApiRequest,
    ),
  );
}

export function clientRegistrationGetApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationGetApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationGetApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationGetApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientRegistrationGetApiResponse$inboundSchema: z.ZodType<
  ClientRegistrationGetApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type ClientRegistrationGetApiResponse$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationGetApiResponse$outboundSchema: z.ZodType<
  ClientRegistrationGetApiResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationGetApiResponse
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiResponse$ {
  /** @deprecated use `ClientRegistrationGetApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationGetApiResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationGetApiResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiResponse$Outbound;
}

export function clientRegistrationGetApiResponseToJSON(
  clientRegistrationGetApiResponse: ClientRegistrationGetApiResponse,
): string {
  return JSON.stringify(
    ClientRegistrationGetApiResponse$outboundSchema.parse(
      clientRegistrationGetApiResponse,
    ),
  );
}

export function clientRegistrationGetApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationGetApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationGetApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationGetApiResponse' from JSON`,
  );
}
