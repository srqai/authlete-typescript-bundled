/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const HskGetListApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type HskGetListApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
};

/**
 * Result of the API call
 */
export const HskGetListApiAction = {
  Success: "SUCCESS",
  InvalidRequest: "INVALID_REQUEST",
  ServerError: "SERVER_ERROR",
} as const;
/**
 * Result of the API call
 */
export type HskGetListApiAction = ClosedEnum<typeof HskGetListApiAction>;

/**
 * Holds information about a key managed in an HSM (Hardware Security Module)
 *
 * @remarks
 */
export type HskGetListApiHsk = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * Get the use of the key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

export type HskGetListApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * Result of the API call
   */
  action?: HskGetListApiAction | undefined;
  /**
   * List of HSK
   */
  hsks?: Array<HskGetListApiHsk> | undefined;
};

/** @internal */
export const HskGetListApiRequest$inboundSchema: z.ZodType<
  HskGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
});

/** @internal */
export type HskGetListApiRequest$Outbound = {
  serviceId: string;
};

/** @internal */
export const HskGetListApiRequest$outboundSchema: z.ZodType<
  HskGetListApiRequest$Outbound,
  z.ZodTypeDef,
  HskGetListApiRequest
> = z.object({
  serviceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiRequest$ {
  /** @deprecated use `HskGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiRequest$inboundSchema;
  /** @deprecated use `HskGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiRequest$outboundSchema;
  /** @deprecated use `HskGetListApiRequest$Outbound` instead. */
  export type Outbound = HskGetListApiRequest$Outbound;
}

export function hskGetListApiRequestToJSON(
  hskGetListApiRequest: HskGetListApiRequest,
): string {
  return JSON.stringify(
    HskGetListApiRequest$outboundSchema.parse(hskGetListApiRequest),
  );
}

export function hskGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<HskGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const HskGetListApiAction$inboundSchema: z.ZodNativeEnum<
  typeof HskGetListApiAction
> = z.nativeEnum(HskGetListApiAction);

/** @internal */
export const HskGetListApiAction$outboundSchema: z.ZodNativeEnum<
  typeof HskGetListApiAction
> = HskGetListApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiAction$ {
  /** @deprecated use `HskGetListApiAction$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiAction$inboundSchema;
  /** @deprecated use `HskGetListApiAction$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiAction$outboundSchema;
}

/** @internal */
export const HskGetListApiHsk$inboundSchema: z.ZodType<
  HskGetListApiHsk,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type HskGetListApiHsk$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const HskGetListApiHsk$outboundSchema: z.ZodType<
  HskGetListApiHsk$Outbound,
  z.ZodTypeDef,
  HskGetListApiHsk
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiHsk$ {
  /** @deprecated use `HskGetListApiHsk$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiHsk$inboundSchema;
  /** @deprecated use `HskGetListApiHsk$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiHsk$outboundSchema;
  /** @deprecated use `HskGetListApiHsk$Outbound` instead. */
  export type Outbound = HskGetListApiHsk$Outbound;
}

export function hskGetListApiHskToJSON(
  hskGetListApiHsk: HskGetListApiHsk,
): string {
  return JSON.stringify(
    HskGetListApiHsk$outboundSchema.parse(hskGetListApiHsk),
  );
}

export function hskGetListApiHskFromJSON(
  jsonString: string,
): SafeParseResult<HskGetListApiHsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetListApiHsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetListApiHsk' from JSON`,
  );
}

/** @internal */
export const HskGetListApiResponse$inboundSchema: z.ZodType<
  HskGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskGetListApiAction$inboundSchema.optional(),
  hsks: z.array(z.lazy(() => HskGetListApiHsk$inboundSchema)).optional(),
});

/** @internal */
export type HskGetListApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  hsks?: Array<HskGetListApiHsk$Outbound> | undefined;
};

/** @internal */
export const HskGetListApiResponse$outboundSchema: z.ZodType<
  HskGetListApiResponse$Outbound,
  z.ZodTypeDef,
  HskGetListApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskGetListApiAction$outboundSchema.optional(),
  hsks: z.array(z.lazy(() => HskGetListApiHsk$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiResponse$ {
  /** @deprecated use `HskGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiResponse$inboundSchema;
  /** @deprecated use `HskGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiResponse$outboundSchema;
  /** @deprecated use `HskGetListApiResponse$Outbound` instead. */
  export type Outbound = HskGetListApiResponse$Outbound;
}

export function hskGetListApiResponseToJSON(
  hskGetListApiResponse: HskGetListApiResponse,
): string {
  return JSON.stringify(
    HskGetListApiResponse$outboundSchema.parse(hskGetListApiResponse),
  );
}

export function hskGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<HskGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetListApiResponse' from JSON`,
  );
}
