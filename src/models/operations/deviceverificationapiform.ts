/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeviceVerificationApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type DeviceVerificationApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type DeviceVerificationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: DeviceVerificationApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const DeviceVerificationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  NotExist: "NOT_EXIST",
  Expired: "EXPIRED",
  Valid: "VALID",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type DeviceVerificationApiFormAction = ClosedEnum<
  typeof DeviceVerificationApiFormAction
>;

export type DeviceVerificationApiFormDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiFormAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiFormScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<DeviceVerificationApiFormDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<DeviceVerificationApiFormAttribute> | undefined;
};

export type DeviceVerificationApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceVerificationApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceVerificationApiFormElement> | undefined;
};

export type DeviceVerificationApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiFormDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const DeviceVerificationApiFormGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type DeviceVerificationApiFormGmAction = ClosedEnum<
  typeof DeviceVerificationApiFormGmAction
>;

export type DeviceVerificationApiFormGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type DeviceVerificationApiFormGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceVerificationApiFormGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceVerificationApiFormGrantElement> | undefined;
};

export type DeviceVerificationApiFormGrant = {
  scopes?: Array<DeviceVerificationApiFormGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | DeviceVerificationApiFormGrantAuthorizationDetails
    | undefined;
};

export type DeviceVerificationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: DeviceVerificationApiFormAction | undefined;
  /**
   * The client ID of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the `client_id` request parameter included in the device authorization
   *
   * @remarks
   * request is the client ID alias. `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The scopes requested by the device authorization request.
   *
   * @remarks
   *
   * Note that `description` property and `descriptions` property of each scope object in
   * the array contained in this property is always null even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<DeviceVerificationApiFormScope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   *
   * This property is always `null` if the `scope` request parameter of the device authorization
   * request does not include the `openid` scope even if special scopes (such as `profile`)
   * are included in the request (unless the openid scope is included in the default set
   * of scopes which is used when the `scope` request parameter is omitted).
   */
  claimNames?: Array<string> | undefined;
  /**
   * The list of ACR values requested by the device authorization request.
   *
   * @remarks
   */
  acrs?: Array<string> | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | DeviceVerificationApiFormAuthorizationDetails
    | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?:
    | Array<DeviceVerificationApiFormServiceAttribute>
    | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?:
    | Array<DeviceVerificationApiFormClientAttribute>
    | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<DeviceVerificationApiFormDynamicScope> | undefined;
  /**
   * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
   *
   * @remarks
   */
  expiresAt?: number | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: DeviceVerificationApiFormGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: DeviceVerificationApiFormGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceVerificationApiFormRequestBody$inboundSchema: z.ZodType<
  DeviceVerificationApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type DeviceVerificationApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiFormRequestBody$outboundSchema: z.ZodType<
  DeviceVerificationApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormRequestBody$ {
  /** @deprecated use `DeviceVerificationApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormRequestBody$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormRequestBody$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormRequestBody$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormRequestBody$Outbound;
}

export function deviceVerificationApiFormRequestBodyToJSON(
  deviceVerificationApiFormRequestBody: DeviceVerificationApiFormRequestBody,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormRequestBody$outboundSchema.parse(
      deviceVerificationApiFormRequestBody,
    ),
  );
}

export function deviceVerificationApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormRequest$inboundSchema: z.ZodType<
  DeviceVerificationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => DeviceVerificationApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeviceVerificationApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: DeviceVerificationApiFormRequestBody$Outbound;
};

/** @internal */
export const DeviceVerificationApiFormRequest$outboundSchema: z.ZodType<
  DeviceVerificationApiFormRequest$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    DeviceVerificationApiFormRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormRequest$ {
  /** @deprecated use `DeviceVerificationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormRequest$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiFormRequest$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormRequest$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormRequest$Outbound;
}

export function deviceVerificationApiFormRequestToJSON(
  deviceVerificationApiFormRequest: DeviceVerificationApiFormRequest,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormRequest$outboundSchema.parse(
      deviceVerificationApiFormRequest,
    ),
  );
}

export function deviceVerificationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiFormAction
> = z.nativeEnum(DeviceVerificationApiFormAction);

/** @internal */
export const DeviceVerificationApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiFormAction
> = DeviceVerificationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormAction$ {
  /** @deprecated use `DeviceVerificationApiFormAction$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormAction$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormAction$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiFormAction$outboundSchema;
}

/** @internal */
export const DeviceVerificationApiFormDescription$inboundSchema: z.ZodType<
  DeviceVerificationApiFormDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormDescription$outboundSchema: z.ZodType<
  DeviceVerificationApiFormDescription$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormDescription$ {
  /** @deprecated use `DeviceVerificationApiFormDescription$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormDescription$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormDescription$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormDescription$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormDescription$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormDescription$Outbound;
}

export function deviceVerificationApiFormDescriptionToJSON(
  deviceVerificationApiFormDescription: DeviceVerificationApiFormDescription,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormDescription$outboundSchema.parse(
      deviceVerificationApiFormDescription,
    ),
  );
}

export function deviceVerificationApiFormDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormDescription' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormAttribute$inboundSchema: z.ZodType<
  DeviceVerificationApiFormAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormAttribute$outboundSchema: z.ZodType<
  DeviceVerificationApiFormAttribute$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormAttribute$ {
  /** @deprecated use `DeviceVerificationApiFormAttribute$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormAttribute$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormAttribute$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormAttribute$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormAttribute$Outbound;
}

export function deviceVerificationApiFormAttributeToJSON(
  deviceVerificationApiFormAttribute: DeviceVerificationApiFormAttribute,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormAttribute$outboundSchema.parse(
      deviceVerificationApiFormAttribute,
    ),
  );
}

export function deviceVerificationApiFormAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormScope$inboundSchema: z.ZodType<
  DeviceVerificationApiFormScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceVerificationApiFormDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceVerificationApiFormAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type DeviceVerificationApiFormScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<DeviceVerificationApiFormDescription$Outbound>
    | undefined;
  attributes?: Array<DeviceVerificationApiFormAttribute$Outbound> | undefined;
};

/** @internal */
export const DeviceVerificationApiFormScope$outboundSchema: z.ZodType<
  DeviceVerificationApiFormScope$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceVerificationApiFormDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceVerificationApiFormAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormScope$ {
  /** @deprecated use `DeviceVerificationApiFormScope$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormScope$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormScope$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiFormScope$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormScope$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormScope$Outbound;
}

export function deviceVerificationApiFormScopeToJSON(
  deviceVerificationApiFormScope: DeviceVerificationApiFormScope,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormScope$outboundSchema.parse(
      deviceVerificationApiFormScope,
    ),
  );
}

export function deviceVerificationApiFormScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiFormScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormScope' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormElement$inboundSchema: z.ZodType<
  DeviceVerificationApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormElement$outboundSchema: z.ZodType<
  DeviceVerificationApiFormElement$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormElement$ {
  /** @deprecated use `DeviceVerificationApiFormElement$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormElement$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormElement$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiFormElement$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormElement$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormElement$Outbound;
}

export function deviceVerificationApiFormElementToJSON(
  deviceVerificationApiFormElement: DeviceVerificationApiFormElement,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormElement$outboundSchema.parse(
      deviceVerificationApiFormElement,
    ),
  );
}

export function deviceVerificationApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormElement' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<
    DeviceVerificationApiFormAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceVerificationApiFormElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DeviceVerificationApiFormAuthorizationDetails$Outbound = {
  elements?: Array<DeviceVerificationApiFormElement$Outbound> | undefined;
};

/** @internal */
export const DeviceVerificationApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceVerificationApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceVerificationApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormAuthorizationDetails$ {
  /** @deprecated use `DeviceVerificationApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormAuthorizationDetails$Outbound;
}

export function deviceVerificationApiFormAuthorizationDetailsToJSON(
  deviceVerificationApiFormAuthorizationDetails:
    DeviceVerificationApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormAuthorizationDetails$outboundSchema.parse(
      deviceVerificationApiFormAuthorizationDetails,
    ),
  );
}

export function deviceVerificationApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceVerificationApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceVerificationApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormServiceAttribute$inboundSchema: z.ZodType<
  DeviceVerificationApiFormServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormServiceAttribute$outboundSchema:
  z.ZodType<
    DeviceVerificationApiFormServiceAttribute$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiFormServiceAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormServiceAttribute$ {
  /** @deprecated use `DeviceVerificationApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormServiceAttribute$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormServiceAttribute$Outbound;
}

export function deviceVerificationApiFormServiceAttributeToJSON(
  deviceVerificationApiFormServiceAttribute:
    DeviceVerificationApiFormServiceAttribute,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormServiceAttribute$outboundSchema.parse(
      deviceVerificationApiFormServiceAttribute,
    ),
  );
}

export function deviceVerificationApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceVerificationApiFormServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormServiceAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceVerificationApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormClientAttribute$inboundSchema: z.ZodType<
  DeviceVerificationApiFormClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormClientAttribute$outboundSchema: z.ZodType<
  DeviceVerificationApiFormClientAttribute$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormClientAttribute$ {
  /** @deprecated use `DeviceVerificationApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormClientAttribute$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormClientAttribute$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormClientAttribute$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormClientAttribute$Outbound;
}

export function deviceVerificationApiFormClientAttributeToJSON(
  deviceVerificationApiFormClientAttribute:
    DeviceVerificationApiFormClientAttribute,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormClientAttribute$outboundSchema.parse(
      deviceVerificationApiFormClientAttribute,
    ),
  );
}

export function deviceVerificationApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceVerificationApiFormClientAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormClientAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceVerificationApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormDynamicScope$inboundSchema: z.ZodType<
  DeviceVerificationApiFormDynamicScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormDynamicScope$outboundSchema: z.ZodType<
  DeviceVerificationApiFormDynamicScope$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormDynamicScope
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormDynamicScope$ {
  /** @deprecated use `DeviceVerificationApiFormDynamicScope$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormDynamicScope$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormDynamicScope$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormDynamicScope$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormDynamicScope$Outbound;
}

export function deviceVerificationApiFormDynamicScopeToJSON(
  deviceVerificationApiFormDynamicScope: DeviceVerificationApiFormDynamicScope,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormDynamicScope$outboundSchema.parse(
      deviceVerificationApiFormDynamicScope,
    ),
  );
}

export function deviceVerificationApiFormDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormDynamicScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormDynamicScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormDynamicScope' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormGmAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiFormGmAction
> = z.nativeEnum(DeviceVerificationApiFormGmAction);

/** @internal */
export const DeviceVerificationApiFormGmAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiFormGmAction
> = DeviceVerificationApiFormGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormGmAction$ {
  /** @deprecated use `DeviceVerificationApiFormGmAction$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormGmAction$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGmAction$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormGmAction$outboundSchema;
}

/** @internal */
export const DeviceVerificationApiFormGrantScope$inboundSchema: z.ZodType<
  DeviceVerificationApiFormGrantScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type DeviceVerificationApiFormGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const DeviceVerificationApiFormGrantScope$outboundSchema: z.ZodType<
  DeviceVerificationApiFormGrantScope$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormGrantScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormGrantScope$ {
  /** @deprecated use `DeviceVerificationApiFormGrantScope$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormGrantScope$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrantScope$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormGrantScope$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrantScope$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormGrantScope$Outbound;
}

export function deviceVerificationApiFormGrantScopeToJSON(
  deviceVerificationApiFormGrantScope: DeviceVerificationApiFormGrantScope,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormGrantScope$outboundSchema.parse(
      deviceVerificationApiFormGrantScope,
    ),
  );
}

export function deviceVerificationApiFormGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormGrantScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormGrantScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormGrantScope' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormGrantElement$inboundSchema: z.ZodType<
  DeviceVerificationApiFormGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiFormGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormGrantElement$outboundSchema: z.ZodType<
  DeviceVerificationApiFormGrantElement$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormGrantElement$ {
  /** @deprecated use `DeviceVerificationApiFormGrantElement$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormGrantElement$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormGrantElement$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrantElement$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormGrantElement$Outbound;
}

export function deviceVerificationApiFormGrantElementToJSON(
  deviceVerificationApiFormGrantElement: DeviceVerificationApiFormGrantElement,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormGrantElement$outboundSchema.parse(
      deviceVerificationApiFormGrantElement,
    ),
  );
}

export function deviceVerificationApiFormGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormGrantElement' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    DeviceVerificationApiFormGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceVerificationApiFormGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DeviceVerificationApiFormGrantAuthorizationDetails$Outbound = {
  elements?: Array<DeviceVerificationApiFormGrantElement$Outbound> | undefined;
};

/** @internal */
export const DeviceVerificationApiFormGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceVerificationApiFormGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiFormGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceVerificationApiFormGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormGrantAuthorizationDetails$ {
  /** @deprecated use `DeviceVerificationApiFormGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    DeviceVerificationApiFormGrantAuthorizationDetails$Outbound;
}

export function deviceVerificationApiFormGrantAuthorizationDetailsToJSON(
  deviceVerificationApiFormGrantAuthorizationDetails:
    DeviceVerificationApiFormGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormGrantAuthorizationDetails$outboundSchema.parse(
      deviceVerificationApiFormGrantAuthorizationDetails,
    ),
  );
}

export function deviceVerificationApiFormGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceVerificationApiFormGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiFormGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceVerificationApiFormGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormGrant$inboundSchema: z.ZodType<
  DeviceVerificationApiFormGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(
    z.lazy(() => DeviceVerificationApiFormGrantScope$inboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiFormGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type DeviceVerificationApiFormGrant$Outbound = {
  scopes?: Array<DeviceVerificationApiFormGrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceVerificationApiFormGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const DeviceVerificationApiFormGrant$outboundSchema: z.ZodType<
  DeviceVerificationApiFormGrant$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormGrant
> = z.object({
  scopes: z.array(
    z.lazy(() => DeviceVerificationApiFormGrantScope$outboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiFormGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormGrant$ {
  /** @deprecated use `DeviceVerificationApiFormGrant$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormGrant$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrant$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiFormGrant$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormGrant$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormGrant$Outbound;
}

export function deviceVerificationApiFormGrantToJSON(
  deviceVerificationApiFormGrant: DeviceVerificationApiFormGrant,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormGrant$outboundSchema.parse(
      deviceVerificationApiFormGrant,
    ),
  );
}

export function deviceVerificationApiFormGrantFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiFormGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormGrant' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiFormResponse$inboundSchema: z.ZodType<
  DeviceVerificationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceVerificationApiFormAction$inboundSchema.optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceVerificationApiFormScope$inboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceVerificationApiFormServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceVerificationApiFormClientAttribute$inboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceVerificationApiFormDynamicScope$inboundSchema),
  ).optional(),
  expiresAt: z.number().int().optional(),
  gmAction: DeviceVerificationApiFormGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceVerificationApiFormGrant$inboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type DeviceVerificationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  scopes?: Array<DeviceVerificationApiFormScope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  acrs?: Array<string> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceVerificationApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<DeviceVerificationApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<DeviceVerificationApiFormClientAttribute$Outbound>
    | undefined;
  dynamicScopes?:
    | Array<DeviceVerificationApiFormDynamicScope$Outbound>
    | undefined;
  expiresAt?: number | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: DeviceVerificationApiFormGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceVerificationApiFormResponse$outboundSchema: z.ZodType<
  DeviceVerificationApiFormResponse$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceVerificationApiFormAction$outboundSchema.optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceVerificationApiFormScope$outboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceVerificationApiFormServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceVerificationApiFormClientAttribute$outboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceVerificationApiFormDynamicScope$outboundSchema),
  ).optional(),
  expiresAt: z.number().int().optional(),
  gmAction: DeviceVerificationApiFormGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceVerificationApiFormGrant$outboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormResponse$ {
  /** @deprecated use `DeviceVerificationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiFormResponse$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormResponse$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormResponse$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormResponse$Outbound;
}

export function deviceVerificationApiFormResponseToJSON(
  deviceVerificationApiFormResponse: DeviceVerificationApiFormResponse,
): string {
  return JSON.stringify(
    DeviceVerificationApiFormResponse$outboundSchema.parse(
      deviceVerificationApiFormResponse,
    ),
  );
}

export function deviceVerificationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiFormResponse' from JSON`,
  );
}
