/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClientGetApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type ClientGetApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   */
  clientId: string;
};

export type ClientGetApiClientName = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const ClientGetApiClientType = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type ClientGetApiClientType = ClosedEnum<typeof ClientGetApiClientType>;

/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export const ClientGetApiApplicationType = {
  Web: "WEB",
  Native: "NATIVE",
} as const;
/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export type ClientGetApiApplicationType = ClosedEnum<
  typeof ClientGetApiApplicationType
>;

export type ClientGetApiLogoUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const ClientGetApiGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type ClientGetApiGrantType = ClosedEnum<typeof ClientGetApiGrantType>;

export const ClientGetApiResponseType = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type ClientGetApiResponseType = ClosedEnum<
  typeof ClientGetApiResponseType
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetApiAuthorizationSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetApiAuthorizationSignAlg = ClosedEnum<
  typeof ClientGetApiAuthorizationSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetApiAuthorizationEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetApiAuthorizationEncryptionAlg = ClosedEnum<
  typeof ClientGetApiAuthorizationEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetApiAuthorizationEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetApiAuthorizationEncryptionEnc = ClosedEnum<
  typeof ClientGetApiAuthorizationEncryptionEnc
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientGetApiTokenAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientGetApiTokenAuthMethod = ClosedEnum<
  typeof ClientGetApiTokenAuthMethod
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetApiTokenAuthSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetApiTokenAuthSignAlg = ClosedEnum<
  typeof ClientGetApiTokenAuthSignAlg
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetApiRequestSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetApiRequestSignAlg = ClosedEnum<
  typeof ClientGetApiRequestSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetApiRequestEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetApiRequestEncryptionAlg = ClosedEnum<
  typeof ClientGetApiRequestEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetApiRequestEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetApiRequestEncryptionEnc = ClosedEnum<
  typeof ClientGetApiRequestEncryptionEnc
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetApiIdTokenSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetApiIdTokenSignAlg = ClosedEnum<
  typeof ClientGetApiIdTokenSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetApiIdTokenEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetApiIdTokenEncryptionAlg = ClosedEnum<
  typeof ClientGetApiIdTokenEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetApiIdTokenEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetApiIdTokenEncryptionEnc = ClosedEnum<
  typeof ClientGetApiIdTokenEncryptionEnc
>;

/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientGetApiSubjectType = {
  Public: "PUBLIC",
  Pairwise: "PAIRWISE",
} as const;
/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientGetApiSubjectType = ClosedEnum<
  typeof ClientGetApiSubjectType
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetApiUserInfoSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetApiUserInfoSignAlg = ClosedEnum<
  typeof ClientGetApiUserInfoSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetApiUserInfoEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetApiUserInfoEncryptionAlg = ClosedEnum<
  typeof ClientGetApiUserInfoEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetApiUserInfoEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetApiUserInfoEncryptionEnc = ClosedEnum<
  typeof ClientGetApiUserInfoEncryptionEnc
>;

export type ClientGetApiTosUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetApiPolicyUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetApiClientUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetApiBcRequestSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetApiBcRequestSignAlg = ClosedEnum<
  typeof ClientGetApiBcRequestSignAlg
>;

export type ClientGetApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetApiExtension = {
  /**
   * The set of scopes that the client application is allowed to request. This paramter will be one
   *
   * @remarks
   * of the following.
   *
   *   - `null`
   *   - an empty set
   *   - a set with at least one element
   *
   * When the value of this parameter is `null`, it means that the set of scopes that the client
   * application is allowed to request is the set of the scopes that the service supports. When the
   * value of this parameter is an empty set, it means that the client application is not allowed to
   * request any scopes. When the value of this parameter is a set with at least one element, it means
   * that the set is the set of scopes that the client application is allowed to request.
   */
  requestableScopes?: Array<string> | undefined;
  /**
   * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
   *
   * @remarks
   * can define the set of scopes which this client application can request. If `false`, this client
   * application can request any scope which is supported by the authorization server.
   */
  requestableScopesEnabled?: boolean | undefined;
  /**
   * The value of the duration of access tokens per client in seconds. In normal cases, the value of
   *
   * @remarks
   * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
   * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of access tokens issued to the client application.
   *
   * Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
   * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of refresh tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The value of the duration of ID tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
   * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of ID tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  idTokenDuration?: number | undefined;
  /**
   * Get the flag indicating whether the client is explicitly given a
   *
   * @remarks
   * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
   */
  tokenExchangePermitted?: boolean | undefined;
};

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const ClientGetApiClientRegistrationType = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type ClientGetApiClientRegistrationType = ClosedEnum<
  typeof ClientGetApiClientRegistrationType
>;

export const ClientGetApiFapiMode = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type ClientGetApiFapiMode = ClosedEnum<typeof ClientGetApiFapiMode>;

export const ClientGetApiResponseMode = {
  Query: "QUERY",
  Fragment: "FRAGMENT",
  FormPost: "FORM_POST",
  Jwt: "JWT",
  QueryJwt: "QUERY_JWT",
  FragmentJwt: "FRAGMENT_JWT",
  FormPostJwt: "FORM_POST_JWT",
} as const;
export type ClientGetApiResponseMode = ClosedEnum<
  typeof ClientGetApiResponseMode
>;

export type ClientGetApiResponse = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The sequential number of the service of the client application. The value of this property is
   *
   * @remarks
   * assigned by Authlete.
   */
  serviceNumber?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<ClientGetApiClientName> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<ClientGetApiDescription> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
   *
   * @remarks
   * property is assigned by Authlete.
   *
   * Note that Authlete issues a client secret even to a "public" client application, but the client
   * application should not use the client secret unless it changes its client type to "confidential".
   * That is, a public client application should behave as if it had not been issued a client secret.
   * To be specific, a token request from a public client of Authlete should not come along with a
   * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
   * says as follows.
   *
   * > Confidential clients or other clients issued client credentials MUST authenticate with the
   * authorization server as described in Section 2.3 when making requests to the token endpoint.
   */
  clientSecret?: string | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: ClientGetApiClientType | undefined;
  /**
   * The application type. The value of this property affects the validation steps for a redirect URI.
   *
   * @remarks
   * See the description about `redirectUris` property for more details.
   */
  applicationType?: ClientGetApiApplicationType | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<ClientGetApiLogoUris> | undefined;
  /**
   * An array of email addresses of people responsible for the client application.
   *
   * @remarks
   *
   * This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
   * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  contacts?: Array<string> | undefined;
  /**
   * The flag to indicate whether this client use TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The flag to indicate whether this client has been registered dynamically.
   *
   * @remarks
   * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  dynamicallyRegistered?: boolean | undefined;
  /**
   * The unique identifier string assigned by the client developer or software publisher used by
   *
   * @remarks
   * registration endpoints to identify the client software to be dynamically registered.
   *
   * This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareId?: string | undefined;
  /**
   * The version identifier string for the client software identified by the software ID.
   *
   * @remarks
   *
   * This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareVersion?: string | undefined;
  /**
   * The hash of the registration access token for this client.
   *
   * @remarks
   */
  registrationAccessTokenHash?: string | undefined;
  /**
   * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  createdAt?: number | undefined;
  /**
   * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  modifiedAt?: number | undefined;
  /**
   * A string array of grant types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  grantTypes?: Array<ClientGetApiGrantType> | undefined;
  /**
   * A string array of response types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  responseTypes?: Array<ClientGetApiResponseType> | undefined;
  /**
   * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
   *
   * @remarks
   * Requirements for a redirect URI are as follows.
   *
   * **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
   *
   * - Must be an absolute URI.
   * - Must not have a fragment component.
   *
   * **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * application_type")
   *
   * - The scheme of the redirect URI used for Implicit Grant by a client application whose application
   * is `web` must be `https`. This is checked at runtime by Authlete.
   * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
   * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
   * - The scheme of the redirect URI used by a client application whose application type is `native`
   * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
   * is `localhost`. This is checked at runtime by Authlete.
   *
   * **Requirements by Authlete**
   *
   * - Must consist of printable ASCII letters only.
   * - Must not exceed 200 letters.
   *
   * Note that Authlete allows the application type to be `null`. In other words, a client application
   * does not have to choose `web` or `native` as its application type.
   * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
   *
   * An authorization request from a client application which has not registered any redirect URI
   * fails unless at least all the following conditions are satisfied.
   *
   * - The client type of the client application is `confidential`.
   * - The value of `response_type` request parameter is `code`.
   * - The authorization request has the `redirect_uri` request parameter.
   * - The value of `scope` request parameter does not contain `openid`.
   *
   * RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
   * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
   * details), but OpenID Connect requires exact match.
   */
  redirectUris?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  authorizationSignAlg?: ClientGetApiAuthorizationSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  authorizationEncryptionAlg?:
    | ClientGetApiAuthorizationEncryptionAlg
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  authorizationEncryptionEnc?:
    | ClientGetApiAuthorizationEncryptionEnc
    | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tokenAuthMethod?: ClientGetApiTokenAuthMethod | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  tokenAuthSignAlg?: ClientGetApiTokenAuthSignAlg | undefined;
  /**
   * The key ID of a JWK containing a self-signed certificate of this client.
   *
   * @remarks
   */
  selfSignedCertificateKeyId?: string | undefined;
  /**
   * The string representation of the expected subject distinguished name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSubjectDn?: string | undefined;
  /**
   * The string representation of the expected DNS subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanDns?: string | undefined;
  /**
   * The string representation of the expected URI subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanUri?: string | undefined;
  /**
   * The string representation of the expected IP address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanIp?: string | undefined;
  /**
   * The string representation of the expected email address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanEmail?: string | undefined;
  /**
   * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
   *
   * @remarks
   * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
   * in "OAuth 2.0 Pushed Authorization Requests".
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether authorization requests from this client are always required to
   *
   * @remarks
   * utilize a request object by using either `request` or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
   * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
   * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  requestSignAlg?: ClientGetApiRequestSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  requestEncryptionAlg?: ClientGetApiRequestEncryptionAlg | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  requestEncryptionEnc?: ClientGetApiRequestEncryptionEnc | undefined;
  /**
   * An array of URLs each of which points to a request object.
   *
   * @remarks
   *
   * Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
   * This property is used for the pre-registration.
   * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
   */
  requestUris?: Array<string> | undefined;
  /**
   * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
   *
   * @remarks
   *
   * This property corresponds to `default_max_age` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  defaultMaxAge?: number | undefined;
  /**
   * The default ACRs (Authentication Context Class References). This value is used when an authorization
   *
   * @remarks
   * request from the client application has neither `acr_values` request parameter nor `acr` claim
   * in claims request parameter.
   */
  defaultAcrs?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  idTokenSignAlg?: ClientGetApiIdTokenSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  idTokenEncryptionAlg?: ClientGetApiIdTokenEncryptionAlg | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  idTokenEncryptionEnc?: ClientGetApiIdTokenEncryptionEnc | undefined;
  /**
   * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
   *
   * @remarks
   *
   * This property corresponds to `require_auth_time` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  authTimeRequired?: boolean | undefined;
  /**
   * The subject type that the client application requests. Details about the subject type are described in
   *
   * @remarks
   * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
   *
   * This property corresponds to `subject_type` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  subjectType?: ClientGetApiSubjectType | undefined;
  /**
   * The value of the sector identifier URI.
   *
   * @remarks
   * This represents the `sector_identifier_uri` client metadata which is defined in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
   */
  sectorIdentifierUri?: string | undefined;
  /**
   * The sector identifier host component as derived from either the `sector_identifier_uri` or the
   *
   * @remarks
   * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
   * are also registered, the value of this property is `null`.
   */
  derivedSectorIdentifier?: string | undefined;
  /**
   * The URL pointing to the JWK Set of the client application.
   *
   * @remarks
   * The content pointed to by the URL is JSON which complies with the format described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
   * and/or signs request objects, it must make available its JWK Set containing public keys for the
   * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
   * Set from the URL as necessary.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * The content of the JWK Set of the client application.
   *
   * @remarks
   * The format is described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwks?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  userInfoSignAlg?: ClientGetApiUserInfoSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  userInfoEncryptionAlg?: ClientGetApiUserInfoEncryptionAlg | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  userInfoEncryptionEnc?: ClientGetApiUserInfoEncryptionEnc | undefined;
  /**
   * The URL which a third party can use to initiate a login by the client application.
   *
   * @remarks
   *
   * This property corresponds to `initiate_login_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  loginUri?: string | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<ClientGetApiTosUris> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<ClientGetApiPolicyUris> | undefined;
  /**
   * The URL pointing to the home page of the client application.
   *
   * @remarks
   *
   * This property corresponds to `client_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientUri?: string | undefined;
  /**
   * Home page URLs with language tags.
   *
   * @remarks
   * If the client application has different home pages for different languages, this property can
   * be used to register the URLs.
   */
  clientUris?: Array<ClientGetApiClientUris> | undefined;
  /**
   * The backchannel token delivery mode.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_token_delivery_mode` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcDeliveryMode?: string | undefined;
  /**
   * The backchannel client notification endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_client_notification_endpoint` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcNotificationEndpoint?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  bcRequestSignAlg?: ClientGetApiBcRequestSignAlg | undefined;
  /**
   * The boolean flag to indicate whether a user code is required when this client makes a backchannel
   *
   * @remarks
   * authentication request.
   *
   * This property corresponds to the `backchannel_user_code_parameter` metadata.
   */
  bcUserCodeRequired?: boolean | undefined;
  /**
   * The attributes of this client.
   *
   * @remarks
   */
  attributes?: Array<ClientGetApiAttribute> | undefined;
  extension?: ClientGetApiExtension | undefined;
  /**
   * The authorization details types that this client may use as values of the `type` field in
   *
   * @remarks
   * `authorization_details`.
   *
   * This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
   * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
   *
   * Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
   * to align with the change made by the 5th draft of the RAR specification.
   */
  authorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The custom client metadata in JSON format.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
   * to corresponding properties of the client application. For example, the value of the `client_name`
   * client metadata in Client Registration/Update Request is set to the clientName property. On the
   * other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
   * of Service, Authlete can recognize them and stores their values into the database. The stored
   * custom client metadata values can be referenced by this property.
   */
  customMetadata?: string | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the service is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
   *   since this signals to the OP that a client_secret value needs to be returned from which the
   *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
   *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
   *   is present. If both signing and encryption are requested, the Request Object will be signed
   *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
   *   is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The property that represents the client metadata is `requestEncryptionAlg`. See the description
   * of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   *   MUST also be provided.
   *
   * The property that represents the client metadata is `requestEncryptionEnc`. See the description
   * of `requestEncryptionEnc`  for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The digest algorithm that this client requests the server to use
   *
   * @remarks
   * when it computes digest values of <a href=
   * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
   * >external attachments</a>, which may be referenced from within ID tokens
   * or userinfo responses (or any place that can have the `verified_claims` claim).
   *
   * Possible values are listed in the <a href=
   * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
   * >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
   * but the server does not necessarily support all the values there. When
   * this property is omitted, `sha-256` is used as the default algorithm.
   *
   * This property corresponds to the `digest_algorithm` client metadata
   * which was defined by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
   */
  digestAlgorithm?: string | undefined;
  /**
   * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
   *
   * @remarks
   *
   * Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
   *
   * Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * If the DPoP is required for this client
   *
   * @remarks
   */
  dpopRequired?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "automatic" client registration of OIDC Federation.
   */
  automaticallyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "explicit" client registration of OIDC Federation.
   */
  explicitlyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsRequestSigned?: boolean | undefined;
  /**
   * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
   *
   * @remarks
   */
  rsSignedRequestKeyId?: string | undefined;
  /**
   * The client registration types that the client has declared it may use.
   *
   * @remarks
   */
  clientRegistrationTypes?:
    | Array<ClientGetApiClientRegistrationType>
    | undefined;
  /**
   * The human-readable name representing the organization that manages this client. This property corresponds
   *
   * @remarks
   * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
   *
   * @remarks
   * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * the entity ID of this client.
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
   *
   * @remarks
   * the mechanism defined in OpenID Connect Federation 1.0
   */
  trustAnchorId?: string | undefined;
  /**
   * The trust chain that was used when this client was registered or updated by the mechanism defined in
   *
   * @remarks
   * OpenID Connect Federation 1.0
   */
  trustChain?: Array<string> | undefined;
  /**
   * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
   *
   * @remarks
   * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
   */
  trustChainExpiresAt?: number | undefined;
  /**
   * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
   *
   * @remarks
   */
  trustChainUpdatedAt?: number | undefined;
  /**
   * The flag which indicates whether this client is locked.
   *
   * @remarks
   */
  locked?: boolean | undefined;
  /**
   * The URL of the credential offer endpoint at which this client
   *
   * @remarks
   * (wallet) receives a credential offer from the credential issuer.
   */
  credentialOfferEndpoint?: string | undefined;
  /**
   * The FAPI modes for this client.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests from this client
   * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
   * is supported by the service, and the FAPI modes for the service are set to `null`.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
   * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
   * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
   * the service, and the FAPI modes for the service are set to `null`.
   */
  fapiModes?: Array<ClientGetApiFapiMode> | undefined;
  /**
   * The response modes that this client may use.
   */
  responseModes?: Array<ClientGetApiResponseMode> | undefined;
  /**
   * True if credential responses to this client must be always encrypted.
   */
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const ClientGetApiRequest$inboundSchema: z.ZodType<
  ClientGetApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
});

/** @internal */
export type ClientGetApiRequest$Outbound = {
  serviceId: string;
  clientId: string;
};

/** @internal */
export const ClientGetApiRequest$outboundSchema: z.ZodType<
  ClientGetApiRequest$Outbound,
  z.ZodTypeDef,
  ClientGetApiRequest
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiRequest$ {
  /** @deprecated use `ClientGetApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiRequest$inboundSchema;
  /** @deprecated use `ClientGetApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiRequest$outboundSchema;
  /** @deprecated use `ClientGetApiRequest$Outbound` instead. */
  export type Outbound = ClientGetApiRequest$Outbound;
}

export function clientGetApiRequestToJSON(
  clientGetApiRequest: ClientGetApiRequest,
): string {
  return JSON.stringify(
    ClientGetApiRequest$outboundSchema.parse(clientGetApiRequest),
  );
}

export function clientGetApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientGetApiClientName$inboundSchema: z.ZodType<
  ClientGetApiClientName,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiClientName$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiClientName$outboundSchema: z.ZodType<
  ClientGetApiClientName$Outbound,
  z.ZodTypeDef,
  ClientGetApiClientName
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiClientName$ {
  /** @deprecated use `ClientGetApiClientName$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiClientName$inboundSchema;
  /** @deprecated use `ClientGetApiClientName$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiClientName$outboundSchema;
  /** @deprecated use `ClientGetApiClientName$Outbound` instead. */
  export type Outbound = ClientGetApiClientName$Outbound;
}

export function clientGetApiClientNameToJSON(
  clientGetApiClientName: ClientGetApiClientName,
): string {
  return JSON.stringify(
    ClientGetApiClientName$outboundSchema.parse(clientGetApiClientName),
  );
}

export function clientGetApiClientNameFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiClientName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiClientName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiClientName' from JSON`,
  );
}

/** @internal */
export const ClientGetApiDescription$inboundSchema: z.ZodType<
  ClientGetApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiDescription$outboundSchema: z.ZodType<
  ClientGetApiDescription$Outbound,
  z.ZodTypeDef,
  ClientGetApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiDescription$ {
  /** @deprecated use `ClientGetApiDescription$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiDescription$inboundSchema;
  /** @deprecated use `ClientGetApiDescription$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiDescription$outboundSchema;
  /** @deprecated use `ClientGetApiDescription$Outbound` instead. */
  export type Outbound = ClientGetApiDescription$Outbound;
}

export function clientGetApiDescriptionToJSON(
  clientGetApiDescription: ClientGetApiDescription,
): string {
  return JSON.stringify(
    ClientGetApiDescription$outboundSchema.parse(clientGetApiDescription),
  );
}

export function clientGetApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiDescription' from JSON`,
  );
}

/** @internal */
export const ClientGetApiClientType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiClientType
> = z.nativeEnum(ClientGetApiClientType);

/** @internal */
export const ClientGetApiClientType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiClientType
> = ClientGetApiClientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiClientType$ {
  /** @deprecated use `ClientGetApiClientType$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiClientType$inboundSchema;
  /** @deprecated use `ClientGetApiClientType$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiClientType$outboundSchema;
}

/** @internal */
export const ClientGetApiApplicationType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiApplicationType
> = z.nativeEnum(ClientGetApiApplicationType);

/** @internal */
export const ClientGetApiApplicationType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiApplicationType
> = ClientGetApiApplicationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiApplicationType$ {
  /** @deprecated use `ClientGetApiApplicationType$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiApplicationType$inboundSchema;
  /** @deprecated use `ClientGetApiApplicationType$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiApplicationType$outboundSchema;
}

/** @internal */
export const ClientGetApiLogoUris$inboundSchema: z.ZodType<
  ClientGetApiLogoUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiLogoUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiLogoUris$outboundSchema: z.ZodType<
  ClientGetApiLogoUris$Outbound,
  z.ZodTypeDef,
  ClientGetApiLogoUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiLogoUris$ {
  /** @deprecated use `ClientGetApiLogoUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiLogoUris$inboundSchema;
  /** @deprecated use `ClientGetApiLogoUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiLogoUris$outboundSchema;
  /** @deprecated use `ClientGetApiLogoUris$Outbound` instead. */
  export type Outbound = ClientGetApiLogoUris$Outbound;
}

export function clientGetApiLogoUrisToJSON(
  clientGetApiLogoUris: ClientGetApiLogoUris,
): string {
  return JSON.stringify(
    ClientGetApiLogoUris$outboundSchema.parse(clientGetApiLogoUris),
  );
}

export function clientGetApiLogoUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiLogoUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiLogoUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiLogoUris' from JSON`,
  );
}

/** @internal */
export const ClientGetApiGrantType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiGrantType
> = z.nativeEnum(ClientGetApiGrantType);

/** @internal */
export const ClientGetApiGrantType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiGrantType
> = ClientGetApiGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiGrantType$ {
  /** @deprecated use `ClientGetApiGrantType$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiGrantType$inboundSchema;
  /** @deprecated use `ClientGetApiGrantType$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiGrantType$outboundSchema;
}

/** @internal */
export const ClientGetApiResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiResponseType
> = z.nativeEnum(ClientGetApiResponseType);

/** @internal */
export const ClientGetApiResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiResponseType
> = ClientGetApiResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiResponseType$ {
  /** @deprecated use `ClientGetApiResponseType$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiResponseType$inboundSchema;
  /** @deprecated use `ClientGetApiResponseType$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiResponseType$outboundSchema;
}

/** @internal */
export const ClientGetApiAuthorizationSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiAuthorizationSignAlg
> = z.nativeEnum(ClientGetApiAuthorizationSignAlg);

/** @internal */
export const ClientGetApiAuthorizationSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiAuthorizationSignAlg
> = ClientGetApiAuthorizationSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiAuthorizationSignAlg$ {
  /** @deprecated use `ClientGetApiAuthorizationSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiAuthorizationSignAlg$inboundSchema;
  /** @deprecated use `ClientGetApiAuthorizationSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiAuthorizationSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiAuthorizationEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetApiAuthorizationEncryptionAlg> = z.nativeEnum(
    ClientGetApiAuthorizationEncryptionAlg,
  );

/** @internal */
export const ClientGetApiAuthorizationEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetApiAuthorizationEncryptionAlg> =
    ClientGetApiAuthorizationEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiAuthorizationEncryptionAlg$ {
  /** @deprecated use `ClientGetApiAuthorizationEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetApiAuthorizationEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetApiAuthorizationEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetApiAuthorizationEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiAuthorizationEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetApiAuthorizationEncryptionEnc> = z.nativeEnum(
    ClientGetApiAuthorizationEncryptionEnc,
  );

/** @internal */
export const ClientGetApiAuthorizationEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetApiAuthorizationEncryptionEnc> =
    ClientGetApiAuthorizationEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiAuthorizationEncryptionEnc$ {
  /** @deprecated use `ClientGetApiAuthorizationEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetApiAuthorizationEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetApiAuthorizationEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetApiAuthorizationEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetApiTokenAuthMethod$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiTokenAuthMethod
> = z.nativeEnum(ClientGetApiTokenAuthMethod);

/** @internal */
export const ClientGetApiTokenAuthMethod$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiTokenAuthMethod
> = ClientGetApiTokenAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiTokenAuthMethod$ {
  /** @deprecated use `ClientGetApiTokenAuthMethod$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiTokenAuthMethod$inboundSchema;
  /** @deprecated use `ClientGetApiTokenAuthMethod$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiTokenAuthMethod$outboundSchema;
}

/** @internal */
export const ClientGetApiTokenAuthSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiTokenAuthSignAlg
> = z.nativeEnum(ClientGetApiTokenAuthSignAlg);

/** @internal */
export const ClientGetApiTokenAuthSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiTokenAuthSignAlg
> = ClientGetApiTokenAuthSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiTokenAuthSignAlg$ {
  /** @deprecated use `ClientGetApiTokenAuthSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiTokenAuthSignAlg$inboundSchema;
  /** @deprecated use `ClientGetApiTokenAuthSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiTokenAuthSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiRequestSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiRequestSignAlg
> = z.nativeEnum(ClientGetApiRequestSignAlg);

/** @internal */
export const ClientGetApiRequestSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiRequestSignAlg
> = ClientGetApiRequestSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiRequestSignAlg$ {
  /** @deprecated use `ClientGetApiRequestSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiRequestSignAlg$inboundSchema;
  /** @deprecated use `ClientGetApiRequestSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiRequestSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiRequestEncryptionAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiRequestEncryptionAlg
> = z.nativeEnum(ClientGetApiRequestEncryptionAlg);

/** @internal */
export const ClientGetApiRequestEncryptionAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiRequestEncryptionAlg
> = ClientGetApiRequestEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiRequestEncryptionAlg$ {
  /** @deprecated use `ClientGetApiRequestEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiRequestEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetApiRequestEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiRequestEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiRequestEncryptionEnc$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiRequestEncryptionEnc
> = z.nativeEnum(ClientGetApiRequestEncryptionEnc);

/** @internal */
export const ClientGetApiRequestEncryptionEnc$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiRequestEncryptionEnc
> = ClientGetApiRequestEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiRequestEncryptionEnc$ {
  /** @deprecated use `ClientGetApiRequestEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiRequestEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetApiRequestEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiRequestEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetApiIdTokenSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiIdTokenSignAlg
> = z.nativeEnum(ClientGetApiIdTokenSignAlg);

/** @internal */
export const ClientGetApiIdTokenSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiIdTokenSignAlg
> = ClientGetApiIdTokenSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiIdTokenSignAlg$ {
  /** @deprecated use `ClientGetApiIdTokenSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiIdTokenSignAlg$inboundSchema;
  /** @deprecated use `ClientGetApiIdTokenSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiIdTokenSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiIdTokenEncryptionAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiIdTokenEncryptionAlg
> = z.nativeEnum(ClientGetApiIdTokenEncryptionAlg);

/** @internal */
export const ClientGetApiIdTokenEncryptionAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiIdTokenEncryptionAlg
> = ClientGetApiIdTokenEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiIdTokenEncryptionAlg$ {
  /** @deprecated use `ClientGetApiIdTokenEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiIdTokenEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetApiIdTokenEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiIdTokenEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiIdTokenEncryptionEnc$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiIdTokenEncryptionEnc
> = z.nativeEnum(ClientGetApiIdTokenEncryptionEnc);

/** @internal */
export const ClientGetApiIdTokenEncryptionEnc$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiIdTokenEncryptionEnc
> = ClientGetApiIdTokenEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiIdTokenEncryptionEnc$ {
  /** @deprecated use `ClientGetApiIdTokenEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiIdTokenEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetApiIdTokenEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiIdTokenEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetApiSubjectType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiSubjectType
> = z.nativeEnum(ClientGetApiSubjectType);

/** @internal */
export const ClientGetApiSubjectType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiSubjectType
> = ClientGetApiSubjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiSubjectType$ {
  /** @deprecated use `ClientGetApiSubjectType$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiSubjectType$inboundSchema;
  /** @deprecated use `ClientGetApiSubjectType$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiSubjectType$outboundSchema;
}

/** @internal */
export const ClientGetApiUserInfoSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiUserInfoSignAlg
> = z.nativeEnum(ClientGetApiUserInfoSignAlg);

/** @internal */
export const ClientGetApiUserInfoSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiUserInfoSignAlg
> = ClientGetApiUserInfoSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiUserInfoSignAlg$ {
  /** @deprecated use `ClientGetApiUserInfoSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiUserInfoSignAlg$inboundSchema;
  /** @deprecated use `ClientGetApiUserInfoSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiUserInfoSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiUserInfoEncryptionAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiUserInfoEncryptionAlg
> = z.nativeEnum(ClientGetApiUserInfoEncryptionAlg);

/** @internal */
export const ClientGetApiUserInfoEncryptionAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiUserInfoEncryptionAlg
> = ClientGetApiUserInfoEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiUserInfoEncryptionAlg$ {
  /** @deprecated use `ClientGetApiUserInfoEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiUserInfoEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetApiUserInfoEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetApiUserInfoEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiUserInfoEncryptionEnc$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiUserInfoEncryptionEnc
> = z.nativeEnum(ClientGetApiUserInfoEncryptionEnc);

/** @internal */
export const ClientGetApiUserInfoEncryptionEnc$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiUserInfoEncryptionEnc
> = ClientGetApiUserInfoEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiUserInfoEncryptionEnc$ {
  /** @deprecated use `ClientGetApiUserInfoEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiUserInfoEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetApiUserInfoEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetApiUserInfoEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetApiTosUris$inboundSchema: z.ZodType<
  ClientGetApiTosUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiTosUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiTosUris$outboundSchema: z.ZodType<
  ClientGetApiTosUris$Outbound,
  z.ZodTypeDef,
  ClientGetApiTosUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiTosUris$ {
  /** @deprecated use `ClientGetApiTosUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiTosUris$inboundSchema;
  /** @deprecated use `ClientGetApiTosUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiTosUris$outboundSchema;
  /** @deprecated use `ClientGetApiTosUris$Outbound` instead. */
  export type Outbound = ClientGetApiTosUris$Outbound;
}

export function clientGetApiTosUrisToJSON(
  clientGetApiTosUris: ClientGetApiTosUris,
): string {
  return JSON.stringify(
    ClientGetApiTosUris$outboundSchema.parse(clientGetApiTosUris),
  );
}

export function clientGetApiTosUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiTosUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiTosUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiTosUris' from JSON`,
  );
}

/** @internal */
export const ClientGetApiPolicyUris$inboundSchema: z.ZodType<
  ClientGetApiPolicyUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiPolicyUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiPolicyUris$outboundSchema: z.ZodType<
  ClientGetApiPolicyUris$Outbound,
  z.ZodTypeDef,
  ClientGetApiPolicyUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiPolicyUris$ {
  /** @deprecated use `ClientGetApiPolicyUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiPolicyUris$inboundSchema;
  /** @deprecated use `ClientGetApiPolicyUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiPolicyUris$outboundSchema;
  /** @deprecated use `ClientGetApiPolicyUris$Outbound` instead. */
  export type Outbound = ClientGetApiPolicyUris$Outbound;
}

export function clientGetApiPolicyUrisToJSON(
  clientGetApiPolicyUris: ClientGetApiPolicyUris,
): string {
  return JSON.stringify(
    ClientGetApiPolicyUris$outboundSchema.parse(clientGetApiPolicyUris),
  );
}

export function clientGetApiPolicyUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiPolicyUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiPolicyUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiPolicyUris' from JSON`,
  );
}

/** @internal */
export const ClientGetApiClientUris$inboundSchema: z.ZodType<
  ClientGetApiClientUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiClientUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiClientUris$outboundSchema: z.ZodType<
  ClientGetApiClientUris$Outbound,
  z.ZodTypeDef,
  ClientGetApiClientUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiClientUris$ {
  /** @deprecated use `ClientGetApiClientUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiClientUris$inboundSchema;
  /** @deprecated use `ClientGetApiClientUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiClientUris$outboundSchema;
  /** @deprecated use `ClientGetApiClientUris$Outbound` instead. */
  export type Outbound = ClientGetApiClientUris$Outbound;
}

export function clientGetApiClientUrisToJSON(
  clientGetApiClientUris: ClientGetApiClientUris,
): string {
  return JSON.stringify(
    ClientGetApiClientUris$outboundSchema.parse(clientGetApiClientUris),
  );
}

export function clientGetApiClientUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiClientUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiClientUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiClientUris' from JSON`,
  );
}

/** @internal */
export const ClientGetApiBcRequestSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiBcRequestSignAlg
> = z.nativeEnum(ClientGetApiBcRequestSignAlg);

/** @internal */
export const ClientGetApiBcRequestSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiBcRequestSignAlg
> = ClientGetApiBcRequestSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiBcRequestSignAlg$ {
  /** @deprecated use `ClientGetApiBcRequestSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiBcRequestSignAlg$inboundSchema;
  /** @deprecated use `ClientGetApiBcRequestSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiBcRequestSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetApiAttribute$inboundSchema: z.ZodType<
  ClientGetApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetApiAttribute$outboundSchema: z.ZodType<
  ClientGetApiAttribute$Outbound,
  z.ZodTypeDef,
  ClientGetApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiAttribute$ {
  /** @deprecated use `ClientGetApiAttribute$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiAttribute$inboundSchema;
  /** @deprecated use `ClientGetApiAttribute$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiAttribute$outboundSchema;
  /** @deprecated use `ClientGetApiAttribute$Outbound` instead. */
  export type Outbound = ClientGetApiAttribute$Outbound;
}

export function clientGetApiAttributeToJSON(
  clientGetApiAttribute: ClientGetApiAttribute,
): string {
  return JSON.stringify(
    ClientGetApiAttribute$outboundSchema.parse(clientGetApiAttribute),
  );
}

export function clientGetApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiAttribute' from JSON`,
  );
}

/** @internal */
export const ClientGetApiExtension$inboundSchema: z.ZodType<
  ClientGetApiExtension,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/** @internal */
export type ClientGetApiExtension$Outbound = {
  requestableScopes?: Array<string> | undefined;
  requestableScopesEnabled?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  tokenExchangePermitted?: boolean | undefined;
};

/** @internal */
export const ClientGetApiExtension$outboundSchema: z.ZodType<
  ClientGetApiExtension$Outbound,
  z.ZodTypeDef,
  ClientGetApiExtension
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiExtension$ {
  /** @deprecated use `ClientGetApiExtension$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiExtension$inboundSchema;
  /** @deprecated use `ClientGetApiExtension$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiExtension$outboundSchema;
  /** @deprecated use `ClientGetApiExtension$Outbound` instead. */
  export type Outbound = ClientGetApiExtension$Outbound;
}

export function clientGetApiExtensionToJSON(
  clientGetApiExtension: ClientGetApiExtension,
): string {
  return JSON.stringify(
    ClientGetApiExtension$outboundSchema.parse(clientGetApiExtension),
  );
}

export function clientGetApiExtensionFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiExtension, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiExtension$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiExtension' from JSON`,
  );
}

/** @internal */
export const ClientGetApiClientRegistrationType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiClientRegistrationType
> = z.nativeEnum(ClientGetApiClientRegistrationType);

/** @internal */
export const ClientGetApiClientRegistrationType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiClientRegistrationType
> = ClientGetApiClientRegistrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiClientRegistrationType$ {
  /** @deprecated use `ClientGetApiClientRegistrationType$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiClientRegistrationType$inboundSchema;
  /** @deprecated use `ClientGetApiClientRegistrationType$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetApiClientRegistrationType$outboundSchema;
}

/** @internal */
export const ClientGetApiFapiMode$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiFapiMode
> = z.nativeEnum(ClientGetApiFapiMode);

/** @internal */
export const ClientGetApiFapiMode$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiFapiMode
> = ClientGetApiFapiMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiFapiMode$ {
  /** @deprecated use `ClientGetApiFapiMode$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiFapiMode$inboundSchema;
  /** @deprecated use `ClientGetApiFapiMode$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiFapiMode$outboundSchema;
}

/** @internal */
export const ClientGetApiResponseMode$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiResponseMode
> = z.nativeEnum(ClientGetApiResponseMode);

/** @internal */
export const ClientGetApiResponseMode$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetApiResponseMode
> = ClientGetApiResponseMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiResponseMode$ {
  /** @deprecated use `ClientGetApiResponseMode$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiResponseMode$inboundSchema;
  /** @deprecated use `ClientGetApiResponseMode$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiResponseMode$outboundSchema;
}

/** @internal */
export const ClientGetApiResponse$inboundSchema: z.ZodType<
  ClientGetApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(z.lazy(() => ClientGetApiClientName$inboundSchema))
    .optional(),
  description: z.string().optional(),
  descriptions: z.array(z.lazy(() => ClientGetApiDescription$inboundSchema))
    .optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientGetApiClientType$inboundSchema.optional(),
  applicationType: ClientGetApiApplicationType$inboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientGetApiLogoUris$inboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(ClientGetApiGrantType$inboundSchema).optional(),
  responseTypes: z.array(ClientGetApiResponseType$inboundSchema).optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg: ClientGetApiAuthorizationSignAlg$inboundSchema
    .optional(),
  authorizationEncryptionAlg:
    ClientGetApiAuthorizationEncryptionAlg$inboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientGetApiAuthorizationEncryptionEnc$inboundSchema.optional(),
  tokenAuthMethod: ClientGetApiTokenAuthMethod$inboundSchema.optional(),
  tokenAuthSignAlg: ClientGetApiTokenAuthSignAlg$inboundSchema.optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientGetApiRequestSignAlg$inboundSchema.optional(),
  requestEncryptionAlg: ClientGetApiRequestEncryptionAlg$inboundSchema
    .optional(),
  requestEncryptionEnc: ClientGetApiRequestEncryptionEnc$inboundSchema
    .optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientGetApiIdTokenSignAlg$inboundSchema.optional(),
  idTokenEncryptionAlg: ClientGetApiIdTokenEncryptionAlg$inboundSchema
    .optional(),
  idTokenEncryptionEnc: ClientGetApiIdTokenEncryptionEnc$inboundSchema
    .optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientGetApiSubjectType$inboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientGetApiUserInfoSignAlg$inboundSchema.optional(),
  userInfoEncryptionAlg: ClientGetApiUserInfoEncryptionAlg$inboundSchema
    .optional(),
  userInfoEncryptionEnc: ClientGetApiUserInfoEncryptionEnc$inboundSchema
    .optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientGetApiTosUris$inboundSchema)).optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(z.lazy(() => ClientGetApiPolicyUris$inboundSchema))
    .optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(z.lazy(() => ClientGetApiClientUris$inboundSchema))
    .optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientGetApiBcRequestSignAlg$inboundSchema.optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(z.lazy(() => ClientGetApiAttribute$inboundSchema))
    .optional(),
  extension: z.lazy(() => ClientGetApiExtension$inboundSchema).optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientGetApiClientRegistrationType$inboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientGetApiFapiMode$inboundSchema).optional(),
  responseModes: z.array(ClientGetApiResponseMode$inboundSchema).optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/** @internal */
export type ClientGetApiResponse$Outbound = {
  number?: number | undefined;
  serviceNumber?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<ClientGetApiClientName$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<ClientGetApiDescription$Outbound> | undefined;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  applicationType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<ClientGetApiLogoUris$Outbound> | undefined;
  contacts?: Array<string> | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  dynamicallyRegistered?: boolean | undefined;
  softwareId?: string | undefined;
  softwareVersion?: string | undefined;
  registrationAccessTokenHash?: string | undefined;
  createdAt?: number | undefined;
  modifiedAt?: number | undefined;
  grantTypes?: Array<string> | undefined;
  responseTypes?: Array<string> | undefined;
  redirectUris?: Array<string> | undefined;
  authorizationSignAlg?: string | undefined;
  authorizationEncryptionAlg?: string | undefined;
  authorizationEncryptionEnc?: string | undefined;
  tokenAuthMethod?: string | undefined;
  tokenAuthSignAlg?: string | undefined;
  selfSignedCertificateKeyId?: string | undefined;
  tlsClientAuthSubjectDn?: string | undefined;
  tlsClientAuthSanDns?: string | undefined;
  tlsClientAuthSanUri?: string | undefined;
  tlsClientAuthSanIp?: string | undefined;
  tlsClientAuthSanEmail?: string | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  requestSignAlg?: string | undefined;
  requestEncryptionAlg?: string | undefined;
  requestEncryptionEnc?: string | undefined;
  requestUris?: Array<string> | undefined;
  defaultMaxAge?: number | undefined;
  defaultAcrs?: Array<string> | undefined;
  idTokenSignAlg?: string | undefined;
  idTokenEncryptionAlg?: string | undefined;
  idTokenEncryptionEnc?: string | undefined;
  authTimeRequired?: boolean | undefined;
  subjectType?: string | undefined;
  sectorIdentifierUri?: string | undefined;
  derivedSectorIdentifier?: string | undefined;
  jwksUri?: string | undefined;
  jwks?: string | undefined;
  userInfoSignAlg?: string | undefined;
  userInfoEncryptionAlg?: string | undefined;
  userInfoEncryptionEnc?: string | undefined;
  loginUri?: string | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<ClientGetApiTosUris$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?: Array<ClientGetApiPolicyUris$Outbound> | undefined;
  clientUri?: string | undefined;
  clientUris?: Array<ClientGetApiClientUris$Outbound> | undefined;
  bcDeliveryMode?: string | undefined;
  bcNotificationEndpoint?: string | undefined;
  bcRequestSignAlg?: string | undefined;
  bcUserCodeRequired?: boolean | undefined;
  attributes?: Array<ClientGetApiAttribute$Outbound> | undefined;
  extension?: ClientGetApiExtension$Outbound | undefined;
  authorizationDetailsTypes?: Array<string> | undefined;
  customMetadata?: string | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  digestAlgorithm?: string | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  dpopRequired?: boolean | undefined;
  automaticallyRegistered?: boolean | undefined;
  explicitlyRegistered?: boolean | undefined;
  rsRequestSigned?: boolean | undefined;
  rsSignedRequestKeyId?: string | undefined;
  clientRegistrationTypes?: Array<string> | undefined;
  organizationName?: string | undefined;
  signedJwksUri?: string | undefined;
  entityId?: string | undefined;
  trustAnchorId?: string | undefined;
  trustChain?: Array<string> | undefined;
  trustChainExpiresAt?: number | undefined;
  trustChainUpdatedAt?: number | undefined;
  locked?: boolean | undefined;
  credentialOfferEndpoint?: string | undefined;
  fapiModes?: Array<string> | undefined;
  responseModes?: Array<string> | undefined;
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const ClientGetApiResponse$outboundSchema: z.ZodType<
  ClientGetApiResponse$Outbound,
  z.ZodTypeDef,
  ClientGetApiResponse
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(z.lazy(() => ClientGetApiClientName$outboundSchema))
    .optional(),
  description: z.string().optional(),
  descriptions: z.array(z.lazy(() => ClientGetApiDescription$outboundSchema))
    .optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientGetApiClientType$outboundSchema.optional(),
  applicationType: ClientGetApiApplicationType$outboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientGetApiLogoUris$outboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(ClientGetApiGrantType$outboundSchema).optional(),
  responseTypes: z.array(ClientGetApiResponseType$outboundSchema).optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg: ClientGetApiAuthorizationSignAlg$outboundSchema
    .optional(),
  authorizationEncryptionAlg:
    ClientGetApiAuthorizationEncryptionAlg$outboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientGetApiAuthorizationEncryptionEnc$outboundSchema.optional(),
  tokenAuthMethod: ClientGetApiTokenAuthMethod$outboundSchema.optional(),
  tokenAuthSignAlg: ClientGetApiTokenAuthSignAlg$outboundSchema.optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientGetApiRequestSignAlg$outboundSchema.optional(),
  requestEncryptionAlg: ClientGetApiRequestEncryptionAlg$outboundSchema
    .optional(),
  requestEncryptionEnc: ClientGetApiRequestEncryptionEnc$outboundSchema
    .optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientGetApiIdTokenSignAlg$outboundSchema.optional(),
  idTokenEncryptionAlg: ClientGetApiIdTokenEncryptionAlg$outboundSchema
    .optional(),
  idTokenEncryptionEnc: ClientGetApiIdTokenEncryptionEnc$outboundSchema
    .optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientGetApiSubjectType$outboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientGetApiUserInfoSignAlg$outboundSchema.optional(),
  userInfoEncryptionAlg: ClientGetApiUserInfoEncryptionAlg$outboundSchema
    .optional(),
  userInfoEncryptionEnc: ClientGetApiUserInfoEncryptionEnc$outboundSchema
    .optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientGetApiTosUris$outboundSchema)).optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(z.lazy(() => ClientGetApiPolicyUris$outboundSchema))
    .optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(z.lazy(() => ClientGetApiClientUris$outboundSchema))
    .optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientGetApiBcRequestSignAlg$outboundSchema.optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(z.lazy(() => ClientGetApiAttribute$outboundSchema))
    .optional(),
  extension: z.lazy(() => ClientGetApiExtension$outboundSchema).optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientGetApiClientRegistrationType$outboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientGetApiFapiMode$outboundSchema).optional(),
  responseModes: z.array(ClientGetApiResponseMode$outboundSchema).optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiResponse$ {
  /** @deprecated use `ClientGetApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiResponse$inboundSchema;
  /** @deprecated use `ClientGetApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiResponse$outboundSchema;
  /** @deprecated use `ClientGetApiResponse$Outbound` instead. */
  export type Outbound = ClientGetApiResponse$Outbound;
}

export function clientGetApiResponseToJSON(
  clientGetApiResponse: ClientGetApiResponse,
): string {
  return JSON.stringify(
    ClientGetApiResponse$outboundSchema.parse(clientGetApiResponse),
  );
}

export function clientGetApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetApiResponse' from JSON`,
  );
}
