/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeviceVerificationApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type DeviceVerificationApiRequestBody = {
  /**
   * A user code.
   *
   * @remarks
   */
  userCode: string;
};

export type DeviceVerificationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: DeviceVerificationApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const DeviceVerificationApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  NotExist: "NOT_EXIST",
  Expired: "EXPIRED",
  Valid: "VALID",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type DeviceVerificationApiAction = ClosedEnum<
  typeof DeviceVerificationApiAction
>;

export type DeviceVerificationApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<DeviceVerificationApiDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<DeviceVerificationApiAttribute> | undefined;
};

export type DeviceVerificationApiElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceVerificationApiAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceVerificationApiElement> | undefined;
};

export type DeviceVerificationApiServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceVerificationApiDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const DeviceVerificationApiGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type DeviceVerificationApiGmAction = ClosedEnum<
  typeof DeviceVerificationApiGmAction
>;

export type DeviceVerificationApiGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type DeviceVerificationApiGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceVerificationApiGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceVerificationApiGrantElement> | undefined;
};

export type DeviceVerificationApiGrant = {
  scopes?: Array<DeviceVerificationApiGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | DeviceVerificationApiGrantAuthorizationDetails
    | undefined;
};

export type DeviceVerificationApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: DeviceVerificationApiAction | undefined;
  /**
   * The client ID of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the `client_id` request parameter included in the device authorization
   *
   * @remarks
   * request is the client ID alias. `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The scopes requested by the device authorization request.
   *
   * @remarks
   *
   * Note that `description` property and `descriptions` property of each scope object in
   * the array contained in this property is always null even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<DeviceVerificationApiScope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   *
   * This property is always `null` if the `scope` request parameter of the device authorization
   * request does not include the `openid` scope even if special scopes (such as `profile`)
   * are included in the request (unless the openid scope is included in the default set
   * of scopes which is used when the `scope` request parameter is omitted).
   */
  claimNames?: Array<string> | undefined;
  /**
   * The list of ACR values requested by the device authorization request.
   *
   * @remarks
   */
  acrs?: Array<string> | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: DeviceVerificationApiAuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<DeviceVerificationApiServiceAttribute> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<DeviceVerificationApiClientAttribute> | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<DeviceVerificationApiDynamicScope> | undefined;
  /**
   * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
   *
   * @remarks
   */
  expiresAt?: number | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: DeviceVerificationApiGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: DeviceVerificationApiGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceVerificationApiRequestBody$inboundSchema: z.ZodType<
  DeviceVerificationApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  userCode: z.string(),
});

/** @internal */
export type DeviceVerificationApiRequestBody$Outbound = {
  userCode: string;
};

/** @internal */
export const DeviceVerificationApiRequestBody$outboundSchema: z.ZodType<
  DeviceVerificationApiRequestBody$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiRequestBody
> = z.object({
  userCode: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiRequestBody$ {
  /** @deprecated use `DeviceVerificationApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiRequestBody$inboundSchema;
  /** @deprecated use `DeviceVerificationApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiRequestBody$outboundSchema;
  /** @deprecated use `DeviceVerificationApiRequestBody$Outbound` instead. */
  export type Outbound = DeviceVerificationApiRequestBody$Outbound;
}

export function deviceVerificationApiRequestBodyToJSON(
  deviceVerificationApiRequestBody: DeviceVerificationApiRequestBody,
): string {
  return JSON.stringify(
    DeviceVerificationApiRequestBody$outboundSchema.parse(
      deviceVerificationApiRequestBody,
    ),
  );
}

export function deviceVerificationApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiRequestBody' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiRequest$inboundSchema: z.ZodType<
  DeviceVerificationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => DeviceVerificationApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeviceVerificationApiRequest$Outbound = {
  serviceId: string;
  RequestBody: DeviceVerificationApiRequestBody$Outbound;
};

/** @internal */
export const DeviceVerificationApiRequest$outboundSchema: z.ZodType<
  DeviceVerificationApiRequest$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => DeviceVerificationApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiRequest$ {
  /** @deprecated use `DeviceVerificationApiRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiRequest$inboundSchema;
  /** @deprecated use `DeviceVerificationApiRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiRequest$outboundSchema;
  /** @deprecated use `DeviceVerificationApiRequest$Outbound` instead. */
  export type Outbound = DeviceVerificationApiRequest$Outbound;
}

export function deviceVerificationApiRequestToJSON(
  deviceVerificationApiRequest: DeviceVerificationApiRequest,
): string {
  return JSON.stringify(
    DeviceVerificationApiRequest$outboundSchema.parse(
      deviceVerificationApiRequest,
    ),
  );
}

export function deviceVerificationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiRequest' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiAction
> = z.nativeEnum(DeviceVerificationApiAction);

/** @internal */
export const DeviceVerificationApiAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiAction
> = DeviceVerificationApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiAction$ {
  /** @deprecated use `DeviceVerificationApiAction$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiAction$inboundSchema;
  /** @deprecated use `DeviceVerificationApiAction$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiAction$outboundSchema;
}

/** @internal */
export const DeviceVerificationApiDescription$inboundSchema: z.ZodType<
  DeviceVerificationApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiDescription$outboundSchema: z.ZodType<
  DeviceVerificationApiDescription$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiDescription$ {
  /** @deprecated use `DeviceVerificationApiDescription$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiDescription$inboundSchema;
  /** @deprecated use `DeviceVerificationApiDescription$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiDescription$outboundSchema;
  /** @deprecated use `DeviceVerificationApiDescription$Outbound` instead. */
  export type Outbound = DeviceVerificationApiDescription$Outbound;
}

export function deviceVerificationApiDescriptionToJSON(
  deviceVerificationApiDescription: DeviceVerificationApiDescription,
): string {
  return JSON.stringify(
    DeviceVerificationApiDescription$outboundSchema.parse(
      deviceVerificationApiDescription,
    ),
  );
}

export function deviceVerificationApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiDescription' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiAttribute$inboundSchema: z.ZodType<
  DeviceVerificationApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiAttribute$outboundSchema: z.ZodType<
  DeviceVerificationApiAttribute$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiAttribute$ {
  /** @deprecated use `DeviceVerificationApiAttribute$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiAttribute$inboundSchema;
  /** @deprecated use `DeviceVerificationApiAttribute$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiAttribute$outboundSchema;
  /** @deprecated use `DeviceVerificationApiAttribute$Outbound` instead. */
  export type Outbound = DeviceVerificationApiAttribute$Outbound;
}

export function deviceVerificationApiAttributeToJSON(
  deviceVerificationApiAttribute: DeviceVerificationApiAttribute,
): string {
  return JSON.stringify(
    DeviceVerificationApiAttribute$outboundSchema.parse(
      deviceVerificationApiAttribute,
    ),
  );
}

export function deviceVerificationApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiScope$inboundSchema: z.ZodType<
  DeviceVerificationApiScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceVerificationApiDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceVerificationApiAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type DeviceVerificationApiScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?: Array<DeviceVerificationApiDescription$Outbound> | undefined;
  attributes?: Array<DeviceVerificationApiAttribute$Outbound> | undefined;
};

/** @internal */
export const DeviceVerificationApiScope$outboundSchema: z.ZodType<
  DeviceVerificationApiScope$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceVerificationApiDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceVerificationApiAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiScope$ {
  /** @deprecated use `DeviceVerificationApiScope$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiScope$inboundSchema;
  /** @deprecated use `DeviceVerificationApiScope$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiScope$outboundSchema;
  /** @deprecated use `DeviceVerificationApiScope$Outbound` instead. */
  export type Outbound = DeviceVerificationApiScope$Outbound;
}

export function deviceVerificationApiScopeToJSON(
  deviceVerificationApiScope: DeviceVerificationApiScope,
): string {
  return JSON.stringify(
    DeviceVerificationApiScope$outboundSchema.parse(deviceVerificationApiScope),
  );
}

export function deviceVerificationApiScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiScope' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiElement$inboundSchema: z.ZodType<
  DeviceVerificationApiElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiElement$outboundSchema: z.ZodType<
  DeviceVerificationApiElement$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiElement$ {
  /** @deprecated use `DeviceVerificationApiElement$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiElement$inboundSchema;
  /** @deprecated use `DeviceVerificationApiElement$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiElement$outboundSchema;
  /** @deprecated use `DeviceVerificationApiElement$Outbound` instead. */
  export type Outbound = DeviceVerificationApiElement$Outbound;
}

export function deviceVerificationApiElementToJSON(
  deviceVerificationApiElement: DeviceVerificationApiElement,
): string {
  return JSON.stringify(
    DeviceVerificationApiElement$outboundSchema.parse(
      deviceVerificationApiElement,
    ),
  );
}

export function deviceVerificationApiElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiElement' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiAuthorizationDetails$inboundSchema: z.ZodType<
  DeviceVerificationApiAuthorizationDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  elements: z.array(z.lazy(() => DeviceVerificationApiElement$inboundSchema))
    .optional(),
});

/** @internal */
export type DeviceVerificationApiAuthorizationDetails$Outbound = {
  elements?: Array<DeviceVerificationApiElement$Outbound> | undefined;
};

/** @internal */
export const DeviceVerificationApiAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceVerificationApiAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiAuthorizationDetails
  > = z.object({
    elements: z.array(z.lazy(() => DeviceVerificationApiElement$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiAuthorizationDetails$ {
  /** @deprecated use `DeviceVerificationApiAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceVerificationApiAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceVerificationApiAuthorizationDetails$Outbound` instead. */
  export type Outbound = DeviceVerificationApiAuthorizationDetails$Outbound;
}

export function deviceVerificationApiAuthorizationDetailsToJSON(
  deviceVerificationApiAuthorizationDetails:
    DeviceVerificationApiAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceVerificationApiAuthorizationDetails$outboundSchema.parse(
      deviceVerificationApiAuthorizationDetails,
    ),
  );
}

export function deviceVerificationApiAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceVerificationApiAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceVerificationApiAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiServiceAttribute$inboundSchema: z.ZodType<
  DeviceVerificationApiServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiServiceAttribute$outboundSchema: z.ZodType<
  DeviceVerificationApiServiceAttribute$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiServiceAttribute$ {
  /** @deprecated use `DeviceVerificationApiServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiServiceAttribute$inboundSchema;
  /** @deprecated use `DeviceVerificationApiServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiServiceAttribute$outboundSchema;
  /** @deprecated use `DeviceVerificationApiServiceAttribute$Outbound` instead. */
  export type Outbound = DeviceVerificationApiServiceAttribute$Outbound;
}

export function deviceVerificationApiServiceAttributeToJSON(
  deviceVerificationApiServiceAttribute: DeviceVerificationApiServiceAttribute,
): string {
  return JSON.stringify(
    DeviceVerificationApiServiceAttribute$outboundSchema.parse(
      deviceVerificationApiServiceAttribute,
    ),
  );
}

export function deviceVerificationApiServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiServiceAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiServiceAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiServiceAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiClientAttribute$inboundSchema: z.ZodType<
  DeviceVerificationApiClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiClientAttribute$outboundSchema: z.ZodType<
  DeviceVerificationApiClientAttribute$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiClientAttribute$ {
  /** @deprecated use `DeviceVerificationApiClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiClientAttribute$inboundSchema;
  /** @deprecated use `DeviceVerificationApiClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiClientAttribute$outboundSchema;
  /** @deprecated use `DeviceVerificationApiClientAttribute$Outbound` instead. */
  export type Outbound = DeviceVerificationApiClientAttribute$Outbound;
}

export function deviceVerificationApiClientAttributeToJSON(
  deviceVerificationApiClientAttribute: DeviceVerificationApiClientAttribute,
): string {
  return JSON.stringify(
    DeviceVerificationApiClientAttribute$outboundSchema.parse(
      deviceVerificationApiClientAttribute,
    ),
  );
}

export function deviceVerificationApiClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiClientAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiClientAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiClientAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiDynamicScope$inboundSchema: z.ZodType<
  DeviceVerificationApiDynamicScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiDynamicScope$outboundSchema: z.ZodType<
  DeviceVerificationApiDynamicScope$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiDynamicScope
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiDynamicScope$ {
  /** @deprecated use `DeviceVerificationApiDynamicScope$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiDynamicScope$inboundSchema;
  /** @deprecated use `DeviceVerificationApiDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiDynamicScope$outboundSchema;
  /** @deprecated use `DeviceVerificationApiDynamicScope$Outbound` instead. */
  export type Outbound = DeviceVerificationApiDynamicScope$Outbound;
}

export function deviceVerificationApiDynamicScopeToJSON(
  deviceVerificationApiDynamicScope: DeviceVerificationApiDynamicScope,
): string {
  return JSON.stringify(
    DeviceVerificationApiDynamicScope$outboundSchema.parse(
      deviceVerificationApiDynamicScope,
    ),
  );
}

export function deviceVerificationApiDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiDynamicScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiDynamicScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiDynamicScope' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiGmAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiGmAction
> = z.nativeEnum(DeviceVerificationApiGmAction);

/** @internal */
export const DeviceVerificationApiGmAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationApiGmAction
> = DeviceVerificationApiGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiGmAction$ {
  /** @deprecated use `DeviceVerificationApiGmAction$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiGmAction$inboundSchema;
  /** @deprecated use `DeviceVerificationApiGmAction$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiGmAction$outboundSchema;
}

/** @internal */
export const DeviceVerificationApiGrantScope$inboundSchema: z.ZodType<
  DeviceVerificationApiGrantScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type DeviceVerificationApiGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const DeviceVerificationApiGrantScope$outboundSchema: z.ZodType<
  DeviceVerificationApiGrantScope$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiGrantScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiGrantScope$ {
  /** @deprecated use `DeviceVerificationApiGrantScope$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiGrantScope$inboundSchema;
  /** @deprecated use `DeviceVerificationApiGrantScope$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiGrantScope$outboundSchema;
  /** @deprecated use `DeviceVerificationApiGrantScope$Outbound` instead. */
  export type Outbound = DeviceVerificationApiGrantScope$Outbound;
}

export function deviceVerificationApiGrantScopeToJSON(
  deviceVerificationApiGrantScope: DeviceVerificationApiGrantScope,
): string {
  return JSON.stringify(
    DeviceVerificationApiGrantScope$outboundSchema.parse(
      deviceVerificationApiGrantScope,
    ),
  );
}

export function deviceVerificationApiGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiGrantScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiGrantScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiGrantScope' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiGrantElement$inboundSchema: z.ZodType<
  DeviceVerificationApiGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceVerificationApiGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiGrantElement$outboundSchema: z.ZodType<
  DeviceVerificationApiGrantElement$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiGrantElement$ {
  /** @deprecated use `DeviceVerificationApiGrantElement$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiGrantElement$inboundSchema;
  /** @deprecated use `DeviceVerificationApiGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiGrantElement$outboundSchema;
  /** @deprecated use `DeviceVerificationApiGrantElement$Outbound` instead. */
  export type Outbound = DeviceVerificationApiGrantElement$Outbound;
}

export function deviceVerificationApiGrantElementToJSON(
  deviceVerificationApiGrantElement: DeviceVerificationApiGrantElement,
): string {
  return JSON.stringify(
    DeviceVerificationApiGrantElement$outboundSchema.parse(
      deviceVerificationApiGrantElement,
    ),
  );
}

export function deviceVerificationApiGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiGrantElement' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    DeviceVerificationApiGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceVerificationApiGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DeviceVerificationApiGrantAuthorizationDetails$Outbound = {
  elements?: Array<DeviceVerificationApiGrantElement$Outbound> | undefined;
};

/** @internal */
export const DeviceVerificationApiGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceVerificationApiGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceVerificationApiGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiGrantAuthorizationDetails$ {
  /** @deprecated use `DeviceVerificationApiGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceVerificationApiGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceVerificationApiGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    DeviceVerificationApiGrantAuthorizationDetails$Outbound;
}

export function deviceVerificationApiGrantAuthorizationDetailsToJSON(
  deviceVerificationApiGrantAuthorizationDetails:
    DeviceVerificationApiGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceVerificationApiGrantAuthorizationDetails$outboundSchema.parse(
      deviceVerificationApiGrantAuthorizationDetails,
    ),
  );
}

export function deviceVerificationApiGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceVerificationApiGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceVerificationApiGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceVerificationApiGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiGrant$inboundSchema: z.ZodType<
  DeviceVerificationApiGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.lazy(() => DeviceVerificationApiGrantScope$inboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type DeviceVerificationApiGrant$Outbound = {
  scopes?: Array<DeviceVerificationApiGrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceVerificationApiGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const DeviceVerificationApiGrant$outboundSchema: z.ZodType<
  DeviceVerificationApiGrant$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiGrant
> = z.object({
  scopes: z.array(z.lazy(() => DeviceVerificationApiGrantScope$outboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiGrant$ {
  /** @deprecated use `DeviceVerificationApiGrant$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiGrant$inboundSchema;
  /** @deprecated use `DeviceVerificationApiGrant$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiGrant$outboundSchema;
  /** @deprecated use `DeviceVerificationApiGrant$Outbound` instead. */
  export type Outbound = DeviceVerificationApiGrant$Outbound;
}

export function deviceVerificationApiGrantToJSON(
  deviceVerificationApiGrant: DeviceVerificationApiGrant,
): string {
  return JSON.stringify(
    DeviceVerificationApiGrant$outboundSchema.parse(deviceVerificationApiGrant),
  );
}

export function deviceVerificationApiGrantFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiGrant' from JSON`,
  );
}

/** @internal */
export const DeviceVerificationApiResponse$inboundSchema: z.ZodType<
  DeviceVerificationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceVerificationApiAction$inboundSchema.optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceVerificationApiScope$inboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceVerificationApiServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceVerificationApiClientAttribute$inboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceVerificationApiDynamicScope$inboundSchema),
  ).optional(),
  expiresAt: z.number().int().optional(),
  gmAction: DeviceVerificationApiGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceVerificationApiGrant$inboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type DeviceVerificationApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  scopes?: Array<DeviceVerificationApiScope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  acrs?: Array<string> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceVerificationApiAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<DeviceVerificationApiServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<DeviceVerificationApiClientAttribute$Outbound>
    | undefined;
  dynamicScopes?: Array<DeviceVerificationApiDynamicScope$Outbound> | undefined;
  expiresAt?: number | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: DeviceVerificationApiGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceVerificationApiResponse$outboundSchema: z.ZodType<
  DeviceVerificationApiResponse$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceVerificationApiAction$outboundSchema.optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceVerificationApiScope$outboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceVerificationApiAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceVerificationApiServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceVerificationApiClientAttribute$outboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceVerificationApiDynamicScope$outboundSchema),
  ).optional(),
  expiresAt: z.number().int().optional(),
  gmAction: DeviceVerificationApiGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceVerificationApiGrant$outboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiResponse$ {
  /** @deprecated use `DeviceVerificationApiResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiResponse$inboundSchema;
  /** @deprecated use `DeviceVerificationApiResponse$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiResponse$outboundSchema;
  /** @deprecated use `DeviceVerificationApiResponse$Outbound` instead. */
  export type Outbound = DeviceVerificationApiResponse$Outbound;
}

export function deviceVerificationApiResponseToJSON(
  deviceVerificationApiResponse: DeviceVerificationApiResponse,
): string {
  return JSON.stringify(
    DeviceVerificationApiResponse$outboundSchema.parse(
      deviceVerificationApiResponse,
    ),
  );
}

export function deviceVerificationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiResponse' from JSON`,
  );
}
