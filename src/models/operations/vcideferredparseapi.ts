/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciDeferredParseApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciDeferredParseApiRequestBody = {
  /**
   * The access token that came along with the deferred credential request.
   */
  accessToken?: string | undefined;
  /**
   * The message body of the deferred credential request.
   */
  requestContent?: string | undefined;
};

export type VciDeferredParseApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciDeferredParseApiRequestBody;
};

/**
 * The next action that the deferred credential endpoint should take.
 */
export const VciDeferredParseApiAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the deferred credential endpoint should take.
 */
export type VciDeferredParseApiAction = ClosedEnum<
  typeof VciDeferredParseApiAction
>;

/**
 * Information about the credential request bound to the transaction ID.
 */
export type VciDeferredParseApiInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The value of the format parameter in the credential request.
   */
  format?: string | undefined;
  /**
   * The binding key specified by the proof in the credential request.
   */
  bindingKey?: string | undefined;
  /**
   * The details about the credential request.
   */
  details?: string | undefined;
};

export type VciDeferredParseApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the deferred credential endpoint should take.
   */
  action?: VciDeferredParseApiAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  /**
   * Information about the credential request bound to the transaction ID.
   */
  info?: VciDeferredParseApiInfo | undefined;
};

/** @internal */
export const VciDeferredParseApiRequestBody$inboundSchema: z.ZodType<
  VciDeferredParseApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/** @internal */
export type VciDeferredParseApiRequestBody$Outbound = {
  accessToken?: string | undefined;
  requestContent?: string | undefined;
};

/** @internal */
export const VciDeferredParseApiRequestBody$outboundSchema: z.ZodType<
  VciDeferredParseApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiRequestBody
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiRequestBody$ {
  /** @deprecated use `VciDeferredParseApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiRequestBody$inboundSchema;
  /** @deprecated use `VciDeferredParseApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiRequestBody$outboundSchema;
  /** @deprecated use `VciDeferredParseApiRequestBody$Outbound` instead. */
  export type Outbound = VciDeferredParseApiRequestBody$Outbound;
}

export function vciDeferredParseApiRequestBodyToJSON(
  vciDeferredParseApiRequestBody: VciDeferredParseApiRequestBody,
): string {
  return JSON.stringify(
    VciDeferredParseApiRequestBody$outboundSchema.parse(
      vciDeferredParseApiRequestBody,
    ),
  );
}

export function vciDeferredParseApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciDeferredParseApiRequest$inboundSchema: z.ZodType<
  VciDeferredParseApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciDeferredParseApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciDeferredParseApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciDeferredParseApiRequestBody$Outbound;
};

/** @internal */
export const VciDeferredParseApiRequest$outboundSchema: z.ZodType<
  VciDeferredParseApiRequest$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciDeferredParseApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiRequest$ {
  /** @deprecated use `VciDeferredParseApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiRequest$inboundSchema;
  /** @deprecated use `VciDeferredParseApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiRequest$outboundSchema;
  /** @deprecated use `VciDeferredParseApiRequest$Outbound` instead. */
  export type Outbound = VciDeferredParseApiRequest$Outbound;
}

export function vciDeferredParseApiRequestToJSON(
  vciDeferredParseApiRequest: VciDeferredParseApiRequest,
): string {
  return JSON.stringify(
    VciDeferredParseApiRequest$outboundSchema.parse(vciDeferredParseApiRequest),
  );
}

export function vciDeferredParseApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseApiRequest' from JSON`,
  );
}

/** @internal */
export const VciDeferredParseApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciDeferredParseApiAction
> = z.nativeEnum(VciDeferredParseApiAction);

/** @internal */
export const VciDeferredParseApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciDeferredParseApiAction
> = VciDeferredParseApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiAction$ {
  /** @deprecated use `VciDeferredParseApiAction$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiAction$inboundSchema;
  /** @deprecated use `VciDeferredParseApiAction$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiAction$outboundSchema;
}

/** @internal */
export const VciDeferredParseApiInfo$inboundSchema: z.ZodType<
  VciDeferredParseApiInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  format: z.string().optional(),
  bindingKey: z.string().optional(),
  details: z.string().optional(),
});

/** @internal */
export type VciDeferredParseApiInfo$Outbound = {
  identifier?: string | undefined;
  format?: string | undefined;
  bindingKey?: string | undefined;
  details?: string | undefined;
};

/** @internal */
export const VciDeferredParseApiInfo$outboundSchema: z.ZodType<
  VciDeferredParseApiInfo$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiInfo
> = z.object({
  identifier: z.string().optional(),
  format: z.string().optional(),
  bindingKey: z.string().optional(),
  details: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiInfo$ {
  /** @deprecated use `VciDeferredParseApiInfo$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiInfo$inboundSchema;
  /** @deprecated use `VciDeferredParseApiInfo$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiInfo$outboundSchema;
  /** @deprecated use `VciDeferredParseApiInfo$Outbound` instead. */
  export type Outbound = VciDeferredParseApiInfo$Outbound;
}

export function vciDeferredParseApiInfoToJSON(
  vciDeferredParseApiInfo: VciDeferredParseApiInfo,
): string {
  return JSON.stringify(
    VciDeferredParseApiInfo$outboundSchema.parse(vciDeferredParseApiInfo),
  );
}

export function vciDeferredParseApiInfoFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseApiInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseApiInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseApiInfo' from JSON`,
  );
}

/** @internal */
export const VciDeferredParseApiResponse$inboundSchema: z.ZodType<
  VciDeferredParseApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredParseApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.lazy(() => VciDeferredParseApiInfo$inboundSchema).optional(),
});

/** @internal */
export type VciDeferredParseApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: VciDeferredParseApiInfo$Outbound | undefined;
};

/** @internal */
export const VciDeferredParseApiResponse$outboundSchema: z.ZodType<
  VciDeferredParseApiResponse$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredParseApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.lazy(() => VciDeferredParseApiInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiResponse$ {
  /** @deprecated use `VciDeferredParseApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiResponse$inboundSchema;
  /** @deprecated use `VciDeferredParseApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseApiResponse$outboundSchema;
  /** @deprecated use `VciDeferredParseApiResponse$Outbound` instead. */
  export type Outbound = VciDeferredParseApiResponse$Outbound;
}

export function vciDeferredParseApiResponseToJSON(
  vciDeferredParseApiResponse: VciDeferredParseApiResponse,
): string {
  return JSON.stringify(
    VciDeferredParseApiResponse$outboundSchema.parse(
      vciDeferredParseApiResponse,
    ),
  );
}

export function vciDeferredParseApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseApiResponse' from JSON`,
  );
}
