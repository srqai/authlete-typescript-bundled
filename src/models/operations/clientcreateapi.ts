/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClientCreateApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type ClientCreateApiClientNameRequest = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiDescriptionRequest = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const ClientCreateApiClientTypeRequest = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type ClientCreateApiClientTypeRequest = ClosedEnum<
  typeof ClientCreateApiClientTypeRequest
>;

/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export const ClientCreateApiApplicationTypeRequest = {
  Web: "WEB",
  Native: "NATIVE",
} as const;
/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export type ClientCreateApiApplicationTypeRequest = ClosedEnum<
  typeof ClientCreateApiApplicationTypeRequest
>;

export type ClientCreateApiLogoUrisRequest = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const ClientCreateApiGrantTypeRequest = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type ClientCreateApiGrantTypeRequest = ClosedEnum<
  typeof ClientCreateApiGrantTypeRequest
>;

export const ClientCreateApiResponseTypeRequest = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type ClientCreateApiResponseTypeRequest = ClosedEnum<
  typeof ClientCreateApiResponseTypeRequest
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiAuthorizationSignAlgRequest = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiAuthorizationSignAlgRequest = ClosedEnum<
  typeof ClientCreateApiAuthorizationSignAlgRequest
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiAuthorizationEncryptionAlgRequest = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiAuthorizationEncryptionAlgRequest = ClosedEnum<
  typeof ClientCreateApiAuthorizationEncryptionAlgRequest
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiAuthorizationEncryptionEncRequest = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiAuthorizationEncryptionEncRequest = ClosedEnum<
  typeof ClientCreateApiAuthorizationEncryptionEncRequest
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientCreateApiTokenAuthMethodRequest = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientCreateApiTokenAuthMethodRequest = ClosedEnum<
  typeof ClientCreateApiTokenAuthMethodRequest
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiTokenAuthSignAlgRequest = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiTokenAuthSignAlgRequest = ClosedEnum<
  typeof ClientCreateApiTokenAuthSignAlgRequest
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiRequestSignAlgRequest = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiRequestSignAlgRequest = ClosedEnum<
  typeof ClientCreateApiRequestSignAlgRequest
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiRequestEncryptionAlgRequest = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiRequestEncryptionAlgRequest = ClosedEnum<
  typeof ClientCreateApiRequestEncryptionAlgRequest
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiRequestEncryptionEncRequest = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiRequestEncryptionEncRequest = ClosedEnum<
  typeof ClientCreateApiRequestEncryptionEncRequest
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiIdTokenSignAlgRequest = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiIdTokenSignAlgRequest = ClosedEnum<
  typeof ClientCreateApiIdTokenSignAlgRequest
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiIdTokenEncryptionAlgRequest = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiIdTokenEncryptionAlgRequest = ClosedEnum<
  typeof ClientCreateApiIdTokenEncryptionAlgRequest
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiIdTokenEncryptionEncRequest = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiIdTokenEncryptionEncRequest = ClosedEnum<
  typeof ClientCreateApiIdTokenEncryptionEncRequest
>;

/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientCreateApiSubjectTypeRequest = {
  Public: "PUBLIC",
  Pairwise: "PAIRWISE",
} as const;
/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientCreateApiSubjectTypeRequest = ClosedEnum<
  typeof ClientCreateApiSubjectTypeRequest
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiUserInfoSignAlgRequest = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiUserInfoSignAlgRequest = ClosedEnum<
  typeof ClientCreateApiUserInfoSignAlgRequest
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiUserInfoEncryptionAlgRequest = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiUserInfoEncryptionAlgRequest = ClosedEnum<
  typeof ClientCreateApiUserInfoEncryptionAlgRequest
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiUserInfoEncryptionEncRequest = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiUserInfoEncryptionEncRequest = ClosedEnum<
  typeof ClientCreateApiUserInfoEncryptionEncRequest
>;

export type ClientCreateApiTosUrisRequest = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiPolicyUrisRequest = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiClientUrisRequest = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiBcRequestSignAlgRequest = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiBcRequestSignAlgRequest = ClosedEnum<
  typeof ClientCreateApiBcRequestSignAlgRequest
>;

export type ClientCreateApiAttributeRequest = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiExtensionRequest = {
  /**
   * The set of scopes that the client application is allowed to request. This paramter will be one
   *
   * @remarks
   * of the following.
   *
   *   - `null`
   *   - an empty set
   *   - a set with at least one element
   *
   * When the value of this parameter is `null`, it means that the set of scopes that the client
   * application is allowed to request is the set of the scopes that the service supports. When the
   * value of this parameter is an empty set, it means that the client application is not allowed to
   * request any scopes. When the value of this parameter is a set with at least one element, it means
   * that the set is the set of scopes that the client application is allowed to request.
   */
  requestableScopes?: Array<string> | undefined;
  /**
   * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
   *
   * @remarks
   * can define the set of scopes which this client application can request. If `false`, this client
   * application can request any scope which is supported by the authorization server.
   */
  requestableScopesEnabled?: boolean | undefined;
  /**
   * The value of the duration of access tokens per client in seconds. In normal cases, the value of
   *
   * @remarks
   * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
   * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of access tokens issued to the client application.
   *
   * Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
   * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of refresh tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The value of the duration of ID tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
   * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of ID tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  idTokenDuration?: number | undefined;
  /**
   * Get the flag indicating whether the client is explicitly given a
   *
   * @remarks
   * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
   */
  tokenExchangePermitted?: boolean | undefined;
};

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const ClientCreateApiClientRegistrationTypeRequest = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type ClientCreateApiClientRegistrationTypeRequest = ClosedEnum<
  typeof ClientCreateApiClientRegistrationTypeRequest
>;

export const ClientCreateApiFapiModeRequest = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type ClientCreateApiFapiModeRequest = ClosedEnum<
  typeof ClientCreateApiFapiModeRequest
>;

export const ClientCreateApiResponseModeRequest = {
  Query: "QUERY",
  Fragment: "FRAGMENT",
  FormPost: "FORM_POST",
  Jwt: "JWT",
  QueryJwt: "QUERY_JWT",
  FragmentJwt: "FRAGMENT_JWT",
  FormPostJwt: "FORM_POST_JWT",
} as const;
export type ClientCreateApiResponseModeRequest = ClosedEnum<
  typeof ClientCreateApiResponseModeRequest
>;

export type ClientCreateApiRequestBody = {
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<ClientCreateApiClientNameRequest> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<ClientCreateApiDescriptionRequest> | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: ClientCreateApiClientTypeRequest | undefined;
  /**
   * The application type. The value of this property affects the validation steps for a redirect URI.
   *
   * @remarks
   * See the description about `redirectUris` property for more details.
   */
  applicationType?: ClientCreateApiApplicationTypeRequest | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<ClientCreateApiLogoUrisRequest> | undefined;
  /**
   * An array of email addresses of people responsible for the client application.
   *
   * @remarks
   *
   * This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
   * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  contacts?: Array<string> | undefined;
  /**
   * The flag to indicate whether this client use TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The unique identifier string assigned by the client developer or software publisher used by
   *
   * @remarks
   * registration endpoints to identify the client software to be dynamically registered.
   *
   * This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareId?: string | undefined;
  /**
   * The version identifier string for the client software identified by the software ID.
   *
   * @remarks
   *
   * This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareVersion?: string | undefined;
  /**
   * The hash of the registration access token for this client.
   *
   * @remarks
   */
  registrationAccessTokenHash?: string | undefined;
  /**
   * A string array of grant types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  grantTypes?: Array<ClientCreateApiGrantTypeRequest> | undefined;
  /**
   * A string array of response types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  responseTypes?: Array<ClientCreateApiResponseTypeRequest> | undefined;
  /**
   * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
   *
   * @remarks
   * Requirements for a redirect URI are as follows.
   *
   * **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
   *
   * - Must be an absolute URI.
   * - Must not have a fragment component.
   *
   * **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * application_type")
   *
   * - The scheme of the redirect URI used for Implicit Grant by a client application whose application
   * is `web` must be `https`. This is checked at runtime by Authlete.
   * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
   * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
   * - The scheme of the redirect URI used by a client application whose application type is `native`
   * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
   * is `localhost`. This is checked at runtime by Authlete.
   *
   * **Requirements by Authlete**
   *
   * - Must consist of printable ASCII letters only.
   * - Must not exceed 200 letters.
   *
   * Note that Authlete allows the application type to be `null`. In other words, a client application
   * does not have to choose `web` or `native` as its application type.
   * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
   *
   * An authorization request from a client application which has not registered any redirect URI
   * fails unless at least all the following conditions are satisfied.
   *
   * - The client type of the client application is `confidential`.
   * - The value of `response_type` request parameter is `code`.
   * - The authorization request has the `redirect_uri` request parameter.
   * - The value of `scope` request parameter does not contain `openid`.
   *
   * RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
   * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
   * details), but OpenID Connect requires exact match.
   */
  redirectUris?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  authorizationSignAlg?: ClientCreateApiAuthorizationSignAlgRequest | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  authorizationEncryptionAlg?:
    | ClientCreateApiAuthorizationEncryptionAlgRequest
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  authorizationEncryptionEnc?:
    | ClientCreateApiAuthorizationEncryptionEncRequest
    | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tokenAuthMethod?: ClientCreateApiTokenAuthMethodRequest | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  tokenAuthSignAlg?: ClientCreateApiTokenAuthSignAlgRequest | undefined;
  /**
   * The key ID of a JWK containing a self-signed certificate of this client.
   *
   * @remarks
   */
  selfSignedCertificateKeyId?: string | undefined;
  /**
   * The string representation of the expected subject distinguished name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSubjectDn?: string | undefined;
  /**
   * The string representation of the expected DNS subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanDns?: string | undefined;
  /**
   * The string representation of the expected URI subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanUri?: string | undefined;
  /**
   * The string representation of the expected IP address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanIp?: string | undefined;
  /**
   * The string representation of the expected email address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanEmail?: string | undefined;
  /**
   * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
   *
   * @remarks
   * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
   * in "OAuth 2.0 Pushed Authorization Requests".
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether authorization requests from this client are always required to
   *
   * @remarks
   * utilize a request object by using either `request` or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
   * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
   * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  requestSignAlg?: ClientCreateApiRequestSignAlgRequest | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  requestEncryptionAlg?: ClientCreateApiRequestEncryptionAlgRequest | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  requestEncryptionEnc?: ClientCreateApiRequestEncryptionEncRequest | undefined;
  /**
   * An array of URLs each of which points to a request object.
   *
   * @remarks
   *
   * Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
   * This property is used for the pre-registration.
   * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
   */
  requestUris?: Array<string> | undefined;
  /**
   * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
   *
   * @remarks
   *
   * This property corresponds to `default_max_age` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  defaultMaxAge?: number | undefined;
  /**
   * The default ACRs (Authentication Context Class References). This value is used when an authorization
   *
   * @remarks
   * request from the client application has neither `acr_values` request parameter nor `acr` claim
   * in claims request parameter.
   */
  defaultAcrs?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  idTokenSignAlg?: ClientCreateApiIdTokenSignAlgRequest | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  idTokenEncryptionAlg?: ClientCreateApiIdTokenEncryptionAlgRequest | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  idTokenEncryptionEnc?: ClientCreateApiIdTokenEncryptionEncRequest | undefined;
  /**
   * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
   *
   * @remarks
   *
   * This property corresponds to `require_auth_time` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  authTimeRequired?: boolean | undefined;
  /**
   * The subject type that the client application requests. Details about the subject type are described in
   *
   * @remarks
   * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
   *
   * This property corresponds to `subject_type` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  subjectType?: ClientCreateApiSubjectTypeRequest | undefined;
  /**
   * The value of the sector identifier URI.
   *
   * @remarks
   * This represents the `sector_identifier_uri` client metadata which is defined in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
   */
  sectorIdentifierUri?: string | undefined;
  /**
   * The URL pointing to the JWK Set of the client application.
   *
   * @remarks
   * The content pointed to by the URL is JSON which complies with the format described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
   * and/or signs request objects, it must make available its JWK Set containing public keys for the
   * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
   * Set from the URL as necessary.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * The content of the JWK Set of the client application.
   *
   * @remarks
   * The format is described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwks?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  userInfoSignAlg?: ClientCreateApiUserInfoSignAlgRequest | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  userInfoEncryptionAlg?:
    | ClientCreateApiUserInfoEncryptionAlgRequest
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  userInfoEncryptionEnc?:
    | ClientCreateApiUserInfoEncryptionEncRequest
    | undefined;
  /**
   * The URL which a third party can use to initiate a login by the client application.
   *
   * @remarks
   *
   * This property corresponds to `initiate_login_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  loginUri?: string | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<ClientCreateApiTosUrisRequest> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<ClientCreateApiPolicyUrisRequest> | undefined;
  /**
   * The URL pointing to the home page of the client application.
   *
   * @remarks
   *
   * This property corresponds to `client_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientUri?: string | undefined;
  /**
   * Home page URLs with language tags.
   *
   * @remarks
   * If the client application has different home pages for different languages, this property can
   * be used to register the URLs.
   */
  clientUris?: Array<ClientCreateApiClientUrisRequest> | undefined;
  /**
   * The backchannel token delivery mode.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_token_delivery_mode` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcDeliveryMode?: string | undefined;
  /**
   * The backchannel client notification endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_client_notification_endpoint` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcNotificationEndpoint?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  bcRequestSignAlg?: ClientCreateApiBcRequestSignAlgRequest | undefined;
  /**
   * The boolean flag to indicate whether a user code is required when this client makes a backchannel
   *
   * @remarks
   * authentication request.
   *
   * This property corresponds to the `backchannel_user_code_parameter` metadata.
   */
  bcUserCodeRequired?: boolean | undefined;
  /**
   * The attributes of this client.
   *
   * @remarks
   */
  attributes?: Array<ClientCreateApiAttributeRequest> | undefined;
  extension?: ClientCreateApiExtensionRequest | undefined;
  /**
   * The authorization details types that this client may use as values of the `type` field in
   *
   * @remarks
   * `authorization_details`.
   *
   * This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
   * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
   *
   * Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
   * to align with the change made by the 5th draft of the RAR specification.
   */
  authorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The custom client metadata in JSON format.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
   * to corresponding properties of the client application. For example, the value of the `client_name`
   * client metadata in Client Registration/Update Request is set to the clientName property. On the
   * other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
   * of Service, Authlete can recognize them and stores their values into the database. The stored
   * custom client metadata values can be referenced by this property.
   */
  customMetadata?: string | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the service is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
   *   since this signals to the OP that a client_secret value needs to be returned from which the
   *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
   *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
   *   is present. If both signing and encryption are requested, the Request Object will be signed
   *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
   *   is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The property that represents the client metadata is `requestEncryptionAlg`. See the description
   * of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   *   MUST also be provided.
   *
   * The property that represents the client metadata is `requestEncryptionEnc`. See the description
   * of `requestEncryptionEnc`  for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The digest algorithm that this client requests the server to use
   *
   * @remarks
   * when it computes digest values of <a href=
   * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
   * >external attachments</a>, which may be referenced from within ID tokens
   * or userinfo responses (or any place that can have the `verified_claims` claim).
   *
   * Possible values are listed in the <a href=
   * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
   * >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
   * but the server does not necessarily support all the values there. When
   * this property is omitted, `sha-256` is used as the default algorithm.
   *
   * This property corresponds to the `digest_algorithm` client metadata
   * which was defined by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
   */
  digestAlgorithm?: string | undefined;
  /**
   * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
   *
   * @remarks
   *
   * Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
   *
   * Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * If the DPoP is required for this client
   *
   * @remarks
   */
  dpopRequired?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "automatic" client registration of OIDC Federation.
   */
  automaticallyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "explicit" client registration of OIDC Federation.
   */
  explicitlyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsRequestSigned?: boolean | undefined;
  /**
   * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
   *
   * @remarks
   */
  rsSignedRequestKeyId?: string | undefined;
  /**
   * The client registration types that the client has declared it may use.
   *
   * @remarks
   */
  clientRegistrationTypes?:
    | Array<ClientCreateApiClientRegistrationTypeRequest>
    | undefined;
  /**
   * The human-readable name representing the organization that manages this client. This property corresponds
   *
   * @remarks
   * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
   *
   * @remarks
   * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * the entity ID of this client.
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
   *
   * @remarks
   * the mechanism defined in OpenID Connect Federation 1.0
   */
  trustAnchorId?: string | undefined;
  /**
   * The trust chain that was used when this client was registered or updated by the mechanism defined in
   *
   * @remarks
   * OpenID Connect Federation 1.0
   */
  trustChain?: Array<string> | undefined;
  /**
   * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
   *
   * @remarks
   * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
   */
  trustChainExpiresAt?: number | undefined;
  /**
   * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
   *
   * @remarks
   */
  trustChainUpdatedAt?: number | undefined;
  /**
   * The flag which indicates whether this client is locked.
   *
   * @remarks
   */
  locked?: boolean | undefined;
  /**
   * The URL of the credential offer endpoint at which this client
   *
   * @remarks
   * (wallet) receives a credential offer from the credential issuer.
   */
  credentialOfferEndpoint?: string | undefined;
  /**
   * The FAPI modes for this client.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests from this client
   * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
   * is supported by the service, and the FAPI modes for the service are set to `null`.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
   * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
   * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
   * the service, and the FAPI modes for the service are set to `null`.
   */
  fapiModes?: Array<ClientCreateApiFapiModeRequest> | undefined;
  /**
   * The response modes that this client may use.
   */
  responseModes?: Array<ClientCreateApiResponseModeRequest> | undefined;
  /**
   * True if credential responses to this client must be always encrypted.
   */
  credentialResponseEncryptionRequired?: boolean | undefined;
};

export type ClientCreateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody?: ClientCreateApiRequestBody | undefined;
};

export type ClientCreateApiClientNameResponse = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiDescriptionResponse = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const ClientCreateApiClientTypeResponse = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type ClientCreateApiClientTypeResponse = ClosedEnum<
  typeof ClientCreateApiClientTypeResponse
>;

/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export const ClientCreateApiApplicationTypeResponse = {
  Web: "WEB",
  Native: "NATIVE",
} as const;
/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export type ClientCreateApiApplicationTypeResponse = ClosedEnum<
  typeof ClientCreateApiApplicationTypeResponse
>;

export type ClientCreateApiLogoUrisResponse = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const ClientCreateApiGrantTypeResponse = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type ClientCreateApiGrantTypeResponse = ClosedEnum<
  typeof ClientCreateApiGrantTypeResponse
>;

export const ClientCreateApiResponseTypeResponse = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type ClientCreateApiResponseTypeResponse = ClosedEnum<
  typeof ClientCreateApiResponseTypeResponse
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiAuthorizationSignAlgResponse = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiAuthorizationSignAlgResponse = ClosedEnum<
  typeof ClientCreateApiAuthorizationSignAlgResponse
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiAuthorizationEncryptionAlgResponse = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiAuthorizationEncryptionAlgResponse = ClosedEnum<
  typeof ClientCreateApiAuthorizationEncryptionAlgResponse
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiAuthorizationEncryptionEncResponse = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiAuthorizationEncryptionEncResponse = ClosedEnum<
  typeof ClientCreateApiAuthorizationEncryptionEncResponse
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientCreateApiTokenAuthMethodResponse = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientCreateApiTokenAuthMethodResponse = ClosedEnum<
  typeof ClientCreateApiTokenAuthMethodResponse
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiTokenAuthSignAlgResponse = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiTokenAuthSignAlgResponse = ClosedEnum<
  typeof ClientCreateApiTokenAuthSignAlgResponse
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiRequestSignAlgResponse = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiRequestSignAlgResponse = ClosedEnum<
  typeof ClientCreateApiRequestSignAlgResponse
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiRequestEncryptionAlgResponse = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiRequestEncryptionAlgResponse = ClosedEnum<
  typeof ClientCreateApiRequestEncryptionAlgResponse
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiRequestEncryptionEncResponse = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiRequestEncryptionEncResponse = ClosedEnum<
  typeof ClientCreateApiRequestEncryptionEncResponse
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiIdTokenSignAlgResponse = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiIdTokenSignAlgResponse = ClosedEnum<
  typeof ClientCreateApiIdTokenSignAlgResponse
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiIdTokenEncryptionAlgResponse = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiIdTokenEncryptionAlgResponse = ClosedEnum<
  typeof ClientCreateApiIdTokenEncryptionAlgResponse
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiIdTokenEncryptionEncResponse = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiIdTokenEncryptionEncResponse = ClosedEnum<
  typeof ClientCreateApiIdTokenEncryptionEncResponse
>;

/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientCreateApiSubjectTypeResponse = {
  Public: "PUBLIC",
  Pairwise: "PAIRWISE",
} as const;
/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientCreateApiSubjectTypeResponse = ClosedEnum<
  typeof ClientCreateApiSubjectTypeResponse
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiUserInfoSignAlgResponse = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiUserInfoSignAlgResponse = ClosedEnum<
  typeof ClientCreateApiUserInfoSignAlgResponse
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientCreateApiUserInfoEncryptionAlgResponse = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientCreateApiUserInfoEncryptionAlgResponse = ClosedEnum<
  typeof ClientCreateApiUserInfoEncryptionAlgResponse
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientCreateApiUserInfoEncryptionEncResponse = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientCreateApiUserInfoEncryptionEncResponse = ClosedEnum<
  typeof ClientCreateApiUserInfoEncryptionEncResponse
>;

export type ClientCreateApiTosUrisResponse = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiPolicyUrisResponse = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiClientUrisResponse = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientCreateApiBcRequestSignAlgResponse = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientCreateApiBcRequestSignAlgResponse = ClosedEnum<
  typeof ClientCreateApiBcRequestSignAlgResponse
>;

export type ClientCreateApiAttributeResponse = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientCreateApiExtensionResponse = {
  /**
   * The set of scopes that the client application is allowed to request. This paramter will be one
   *
   * @remarks
   * of the following.
   *
   *   - `null`
   *   - an empty set
   *   - a set with at least one element
   *
   * When the value of this parameter is `null`, it means that the set of scopes that the client
   * application is allowed to request is the set of the scopes that the service supports. When the
   * value of this parameter is an empty set, it means that the client application is not allowed to
   * request any scopes. When the value of this parameter is a set with at least one element, it means
   * that the set is the set of scopes that the client application is allowed to request.
   */
  requestableScopes?: Array<string> | undefined;
  /**
   * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
   *
   * @remarks
   * can define the set of scopes which this client application can request. If `false`, this client
   * application can request any scope which is supported by the authorization server.
   */
  requestableScopesEnabled?: boolean | undefined;
  /**
   * The value of the duration of access tokens per client in seconds. In normal cases, the value of
   *
   * @remarks
   * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
   * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of access tokens issued to the client application.
   *
   * Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
   * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of refresh tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The value of the duration of ID tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
   * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of ID tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  idTokenDuration?: number | undefined;
  /**
   * Get the flag indicating whether the client is explicitly given a
   *
   * @remarks
   * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
   */
  tokenExchangePermitted?: boolean | undefined;
};

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const ClientCreateApiClientRegistrationTypeResponse = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type ClientCreateApiClientRegistrationTypeResponse = ClosedEnum<
  typeof ClientCreateApiClientRegistrationTypeResponse
>;

export const ClientCreateApiFapiModeResponse = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type ClientCreateApiFapiModeResponse = ClosedEnum<
  typeof ClientCreateApiFapiModeResponse
>;

export const ClientCreateApiResponseModeResponse = {
  Query: "QUERY",
  Fragment: "FRAGMENT",
  FormPost: "FORM_POST",
  Jwt: "JWT",
  QueryJwt: "QUERY_JWT",
  FragmentJwt: "FRAGMENT_JWT",
  FormPostJwt: "FORM_POST_JWT",
} as const;
export type ClientCreateApiResponseModeResponse = ClosedEnum<
  typeof ClientCreateApiResponseModeResponse
>;

export type ClientCreateApiResponse = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The sequential number of the service of the client application. The value of this property is
   *
   * @remarks
   * assigned by Authlete.
   */
  serviceNumber?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<ClientCreateApiClientNameResponse> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<ClientCreateApiDescriptionResponse> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
   *
   * @remarks
   * property is assigned by Authlete.
   *
   * Note that Authlete issues a client secret even to a "public" client application, but the client
   * application should not use the client secret unless it changes its client type to "confidential".
   * That is, a public client application should behave as if it had not been issued a client secret.
   * To be specific, a token request from a public client of Authlete should not come along with a
   * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
   * says as follows.
   *
   * > Confidential clients or other clients issued client credentials MUST authenticate with the
   * authorization server as described in Section 2.3 when making requests to the token endpoint.
   */
  clientSecret?: string | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: ClientCreateApiClientTypeResponse | undefined;
  /**
   * The application type. The value of this property affects the validation steps for a redirect URI.
   *
   * @remarks
   * See the description about `redirectUris` property for more details.
   */
  applicationType?: ClientCreateApiApplicationTypeResponse | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<ClientCreateApiLogoUrisResponse> | undefined;
  /**
   * An array of email addresses of people responsible for the client application.
   *
   * @remarks
   *
   * This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
   * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  contacts?: Array<string> | undefined;
  /**
   * The flag to indicate whether this client use TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The flag to indicate whether this client has been registered dynamically.
   *
   * @remarks
   * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  dynamicallyRegistered?: boolean | undefined;
  /**
   * The unique identifier string assigned by the client developer or software publisher used by
   *
   * @remarks
   * registration endpoints to identify the client software to be dynamically registered.
   *
   * This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareId?: string | undefined;
  /**
   * The version identifier string for the client software identified by the software ID.
   *
   * @remarks
   *
   * This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareVersion?: string | undefined;
  /**
   * The hash of the registration access token for this client.
   *
   * @remarks
   */
  registrationAccessTokenHash?: string | undefined;
  /**
   * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  createdAt?: number | undefined;
  /**
   * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  modifiedAt?: number | undefined;
  /**
   * A string array of grant types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  grantTypes?: Array<ClientCreateApiGrantTypeResponse> | undefined;
  /**
   * A string array of response types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  responseTypes?: Array<ClientCreateApiResponseTypeResponse> | undefined;
  /**
   * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
   *
   * @remarks
   * Requirements for a redirect URI are as follows.
   *
   * **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
   *
   * - Must be an absolute URI.
   * - Must not have a fragment component.
   *
   * **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * application_type")
   *
   * - The scheme of the redirect URI used for Implicit Grant by a client application whose application
   * is `web` must be `https`. This is checked at runtime by Authlete.
   * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
   * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
   * - The scheme of the redirect URI used by a client application whose application type is `native`
   * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
   * is `localhost`. This is checked at runtime by Authlete.
   *
   * **Requirements by Authlete**
   *
   * - Must consist of printable ASCII letters only.
   * - Must not exceed 200 letters.
   *
   * Note that Authlete allows the application type to be `null`. In other words, a client application
   * does not have to choose `web` or `native` as its application type.
   * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
   *
   * An authorization request from a client application which has not registered any redirect URI
   * fails unless at least all the following conditions are satisfied.
   *
   * - The client type of the client application is `confidential`.
   * - The value of `response_type` request parameter is `code`.
   * - The authorization request has the `redirect_uri` request parameter.
   * - The value of `scope` request parameter does not contain `openid`.
   *
   * RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
   * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
   * details), but OpenID Connect requires exact match.
   */
  redirectUris?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  authorizationSignAlg?:
    | ClientCreateApiAuthorizationSignAlgResponse
    | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  authorizationEncryptionAlg?:
    | ClientCreateApiAuthorizationEncryptionAlgResponse
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  authorizationEncryptionEnc?:
    | ClientCreateApiAuthorizationEncryptionEncResponse
    | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tokenAuthMethod?: ClientCreateApiTokenAuthMethodResponse | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  tokenAuthSignAlg?: ClientCreateApiTokenAuthSignAlgResponse | undefined;
  /**
   * The key ID of a JWK containing a self-signed certificate of this client.
   *
   * @remarks
   */
  selfSignedCertificateKeyId?: string | undefined;
  /**
   * The string representation of the expected subject distinguished name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSubjectDn?: string | undefined;
  /**
   * The string representation of the expected DNS subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanDns?: string | undefined;
  /**
   * The string representation of the expected URI subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanUri?: string | undefined;
  /**
   * The string representation of the expected IP address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanIp?: string | undefined;
  /**
   * The string representation of the expected email address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanEmail?: string | undefined;
  /**
   * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
   *
   * @remarks
   * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
   * in "OAuth 2.0 Pushed Authorization Requests".
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether authorization requests from this client are always required to
   *
   * @remarks
   * utilize a request object by using either `request` or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
   * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
   * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  requestSignAlg?: ClientCreateApiRequestSignAlgResponse | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  requestEncryptionAlg?:
    | ClientCreateApiRequestEncryptionAlgResponse
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  requestEncryptionEnc?:
    | ClientCreateApiRequestEncryptionEncResponse
    | undefined;
  /**
   * An array of URLs each of which points to a request object.
   *
   * @remarks
   *
   * Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
   * This property is used for the pre-registration.
   * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
   */
  requestUris?: Array<string> | undefined;
  /**
   * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
   *
   * @remarks
   *
   * This property corresponds to `default_max_age` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  defaultMaxAge?: number | undefined;
  /**
   * The default ACRs (Authentication Context Class References). This value is used when an authorization
   *
   * @remarks
   * request from the client application has neither `acr_values` request parameter nor `acr` claim
   * in claims request parameter.
   */
  defaultAcrs?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  idTokenSignAlg?: ClientCreateApiIdTokenSignAlgResponse | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  idTokenEncryptionAlg?:
    | ClientCreateApiIdTokenEncryptionAlgResponse
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  idTokenEncryptionEnc?:
    | ClientCreateApiIdTokenEncryptionEncResponse
    | undefined;
  /**
   * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
   *
   * @remarks
   *
   * This property corresponds to `require_auth_time` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  authTimeRequired?: boolean | undefined;
  /**
   * The subject type that the client application requests. Details about the subject type are described in
   *
   * @remarks
   * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
   *
   * This property corresponds to `subject_type` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  subjectType?: ClientCreateApiSubjectTypeResponse | undefined;
  /**
   * The value of the sector identifier URI.
   *
   * @remarks
   * This represents the `sector_identifier_uri` client metadata which is defined in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
   */
  sectorIdentifierUri?: string | undefined;
  /**
   * The sector identifier host component as derived from either the `sector_identifier_uri` or the
   *
   * @remarks
   * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
   * are also registered, the value of this property is `null`.
   */
  derivedSectorIdentifier?: string | undefined;
  /**
   * The URL pointing to the JWK Set of the client application.
   *
   * @remarks
   * The content pointed to by the URL is JSON which complies with the format described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
   * and/or signs request objects, it must make available its JWK Set containing public keys for the
   * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
   * Set from the URL as necessary.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * The content of the JWK Set of the client application.
   *
   * @remarks
   * The format is described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwks?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  userInfoSignAlg?: ClientCreateApiUserInfoSignAlgResponse | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  userInfoEncryptionAlg?:
    | ClientCreateApiUserInfoEncryptionAlgResponse
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  userInfoEncryptionEnc?:
    | ClientCreateApiUserInfoEncryptionEncResponse
    | undefined;
  /**
   * The URL which a third party can use to initiate a login by the client application.
   *
   * @remarks
   *
   * This property corresponds to `initiate_login_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  loginUri?: string | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<ClientCreateApiTosUrisResponse> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<ClientCreateApiPolicyUrisResponse> | undefined;
  /**
   * The URL pointing to the home page of the client application.
   *
   * @remarks
   *
   * This property corresponds to `client_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientUri?: string | undefined;
  /**
   * Home page URLs with language tags.
   *
   * @remarks
   * If the client application has different home pages for different languages, this property can
   * be used to register the URLs.
   */
  clientUris?: Array<ClientCreateApiClientUrisResponse> | undefined;
  /**
   * The backchannel token delivery mode.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_token_delivery_mode` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcDeliveryMode?: string | undefined;
  /**
   * The backchannel client notification endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_client_notification_endpoint` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcNotificationEndpoint?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  bcRequestSignAlg?: ClientCreateApiBcRequestSignAlgResponse | undefined;
  /**
   * The boolean flag to indicate whether a user code is required when this client makes a backchannel
   *
   * @remarks
   * authentication request.
   *
   * This property corresponds to the `backchannel_user_code_parameter` metadata.
   */
  bcUserCodeRequired?: boolean | undefined;
  /**
   * The attributes of this client.
   *
   * @remarks
   */
  attributes?: Array<ClientCreateApiAttributeResponse> | undefined;
  extension?: ClientCreateApiExtensionResponse | undefined;
  /**
   * The authorization details types that this client may use as values of the `type` field in
   *
   * @remarks
   * `authorization_details`.
   *
   * This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
   * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
   *
   * Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
   * to align with the change made by the 5th draft of the RAR specification.
   */
  authorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The custom client metadata in JSON format.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
   * to corresponding properties of the client application. For example, the value of the `client_name`
   * client metadata in Client Registration/Update Request is set to the clientName property. On the
   * other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
   * of Service, Authlete can recognize them and stores their values into the database. The stored
   * custom client metadata values can be referenced by this property.
   */
  customMetadata?: string | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the service is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
   *   since this signals to the OP that a client_secret value needs to be returned from which the
   *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
   *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
   *   is present. If both signing and encryption are requested, the Request Object will be signed
   *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
   *   is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The property that represents the client metadata is `requestEncryptionAlg`. See the description
   * of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   *   MUST also be provided.
   *
   * The property that represents the client metadata is `requestEncryptionEnc`. See the description
   * of `requestEncryptionEnc`  for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The digest algorithm that this client requests the server to use
   *
   * @remarks
   * when it computes digest values of <a href=
   * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
   * >external attachments</a>, which may be referenced from within ID tokens
   * or userinfo responses (or any place that can have the `verified_claims` claim).
   *
   * Possible values are listed in the <a href=
   * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
   * >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
   * but the server does not necessarily support all the values there. When
   * this property is omitted, `sha-256` is used as the default algorithm.
   *
   * This property corresponds to the `digest_algorithm` client metadata
   * which was defined by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
   */
  digestAlgorithm?: string | undefined;
  /**
   * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
   *
   * @remarks
   *
   * Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
   *
   * Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * If the DPoP is required for this client
   *
   * @remarks
   */
  dpopRequired?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "automatic" client registration of OIDC Federation.
   */
  automaticallyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "explicit" client registration of OIDC Federation.
   */
  explicitlyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsRequestSigned?: boolean | undefined;
  /**
   * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
   *
   * @remarks
   */
  rsSignedRequestKeyId?: string | undefined;
  /**
   * The client registration types that the client has declared it may use.
   *
   * @remarks
   */
  clientRegistrationTypes?:
    | Array<ClientCreateApiClientRegistrationTypeResponse>
    | undefined;
  /**
   * The human-readable name representing the organization that manages this client. This property corresponds
   *
   * @remarks
   * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
   *
   * @remarks
   * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * the entity ID of this client.
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
   *
   * @remarks
   * the mechanism defined in OpenID Connect Federation 1.0
   */
  trustAnchorId?: string | undefined;
  /**
   * The trust chain that was used when this client was registered or updated by the mechanism defined in
   *
   * @remarks
   * OpenID Connect Federation 1.0
   */
  trustChain?: Array<string> | undefined;
  /**
   * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
   *
   * @remarks
   * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
   */
  trustChainExpiresAt?: number | undefined;
  /**
   * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
   *
   * @remarks
   */
  trustChainUpdatedAt?: number | undefined;
  /**
   * The flag which indicates whether this client is locked.
   *
   * @remarks
   */
  locked?: boolean | undefined;
  /**
   * The URL of the credential offer endpoint at which this client
   *
   * @remarks
   * (wallet) receives a credential offer from the credential issuer.
   */
  credentialOfferEndpoint?: string | undefined;
  /**
   * The FAPI modes for this client.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests from this client
   * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
   * is supported by the service, and the FAPI modes for the service are set to `null`.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
   * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
   * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
   * the service, and the FAPI modes for the service are set to `null`.
   */
  fapiModes?: Array<ClientCreateApiFapiModeResponse> | undefined;
  /**
   * The response modes that this client may use.
   */
  responseModes?: Array<ClientCreateApiResponseModeResponse> | undefined;
  /**
   * True if credential responses to this client must be always encrypted.
   */
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const ClientCreateApiClientNameRequest$inboundSchema: z.ZodType<
  ClientCreateApiClientNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiClientNameRequest$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiClientNameRequest$outboundSchema: z.ZodType<
  ClientCreateApiClientNameRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiClientNameRequest
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientNameRequest$ {
  /** @deprecated use `ClientCreateApiClientNameRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiClientNameRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiClientNameRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiClientNameRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiClientNameRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiClientNameRequest$Outbound;
}

export function clientCreateApiClientNameRequestToJSON(
  clientCreateApiClientNameRequest: ClientCreateApiClientNameRequest,
): string {
  return JSON.stringify(
    ClientCreateApiClientNameRequest$outboundSchema.parse(
      clientCreateApiClientNameRequest,
    ),
  );
}

export function clientCreateApiClientNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiClientNameRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiClientNameRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiClientNameRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiDescriptionRequest$inboundSchema: z.ZodType<
  ClientCreateApiDescriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiDescriptionRequest$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiDescriptionRequest$outboundSchema: z.ZodType<
  ClientCreateApiDescriptionRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiDescriptionRequest
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiDescriptionRequest$ {
  /** @deprecated use `ClientCreateApiDescriptionRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiDescriptionRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiDescriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiDescriptionRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiDescriptionRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiDescriptionRequest$Outbound;
}

export function clientCreateApiDescriptionRequestToJSON(
  clientCreateApiDescriptionRequest: ClientCreateApiDescriptionRequest,
): string {
  return JSON.stringify(
    ClientCreateApiDescriptionRequest$outboundSchema.parse(
      clientCreateApiDescriptionRequest,
    ),
  );
}

export function clientCreateApiDescriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiDescriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiDescriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiDescriptionRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiClientTypeRequest
> = z.nativeEnum(ClientCreateApiClientTypeRequest);

/** @internal */
export const ClientCreateApiClientTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiClientTypeRequest
> = ClientCreateApiClientTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientTypeRequest$ {
  /** @deprecated use `ClientCreateApiClientTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiClientTypeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiClientTypeRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiClientTypeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiApplicationTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiApplicationTypeRequest> = z.nativeEnum(
    ClientCreateApiApplicationTypeRequest,
  );

/** @internal */
export const ClientCreateApiApplicationTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiApplicationTypeRequest> =
    ClientCreateApiApplicationTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiApplicationTypeRequest$ {
  /** @deprecated use `ClientCreateApiApplicationTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiApplicationTypeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiApplicationTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiApplicationTypeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiLogoUrisRequest$inboundSchema: z.ZodType<
  ClientCreateApiLogoUrisRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiLogoUrisRequest$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiLogoUrisRequest$outboundSchema: z.ZodType<
  ClientCreateApiLogoUrisRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiLogoUrisRequest
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiLogoUrisRequest$ {
  /** @deprecated use `ClientCreateApiLogoUrisRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiLogoUrisRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiLogoUrisRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiLogoUrisRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiLogoUrisRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiLogoUrisRequest$Outbound;
}

export function clientCreateApiLogoUrisRequestToJSON(
  clientCreateApiLogoUrisRequest: ClientCreateApiLogoUrisRequest,
): string {
  return JSON.stringify(
    ClientCreateApiLogoUrisRequest$outboundSchema.parse(
      clientCreateApiLogoUrisRequest,
    ),
  );
}

export function clientCreateApiLogoUrisRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiLogoUrisRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiLogoUrisRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiLogoUrisRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiGrantTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiGrantTypeRequest
> = z.nativeEnum(ClientCreateApiGrantTypeRequest);

/** @internal */
export const ClientCreateApiGrantTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiGrantTypeRequest
> = ClientCreateApiGrantTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiGrantTypeRequest$ {
  /** @deprecated use `ClientCreateApiGrantTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiGrantTypeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiGrantTypeRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiGrantTypeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiResponseTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiResponseTypeRequest
> = z.nativeEnum(ClientCreateApiResponseTypeRequest);

/** @internal */
export const ClientCreateApiResponseTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiResponseTypeRequest
> = ClientCreateApiResponseTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiResponseTypeRequest$ {
  /** @deprecated use `ClientCreateApiResponseTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiResponseTypeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiResponseTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiResponseTypeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiAuthorizationSignAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationSignAlgRequest> = z
    .nativeEnum(ClientCreateApiAuthorizationSignAlgRequest);

/** @internal */
export const ClientCreateApiAuthorizationSignAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationSignAlgRequest> =
    ClientCreateApiAuthorizationSignAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAuthorizationSignAlgRequest$ {
  /** @deprecated use `ClientCreateApiAuthorizationSignAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiAuthorizationSignAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiAuthorizationSignAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiAuthorizationSignAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiAuthorizationEncryptionAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionAlgRequest> = z
    .nativeEnum(ClientCreateApiAuthorizationEncryptionAlgRequest);

/** @internal */
export const ClientCreateApiAuthorizationEncryptionAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionAlgRequest> =
    ClientCreateApiAuthorizationEncryptionAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAuthorizationEncryptionAlgRequest$ {
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiAuthorizationEncryptionAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiAuthorizationEncryptionAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiAuthorizationEncryptionEncRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionEncRequest> = z
    .nativeEnum(ClientCreateApiAuthorizationEncryptionEncRequest);

/** @internal */
export const ClientCreateApiAuthorizationEncryptionEncRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionEncRequest> =
    ClientCreateApiAuthorizationEncryptionEncRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAuthorizationEncryptionEncRequest$ {
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionEncRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiAuthorizationEncryptionEncRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionEncRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiAuthorizationEncryptionEncRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiTokenAuthMethodRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthMethodRequest> = z.nativeEnum(
    ClientCreateApiTokenAuthMethodRequest,
  );

/** @internal */
export const ClientCreateApiTokenAuthMethodRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthMethodRequest> =
    ClientCreateApiTokenAuthMethodRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiTokenAuthMethodRequest$ {
  /** @deprecated use `ClientCreateApiTokenAuthMethodRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiTokenAuthMethodRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiTokenAuthMethodRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiTokenAuthMethodRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiTokenAuthSignAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthSignAlgRequest> = z.nativeEnum(
    ClientCreateApiTokenAuthSignAlgRequest,
  );

/** @internal */
export const ClientCreateApiTokenAuthSignAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthSignAlgRequest> =
    ClientCreateApiTokenAuthSignAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiTokenAuthSignAlgRequest$ {
  /** @deprecated use `ClientCreateApiTokenAuthSignAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiTokenAuthSignAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiTokenAuthSignAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiTokenAuthSignAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestSignAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestSignAlgRequest> = z.nativeEnum(
    ClientCreateApiRequestSignAlgRequest,
  );

/** @internal */
export const ClientCreateApiRequestSignAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestSignAlgRequest> =
    ClientCreateApiRequestSignAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestSignAlgRequest$ {
  /** @deprecated use `ClientCreateApiRequestSignAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiRequestSignAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestSignAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiRequestSignAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestEncryptionAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionAlgRequest> = z
    .nativeEnum(ClientCreateApiRequestEncryptionAlgRequest);

/** @internal */
export const ClientCreateApiRequestEncryptionAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionAlgRequest> =
    ClientCreateApiRequestEncryptionAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestEncryptionAlgRequest$ {
  /** @deprecated use `ClientCreateApiRequestEncryptionAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiRequestEncryptionAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestEncryptionAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiRequestEncryptionAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestEncryptionEncRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionEncRequest> = z
    .nativeEnum(ClientCreateApiRequestEncryptionEncRequest);

/** @internal */
export const ClientCreateApiRequestEncryptionEncRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionEncRequest> =
    ClientCreateApiRequestEncryptionEncRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestEncryptionEncRequest$ {
  /** @deprecated use `ClientCreateApiRequestEncryptionEncRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiRequestEncryptionEncRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestEncryptionEncRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiRequestEncryptionEncRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiIdTokenSignAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenSignAlgRequest> = z.nativeEnum(
    ClientCreateApiIdTokenSignAlgRequest,
  );

/** @internal */
export const ClientCreateApiIdTokenSignAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenSignAlgRequest> =
    ClientCreateApiIdTokenSignAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiIdTokenSignAlgRequest$ {
  /** @deprecated use `ClientCreateApiIdTokenSignAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiIdTokenSignAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiIdTokenSignAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiIdTokenSignAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiIdTokenEncryptionAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionAlgRequest> = z
    .nativeEnum(ClientCreateApiIdTokenEncryptionAlgRequest);

/** @internal */
export const ClientCreateApiIdTokenEncryptionAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionAlgRequest> =
    ClientCreateApiIdTokenEncryptionAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiIdTokenEncryptionAlgRequest$ {
  /** @deprecated use `ClientCreateApiIdTokenEncryptionAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiIdTokenEncryptionAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiIdTokenEncryptionAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiIdTokenEncryptionAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiIdTokenEncryptionEncRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionEncRequest> = z
    .nativeEnum(ClientCreateApiIdTokenEncryptionEncRequest);

/** @internal */
export const ClientCreateApiIdTokenEncryptionEncRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionEncRequest> =
    ClientCreateApiIdTokenEncryptionEncRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiIdTokenEncryptionEncRequest$ {
  /** @deprecated use `ClientCreateApiIdTokenEncryptionEncRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiIdTokenEncryptionEncRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiIdTokenEncryptionEncRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiIdTokenEncryptionEncRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiSubjectTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiSubjectTypeRequest
> = z.nativeEnum(ClientCreateApiSubjectTypeRequest);

/** @internal */
export const ClientCreateApiSubjectTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiSubjectTypeRequest
> = ClientCreateApiSubjectTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiSubjectTypeRequest$ {
  /** @deprecated use `ClientCreateApiSubjectTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiSubjectTypeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiSubjectTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiSubjectTypeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiUserInfoSignAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoSignAlgRequest> = z.nativeEnum(
    ClientCreateApiUserInfoSignAlgRequest,
  );

/** @internal */
export const ClientCreateApiUserInfoSignAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoSignAlgRequest> =
    ClientCreateApiUserInfoSignAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUserInfoSignAlgRequest$ {
  /** @deprecated use `ClientCreateApiUserInfoSignAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiUserInfoSignAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiUserInfoSignAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiUserInfoSignAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiUserInfoEncryptionAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionAlgRequest> = z
    .nativeEnum(ClientCreateApiUserInfoEncryptionAlgRequest);

/** @internal */
export const ClientCreateApiUserInfoEncryptionAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionAlgRequest> =
    ClientCreateApiUserInfoEncryptionAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUserInfoEncryptionAlgRequest$ {
  /** @deprecated use `ClientCreateApiUserInfoEncryptionAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiUserInfoEncryptionAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiUserInfoEncryptionAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiUserInfoEncryptionAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiUserInfoEncryptionEncRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionEncRequest> = z
    .nativeEnum(ClientCreateApiUserInfoEncryptionEncRequest);

/** @internal */
export const ClientCreateApiUserInfoEncryptionEncRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionEncRequest> =
    ClientCreateApiUserInfoEncryptionEncRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUserInfoEncryptionEncRequest$ {
  /** @deprecated use `ClientCreateApiUserInfoEncryptionEncRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiUserInfoEncryptionEncRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiUserInfoEncryptionEncRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiUserInfoEncryptionEncRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiTosUrisRequest$inboundSchema: z.ZodType<
  ClientCreateApiTosUrisRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiTosUrisRequest$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiTosUrisRequest$outboundSchema: z.ZodType<
  ClientCreateApiTosUrisRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiTosUrisRequest
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiTosUrisRequest$ {
  /** @deprecated use `ClientCreateApiTosUrisRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiTosUrisRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiTosUrisRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiTosUrisRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiTosUrisRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiTosUrisRequest$Outbound;
}

export function clientCreateApiTosUrisRequestToJSON(
  clientCreateApiTosUrisRequest: ClientCreateApiTosUrisRequest,
): string {
  return JSON.stringify(
    ClientCreateApiTosUrisRequest$outboundSchema.parse(
      clientCreateApiTosUrisRequest,
    ),
  );
}

export function clientCreateApiTosUrisRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiTosUrisRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiTosUrisRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiTosUrisRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiPolicyUrisRequest$inboundSchema: z.ZodType<
  ClientCreateApiPolicyUrisRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiPolicyUrisRequest$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiPolicyUrisRequest$outboundSchema: z.ZodType<
  ClientCreateApiPolicyUrisRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiPolicyUrisRequest
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiPolicyUrisRequest$ {
  /** @deprecated use `ClientCreateApiPolicyUrisRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiPolicyUrisRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiPolicyUrisRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiPolicyUrisRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiPolicyUrisRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiPolicyUrisRequest$Outbound;
}

export function clientCreateApiPolicyUrisRequestToJSON(
  clientCreateApiPolicyUrisRequest: ClientCreateApiPolicyUrisRequest,
): string {
  return JSON.stringify(
    ClientCreateApiPolicyUrisRequest$outboundSchema.parse(
      clientCreateApiPolicyUrisRequest,
    ),
  );
}

export function clientCreateApiPolicyUrisRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiPolicyUrisRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiPolicyUrisRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiPolicyUrisRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientUrisRequest$inboundSchema: z.ZodType<
  ClientCreateApiClientUrisRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiClientUrisRequest$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiClientUrisRequest$outboundSchema: z.ZodType<
  ClientCreateApiClientUrisRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiClientUrisRequest
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientUrisRequest$ {
  /** @deprecated use `ClientCreateApiClientUrisRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiClientUrisRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiClientUrisRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiClientUrisRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiClientUrisRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiClientUrisRequest$Outbound;
}

export function clientCreateApiClientUrisRequestToJSON(
  clientCreateApiClientUrisRequest: ClientCreateApiClientUrisRequest,
): string {
  return JSON.stringify(
    ClientCreateApiClientUrisRequest$outboundSchema.parse(
      clientCreateApiClientUrisRequest,
    ),
  );
}

export function clientCreateApiClientUrisRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiClientUrisRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiClientUrisRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiClientUrisRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiBcRequestSignAlgRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiBcRequestSignAlgRequest> = z.nativeEnum(
    ClientCreateApiBcRequestSignAlgRequest,
  );

/** @internal */
export const ClientCreateApiBcRequestSignAlgRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiBcRequestSignAlgRequest> =
    ClientCreateApiBcRequestSignAlgRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiBcRequestSignAlgRequest$ {
  /** @deprecated use `ClientCreateApiBcRequestSignAlgRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiBcRequestSignAlgRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiBcRequestSignAlgRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiBcRequestSignAlgRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiAttributeRequest$inboundSchema: z.ZodType<
  ClientCreateApiAttributeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiAttributeRequest$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiAttributeRequest$outboundSchema: z.ZodType<
  ClientCreateApiAttributeRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiAttributeRequest
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAttributeRequest$ {
  /** @deprecated use `ClientCreateApiAttributeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiAttributeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiAttributeRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiAttributeRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiAttributeRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiAttributeRequest$Outbound;
}

export function clientCreateApiAttributeRequestToJSON(
  clientCreateApiAttributeRequest: ClientCreateApiAttributeRequest,
): string {
  return JSON.stringify(
    ClientCreateApiAttributeRequest$outboundSchema.parse(
      clientCreateApiAttributeRequest,
    ),
  );
}

export function clientCreateApiAttributeRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiAttributeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiAttributeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiAttributeRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiExtensionRequest$inboundSchema: z.ZodType<
  ClientCreateApiExtensionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/** @internal */
export type ClientCreateApiExtensionRequest$Outbound = {
  requestableScopes?: Array<string> | undefined;
  requestableScopesEnabled?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  tokenExchangePermitted?: boolean | undefined;
};

/** @internal */
export const ClientCreateApiExtensionRequest$outboundSchema: z.ZodType<
  ClientCreateApiExtensionRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiExtensionRequest
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiExtensionRequest$ {
  /** @deprecated use `ClientCreateApiExtensionRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiExtensionRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiExtensionRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiExtensionRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiExtensionRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiExtensionRequest$Outbound;
}

export function clientCreateApiExtensionRequestToJSON(
  clientCreateApiExtensionRequest: ClientCreateApiExtensionRequest,
): string {
  return JSON.stringify(
    ClientCreateApiExtensionRequest$outboundSchema.parse(
      clientCreateApiExtensionRequest,
    ),
  );
}

export function clientCreateApiExtensionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiExtensionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiExtensionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiExtensionRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientRegistrationTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiClientRegistrationTypeRequest> = z
    .nativeEnum(ClientCreateApiClientRegistrationTypeRequest);

/** @internal */
export const ClientCreateApiClientRegistrationTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiClientRegistrationTypeRequest> =
    ClientCreateApiClientRegistrationTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientRegistrationTypeRequest$ {
  /** @deprecated use `ClientCreateApiClientRegistrationTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiClientRegistrationTypeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiClientRegistrationTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiClientRegistrationTypeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiFapiModeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiFapiModeRequest
> = z.nativeEnum(ClientCreateApiFapiModeRequest);

/** @internal */
export const ClientCreateApiFapiModeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiFapiModeRequest
> = ClientCreateApiFapiModeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiFapiModeRequest$ {
  /** @deprecated use `ClientCreateApiFapiModeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiFapiModeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiFapiModeRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiFapiModeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiResponseModeRequest$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiResponseModeRequest
> = z.nativeEnum(ClientCreateApiResponseModeRequest);

/** @internal */
export const ClientCreateApiResponseModeRequest$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiResponseModeRequest
> = ClientCreateApiResponseModeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiResponseModeRequest$ {
  /** @deprecated use `ClientCreateApiResponseModeRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiResponseModeRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiResponseModeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiResponseModeRequest$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestBody$inboundSchema: z.ZodType<
  ClientCreateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => ClientCreateApiClientNameRequest$inboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientCreateApiDescriptionRequest$inboundSchema),
  ).optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientCreateApiClientTypeRequest$inboundSchema.optional(),
  applicationType: ClientCreateApiApplicationTypeRequest$inboundSchema
    .optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientCreateApiLogoUrisRequest$inboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  grantTypes: z.array(ClientCreateApiGrantTypeRequest$inboundSchema).optional(),
  responseTypes: z.array(ClientCreateApiResponseTypeRequest$inboundSchema)
    .optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg: ClientCreateApiAuthorizationSignAlgRequest$inboundSchema
    .optional(),
  authorizationEncryptionAlg:
    ClientCreateApiAuthorizationEncryptionAlgRequest$inboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientCreateApiAuthorizationEncryptionEncRequest$inboundSchema.optional(),
  tokenAuthMethod: ClientCreateApiTokenAuthMethodRequest$inboundSchema
    .optional(),
  tokenAuthSignAlg: ClientCreateApiTokenAuthSignAlgRequest$inboundSchema
    .optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientCreateApiRequestSignAlgRequest$inboundSchema.optional(),
  requestEncryptionAlg: ClientCreateApiRequestEncryptionAlgRequest$inboundSchema
    .optional(),
  requestEncryptionEnc: ClientCreateApiRequestEncryptionEncRequest$inboundSchema
    .optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientCreateApiIdTokenSignAlgRequest$inboundSchema.optional(),
  idTokenEncryptionAlg: ClientCreateApiIdTokenEncryptionAlgRequest$inboundSchema
    .optional(),
  idTokenEncryptionEnc: ClientCreateApiIdTokenEncryptionEncRequest$inboundSchema
    .optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientCreateApiSubjectTypeRequest$inboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientCreateApiUserInfoSignAlgRequest$inboundSchema
    .optional(),
  userInfoEncryptionAlg:
    ClientCreateApiUserInfoEncryptionAlgRequest$inboundSchema.optional(),
  userInfoEncryptionEnc:
    ClientCreateApiUserInfoEncryptionEncRequest$inboundSchema.optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientCreateApiTosUrisRequest$inboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => ClientCreateApiPolicyUrisRequest$inboundSchema),
  ).optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(
    z.lazy(() => ClientCreateApiClientUrisRequest$inboundSchema),
  ).optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientCreateApiBcRequestSignAlgRequest$inboundSchema
    .optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(
    z.lazy(() => ClientCreateApiAttributeRequest$inboundSchema),
  ).optional(),
  extension: z.lazy(() => ClientCreateApiExtensionRequest$inboundSchema)
    .optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientCreateApiClientRegistrationTypeRequest$inboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientCreateApiFapiModeRequest$inboundSchema).optional(),
  responseModes: z.array(ClientCreateApiResponseModeRequest$inboundSchema)
    .optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/** @internal */
export type ClientCreateApiRequestBody$Outbound = {
  clientName?: string | undefined;
  clientNames?: Array<ClientCreateApiClientNameRequest$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<ClientCreateApiDescriptionRequest$Outbound> | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  applicationType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<ClientCreateApiLogoUrisRequest$Outbound> | undefined;
  contacts?: Array<string> | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  softwareId?: string | undefined;
  softwareVersion?: string | undefined;
  registrationAccessTokenHash?: string | undefined;
  grantTypes?: Array<string> | undefined;
  responseTypes?: Array<string> | undefined;
  redirectUris?: Array<string> | undefined;
  authorizationSignAlg?: string | undefined;
  authorizationEncryptionAlg?: string | undefined;
  authorizationEncryptionEnc?: string | undefined;
  tokenAuthMethod?: string | undefined;
  tokenAuthSignAlg?: string | undefined;
  selfSignedCertificateKeyId?: string | undefined;
  tlsClientAuthSubjectDn?: string | undefined;
  tlsClientAuthSanDns?: string | undefined;
  tlsClientAuthSanUri?: string | undefined;
  tlsClientAuthSanIp?: string | undefined;
  tlsClientAuthSanEmail?: string | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  requestSignAlg?: string | undefined;
  requestEncryptionAlg?: string | undefined;
  requestEncryptionEnc?: string | undefined;
  requestUris?: Array<string> | undefined;
  defaultMaxAge?: number | undefined;
  defaultAcrs?: Array<string> | undefined;
  idTokenSignAlg?: string | undefined;
  idTokenEncryptionAlg?: string | undefined;
  idTokenEncryptionEnc?: string | undefined;
  authTimeRequired?: boolean | undefined;
  subjectType?: string | undefined;
  sectorIdentifierUri?: string | undefined;
  jwksUri?: string | undefined;
  jwks?: string | undefined;
  userInfoSignAlg?: string | undefined;
  userInfoEncryptionAlg?: string | undefined;
  userInfoEncryptionEnc?: string | undefined;
  loginUri?: string | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<ClientCreateApiTosUrisRequest$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?: Array<ClientCreateApiPolicyUrisRequest$Outbound> | undefined;
  clientUri?: string | undefined;
  clientUris?: Array<ClientCreateApiClientUrisRequest$Outbound> | undefined;
  bcDeliveryMode?: string | undefined;
  bcNotificationEndpoint?: string | undefined;
  bcRequestSignAlg?: string | undefined;
  bcUserCodeRequired?: boolean | undefined;
  attributes?: Array<ClientCreateApiAttributeRequest$Outbound> | undefined;
  extension?: ClientCreateApiExtensionRequest$Outbound | undefined;
  authorizationDetailsTypes?: Array<string> | undefined;
  customMetadata?: string | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  digestAlgorithm?: string | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  dpopRequired?: boolean | undefined;
  automaticallyRegistered?: boolean | undefined;
  explicitlyRegistered?: boolean | undefined;
  rsRequestSigned?: boolean | undefined;
  rsSignedRequestKeyId?: string | undefined;
  clientRegistrationTypes?: Array<string> | undefined;
  organizationName?: string | undefined;
  signedJwksUri?: string | undefined;
  entityId?: string | undefined;
  trustAnchorId?: string | undefined;
  trustChain?: Array<string> | undefined;
  trustChainExpiresAt?: number | undefined;
  trustChainUpdatedAt?: number | undefined;
  locked?: boolean | undefined;
  credentialOfferEndpoint?: string | undefined;
  fapiModes?: Array<string> | undefined;
  responseModes?: Array<string> | undefined;
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const ClientCreateApiRequestBody$outboundSchema: z.ZodType<
  ClientCreateApiRequestBody$Outbound,
  z.ZodTypeDef,
  ClientCreateApiRequestBody
> = z.object({
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => ClientCreateApiClientNameRequest$outboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientCreateApiDescriptionRequest$outboundSchema),
  ).optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientCreateApiClientTypeRequest$outboundSchema.optional(),
  applicationType: ClientCreateApiApplicationTypeRequest$outboundSchema
    .optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientCreateApiLogoUrisRequest$outboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  grantTypes: z.array(ClientCreateApiGrantTypeRequest$outboundSchema)
    .optional(),
  responseTypes: z.array(ClientCreateApiResponseTypeRequest$outboundSchema)
    .optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg:
    ClientCreateApiAuthorizationSignAlgRequest$outboundSchema.optional(),
  authorizationEncryptionAlg:
    ClientCreateApiAuthorizationEncryptionAlgRequest$outboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientCreateApiAuthorizationEncryptionEncRequest$outboundSchema.optional(),
  tokenAuthMethod: ClientCreateApiTokenAuthMethodRequest$outboundSchema
    .optional(),
  tokenAuthSignAlg: ClientCreateApiTokenAuthSignAlgRequest$outboundSchema
    .optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientCreateApiRequestSignAlgRequest$outboundSchema
    .optional(),
  requestEncryptionAlg:
    ClientCreateApiRequestEncryptionAlgRequest$outboundSchema.optional(),
  requestEncryptionEnc:
    ClientCreateApiRequestEncryptionEncRequest$outboundSchema.optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientCreateApiIdTokenSignAlgRequest$outboundSchema
    .optional(),
  idTokenEncryptionAlg:
    ClientCreateApiIdTokenEncryptionAlgRequest$outboundSchema.optional(),
  idTokenEncryptionEnc:
    ClientCreateApiIdTokenEncryptionEncRequest$outboundSchema.optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientCreateApiSubjectTypeRequest$outboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientCreateApiUserInfoSignAlgRequest$outboundSchema
    .optional(),
  userInfoEncryptionAlg:
    ClientCreateApiUserInfoEncryptionAlgRequest$outboundSchema.optional(),
  userInfoEncryptionEnc:
    ClientCreateApiUserInfoEncryptionEncRequest$outboundSchema.optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientCreateApiTosUrisRequest$outboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => ClientCreateApiPolicyUrisRequest$outboundSchema),
  ).optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(
    z.lazy(() => ClientCreateApiClientUrisRequest$outboundSchema),
  ).optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientCreateApiBcRequestSignAlgRequest$outboundSchema
    .optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(
    z.lazy(() => ClientCreateApiAttributeRequest$outboundSchema),
  ).optional(),
  extension: z.lazy(() => ClientCreateApiExtensionRequest$outboundSchema)
    .optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientCreateApiClientRegistrationTypeRequest$outboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientCreateApiFapiModeRequest$outboundSchema).optional(),
  responseModes: z.array(ClientCreateApiResponseModeRequest$outboundSchema)
    .optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestBody$ {
  /** @deprecated use `ClientCreateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiRequestBody$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiRequestBody$outboundSchema;
  /** @deprecated use `ClientCreateApiRequestBody$Outbound` instead. */
  export type Outbound = ClientCreateApiRequestBody$Outbound;
}

export function clientCreateApiRequestBodyToJSON(
  clientCreateApiRequestBody: ClientCreateApiRequestBody,
): string {
  return JSON.stringify(
    ClientCreateApiRequestBody$outboundSchema.parse(clientCreateApiRequestBody),
  );
}

export function clientCreateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiRequest$inboundSchema: z.ZodType<
  ClientCreateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => ClientCreateApiRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ClientCreateApiRequest$Outbound = {
  serviceId: string;
  RequestBody?: ClientCreateApiRequestBody$Outbound | undefined;
};

/** @internal */
export const ClientCreateApiRequest$outboundSchema: z.ZodType<
  ClientCreateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientCreateApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => ClientCreateApiRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequest$ {
  /** @deprecated use `ClientCreateApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiRequest$inboundSchema;
  /** @deprecated use `ClientCreateApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiRequest$outboundSchema;
  /** @deprecated use `ClientCreateApiRequest$Outbound` instead. */
  export type Outbound = ClientCreateApiRequest$Outbound;
}

export function clientCreateApiRequestToJSON(
  clientCreateApiRequest: ClientCreateApiRequest,
): string {
  return JSON.stringify(
    ClientCreateApiRequest$outboundSchema.parse(clientCreateApiRequest),
  );
}

export function clientCreateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientNameResponse$inboundSchema: z.ZodType<
  ClientCreateApiClientNameResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiClientNameResponse$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiClientNameResponse$outboundSchema: z.ZodType<
  ClientCreateApiClientNameResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiClientNameResponse
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientNameResponse$ {
  /** @deprecated use `ClientCreateApiClientNameResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiClientNameResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiClientNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiClientNameResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiClientNameResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiClientNameResponse$Outbound;
}

export function clientCreateApiClientNameResponseToJSON(
  clientCreateApiClientNameResponse: ClientCreateApiClientNameResponse,
): string {
  return JSON.stringify(
    ClientCreateApiClientNameResponse$outboundSchema.parse(
      clientCreateApiClientNameResponse,
    ),
  );
}

export function clientCreateApiClientNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiClientNameResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiClientNameResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiClientNameResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiDescriptionResponse$inboundSchema: z.ZodType<
  ClientCreateApiDescriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiDescriptionResponse$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiDescriptionResponse$outboundSchema: z.ZodType<
  ClientCreateApiDescriptionResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiDescriptionResponse
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiDescriptionResponse$ {
  /** @deprecated use `ClientCreateApiDescriptionResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiDescriptionResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiDescriptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiDescriptionResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiDescriptionResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiDescriptionResponse$Outbound;
}

export function clientCreateApiDescriptionResponseToJSON(
  clientCreateApiDescriptionResponse: ClientCreateApiDescriptionResponse,
): string {
  return JSON.stringify(
    ClientCreateApiDescriptionResponse$outboundSchema.parse(
      clientCreateApiDescriptionResponse,
    ),
  );
}

export function clientCreateApiDescriptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiDescriptionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientCreateApiDescriptionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiDescriptionResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiClientTypeResponse
> = z.nativeEnum(ClientCreateApiClientTypeResponse);

/** @internal */
export const ClientCreateApiClientTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiClientTypeResponse
> = ClientCreateApiClientTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientTypeResponse$ {
  /** @deprecated use `ClientCreateApiClientTypeResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiClientTypeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiClientTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiClientTypeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiApplicationTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiApplicationTypeResponse> = z.nativeEnum(
    ClientCreateApiApplicationTypeResponse,
  );

/** @internal */
export const ClientCreateApiApplicationTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiApplicationTypeResponse> =
    ClientCreateApiApplicationTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiApplicationTypeResponse$ {
  /** @deprecated use `ClientCreateApiApplicationTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiApplicationTypeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiApplicationTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiApplicationTypeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiLogoUrisResponse$inboundSchema: z.ZodType<
  ClientCreateApiLogoUrisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiLogoUrisResponse$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiLogoUrisResponse$outboundSchema: z.ZodType<
  ClientCreateApiLogoUrisResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiLogoUrisResponse
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiLogoUrisResponse$ {
  /** @deprecated use `ClientCreateApiLogoUrisResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiLogoUrisResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiLogoUrisResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiLogoUrisResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiLogoUrisResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiLogoUrisResponse$Outbound;
}

export function clientCreateApiLogoUrisResponseToJSON(
  clientCreateApiLogoUrisResponse: ClientCreateApiLogoUrisResponse,
): string {
  return JSON.stringify(
    ClientCreateApiLogoUrisResponse$outboundSchema.parse(
      clientCreateApiLogoUrisResponse,
    ),
  );
}

export function clientCreateApiLogoUrisResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiLogoUrisResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiLogoUrisResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiLogoUrisResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiGrantTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiGrantTypeResponse
> = z.nativeEnum(ClientCreateApiGrantTypeResponse);

/** @internal */
export const ClientCreateApiGrantTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiGrantTypeResponse
> = ClientCreateApiGrantTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiGrantTypeResponse$ {
  /** @deprecated use `ClientCreateApiGrantTypeResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiGrantTypeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiGrantTypeResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiGrantTypeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiResponseTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiResponseTypeResponse
> = z.nativeEnum(ClientCreateApiResponseTypeResponse);

/** @internal */
export const ClientCreateApiResponseTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiResponseTypeResponse> =
    ClientCreateApiResponseTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiResponseTypeResponse$ {
  /** @deprecated use `ClientCreateApiResponseTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiResponseTypeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiResponseTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiResponseTypeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiAuthorizationSignAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationSignAlgResponse> = z
    .nativeEnum(ClientCreateApiAuthorizationSignAlgResponse);

/** @internal */
export const ClientCreateApiAuthorizationSignAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationSignAlgResponse> =
    ClientCreateApiAuthorizationSignAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAuthorizationSignAlgResponse$ {
  /** @deprecated use `ClientCreateApiAuthorizationSignAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiAuthorizationSignAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiAuthorizationSignAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiAuthorizationSignAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiAuthorizationEncryptionAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionAlgResponse> = z
    .nativeEnum(ClientCreateApiAuthorizationEncryptionAlgResponse);

/** @internal */
export const ClientCreateApiAuthorizationEncryptionAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionAlgResponse> =
    ClientCreateApiAuthorizationEncryptionAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAuthorizationEncryptionAlgResponse$ {
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiAuthorizationEncryptionAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiAuthorizationEncryptionAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiAuthorizationEncryptionEncResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionEncResponse> = z
    .nativeEnum(ClientCreateApiAuthorizationEncryptionEncResponse);

/** @internal */
export const ClientCreateApiAuthorizationEncryptionEncResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiAuthorizationEncryptionEncResponse> =
    ClientCreateApiAuthorizationEncryptionEncResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAuthorizationEncryptionEncResponse$ {
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionEncResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiAuthorizationEncryptionEncResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiAuthorizationEncryptionEncResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiAuthorizationEncryptionEncResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiTokenAuthMethodResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthMethodResponse> = z.nativeEnum(
    ClientCreateApiTokenAuthMethodResponse,
  );

/** @internal */
export const ClientCreateApiTokenAuthMethodResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthMethodResponse> =
    ClientCreateApiTokenAuthMethodResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiTokenAuthMethodResponse$ {
  /** @deprecated use `ClientCreateApiTokenAuthMethodResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiTokenAuthMethodResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiTokenAuthMethodResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiTokenAuthMethodResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiTokenAuthSignAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthSignAlgResponse> = z
    .nativeEnum(ClientCreateApiTokenAuthSignAlgResponse);

/** @internal */
export const ClientCreateApiTokenAuthSignAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiTokenAuthSignAlgResponse> =
    ClientCreateApiTokenAuthSignAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiTokenAuthSignAlgResponse$ {
  /** @deprecated use `ClientCreateApiTokenAuthSignAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiTokenAuthSignAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiTokenAuthSignAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiTokenAuthSignAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestSignAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestSignAlgResponse> = z.nativeEnum(
    ClientCreateApiRequestSignAlgResponse,
  );

/** @internal */
export const ClientCreateApiRequestSignAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestSignAlgResponse> =
    ClientCreateApiRequestSignAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestSignAlgResponse$ {
  /** @deprecated use `ClientCreateApiRequestSignAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiRequestSignAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestSignAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiRequestSignAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestEncryptionAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionAlgResponse> = z
    .nativeEnum(ClientCreateApiRequestEncryptionAlgResponse);

/** @internal */
export const ClientCreateApiRequestEncryptionAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionAlgResponse> =
    ClientCreateApiRequestEncryptionAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestEncryptionAlgResponse$ {
  /** @deprecated use `ClientCreateApiRequestEncryptionAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiRequestEncryptionAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestEncryptionAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiRequestEncryptionAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiRequestEncryptionEncResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionEncResponse> = z
    .nativeEnum(ClientCreateApiRequestEncryptionEncResponse);

/** @internal */
export const ClientCreateApiRequestEncryptionEncResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiRequestEncryptionEncResponse> =
    ClientCreateApiRequestEncryptionEncResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiRequestEncryptionEncResponse$ {
  /** @deprecated use `ClientCreateApiRequestEncryptionEncResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiRequestEncryptionEncResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiRequestEncryptionEncResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiRequestEncryptionEncResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiIdTokenSignAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenSignAlgResponse> = z.nativeEnum(
    ClientCreateApiIdTokenSignAlgResponse,
  );

/** @internal */
export const ClientCreateApiIdTokenSignAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenSignAlgResponse> =
    ClientCreateApiIdTokenSignAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiIdTokenSignAlgResponse$ {
  /** @deprecated use `ClientCreateApiIdTokenSignAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiIdTokenSignAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiIdTokenSignAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiIdTokenSignAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiIdTokenEncryptionAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionAlgResponse> = z
    .nativeEnum(ClientCreateApiIdTokenEncryptionAlgResponse);

/** @internal */
export const ClientCreateApiIdTokenEncryptionAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionAlgResponse> =
    ClientCreateApiIdTokenEncryptionAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiIdTokenEncryptionAlgResponse$ {
  /** @deprecated use `ClientCreateApiIdTokenEncryptionAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiIdTokenEncryptionAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiIdTokenEncryptionAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiIdTokenEncryptionAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiIdTokenEncryptionEncResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionEncResponse> = z
    .nativeEnum(ClientCreateApiIdTokenEncryptionEncResponse);

/** @internal */
export const ClientCreateApiIdTokenEncryptionEncResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiIdTokenEncryptionEncResponse> =
    ClientCreateApiIdTokenEncryptionEncResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiIdTokenEncryptionEncResponse$ {
  /** @deprecated use `ClientCreateApiIdTokenEncryptionEncResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiIdTokenEncryptionEncResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiIdTokenEncryptionEncResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiIdTokenEncryptionEncResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiSubjectTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiSubjectTypeResponse
> = z.nativeEnum(ClientCreateApiSubjectTypeResponse);

/** @internal */
export const ClientCreateApiSubjectTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiSubjectTypeResponse
> = ClientCreateApiSubjectTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiSubjectTypeResponse$ {
  /** @deprecated use `ClientCreateApiSubjectTypeResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiSubjectTypeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiSubjectTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiSubjectTypeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiUserInfoSignAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoSignAlgResponse> = z.nativeEnum(
    ClientCreateApiUserInfoSignAlgResponse,
  );

/** @internal */
export const ClientCreateApiUserInfoSignAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoSignAlgResponse> =
    ClientCreateApiUserInfoSignAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUserInfoSignAlgResponse$ {
  /** @deprecated use `ClientCreateApiUserInfoSignAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiUserInfoSignAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiUserInfoSignAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiUserInfoSignAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiUserInfoEncryptionAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionAlgResponse> = z
    .nativeEnum(ClientCreateApiUserInfoEncryptionAlgResponse);

/** @internal */
export const ClientCreateApiUserInfoEncryptionAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionAlgResponse> =
    ClientCreateApiUserInfoEncryptionAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUserInfoEncryptionAlgResponse$ {
  /** @deprecated use `ClientCreateApiUserInfoEncryptionAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiUserInfoEncryptionAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiUserInfoEncryptionAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiUserInfoEncryptionAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiUserInfoEncryptionEncResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionEncResponse> = z
    .nativeEnum(ClientCreateApiUserInfoEncryptionEncResponse);

/** @internal */
export const ClientCreateApiUserInfoEncryptionEncResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiUserInfoEncryptionEncResponse> =
    ClientCreateApiUserInfoEncryptionEncResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUserInfoEncryptionEncResponse$ {
  /** @deprecated use `ClientCreateApiUserInfoEncryptionEncResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiUserInfoEncryptionEncResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiUserInfoEncryptionEncResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiUserInfoEncryptionEncResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiTosUrisResponse$inboundSchema: z.ZodType<
  ClientCreateApiTosUrisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiTosUrisResponse$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiTosUrisResponse$outboundSchema: z.ZodType<
  ClientCreateApiTosUrisResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiTosUrisResponse
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiTosUrisResponse$ {
  /** @deprecated use `ClientCreateApiTosUrisResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiTosUrisResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiTosUrisResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiTosUrisResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiTosUrisResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiTosUrisResponse$Outbound;
}

export function clientCreateApiTosUrisResponseToJSON(
  clientCreateApiTosUrisResponse: ClientCreateApiTosUrisResponse,
): string {
  return JSON.stringify(
    ClientCreateApiTosUrisResponse$outboundSchema.parse(
      clientCreateApiTosUrisResponse,
    ),
  );
}

export function clientCreateApiTosUrisResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiTosUrisResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiTosUrisResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiTosUrisResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiPolicyUrisResponse$inboundSchema: z.ZodType<
  ClientCreateApiPolicyUrisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiPolicyUrisResponse$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiPolicyUrisResponse$outboundSchema: z.ZodType<
  ClientCreateApiPolicyUrisResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiPolicyUrisResponse
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiPolicyUrisResponse$ {
  /** @deprecated use `ClientCreateApiPolicyUrisResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiPolicyUrisResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiPolicyUrisResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiPolicyUrisResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiPolicyUrisResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiPolicyUrisResponse$Outbound;
}

export function clientCreateApiPolicyUrisResponseToJSON(
  clientCreateApiPolicyUrisResponse: ClientCreateApiPolicyUrisResponse,
): string {
  return JSON.stringify(
    ClientCreateApiPolicyUrisResponse$outboundSchema.parse(
      clientCreateApiPolicyUrisResponse,
    ),
  );
}

export function clientCreateApiPolicyUrisResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiPolicyUrisResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiPolicyUrisResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiPolicyUrisResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientUrisResponse$inboundSchema: z.ZodType<
  ClientCreateApiClientUrisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiClientUrisResponse$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiClientUrisResponse$outboundSchema: z.ZodType<
  ClientCreateApiClientUrisResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiClientUrisResponse
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientUrisResponse$ {
  /** @deprecated use `ClientCreateApiClientUrisResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiClientUrisResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiClientUrisResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiClientUrisResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiClientUrisResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiClientUrisResponse$Outbound;
}

export function clientCreateApiClientUrisResponseToJSON(
  clientCreateApiClientUrisResponse: ClientCreateApiClientUrisResponse,
): string {
  return JSON.stringify(
    ClientCreateApiClientUrisResponse$outboundSchema.parse(
      clientCreateApiClientUrisResponse,
    ),
  );
}

export function clientCreateApiClientUrisResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiClientUrisResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiClientUrisResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiClientUrisResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiBcRequestSignAlgResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiBcRequestSignAlgResponse> = z
    .nativeEnum(ClientCreateApiBcRequestSignAlgResponse);

/** @internal */
export const ClientCreateApiBcRequestSignAlgResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiBcRequestSignAlgResponse> =
    ClientCreateApiBcRequestSignAlgResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiBcRequestSignAlgResponse$ {
  /** @deprecated use `ClientCreateApiBcRequestSignAlgResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiBcRequestSignAlgResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiBcRequestSignAlgResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiBcRequestSignAlgResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiAttributeResponse$inboundSchema: z.ZodType<
  ClientCreateApiAttributeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientCreateApiAttributeResponse$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientCreateApiAttributeResponse$outboundSchema: z.ZodType<
  ClientCreateApiAttributeResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiAttributeResponse
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiAttributeResponse$ {
  /** @deprecated use `ClientCreateApiAttributeResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiAttributeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiAttributeResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiAttributeResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiAttributeResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiAttributeResponse$Outbound;
}

export function clientCreateApiAttributeResponseToJSON(
  clientCreateApiAttributeResponse: ClientCreateApiAttributeResponse,
): string {
  return JSON.stringify(
    ClientCreateApiAttributeResponse$outboundSchema.parse(
      clientCreateApiAttributeResponse,
    ),
  );
}

export function clientCreateApiAttributeResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiAttributeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiAttributeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiAttributeResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiExtensionResponse$inboundSchema: z.ZodType<
  ClientCreateApiExtensionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/** @internal */
export type ClientCreateApiExtensionResponse$Outbound = {
  requestableScopes?: Array<string> | undefined;
  requestableScopesEnabled?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  tokenExchangePermitted?: boolean | undefined;
};

/** @internal */
export const ClientCreateApiExtensionResponse$outboundSchema: z.ZodType<
  ClientCreateApiExtensionResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiExtensionResponse
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiExtensionResponse$ {
  /** @deprecated use `ClientCreateApiExtensionResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiExtensionResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiExtensionResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiExtensionResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiExtensionResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiExtensionResponse$Outbound;
}

export function clientCreateApiExtensionResponseToJSON(
  clientCreateApiExtensionResponse: ClientCreateApiExtensionResponse,
): string {
  return JSON.stringify(
    ClientCreateApiExtensionResponse$outboundSchema.parse(
      clientCreateApiExtensionResponse,
    ),
  );
}

export function clientCreateApiExtensionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiExtensionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiExtensionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiExtensionResponse' from JSON`,
  );
}

/** @internal */
export const ClientCreateApiClientRegistrationTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiClientRegistrationTypeResponse> = z
    .nativeEnum(ClientCreateApiClientRegistrationTypeResponse);

/** @internal */
export const ClientCreateApiClientRegistrationTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiClientRegistrationTypeResponse> =
    ClientCreateApiClientRegistrationTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiClientRegistrationTypeResponse$ {
  /** @deprecated use `ClientCreateApiClientRegistrationTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiClientRegistrationTypeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiClientRegistrationTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiClientRegistrationTypeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiFapiModeResponse$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiFapiModeResponse
> = z.nativeEnum(ClientCreateApiFapiModeResponse);

/** @internal */
export const ClientCreateApiFapiModeResponse$outboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiFapiModeResponse
> = ClientCreateApiFapiModeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiFapiModeResponse$ {
  /** @deprecated use `ClientCreateApiFapiModeResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiFapiModeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiFapiModeResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiFapiModeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiResponseModeResponse$inboundSchema: z.ZodNativeEnum<
  typeof ClientCreateApiResponseModeResponse
> = z.nativeEnum(ClientCreateApiResponseModeResponse);

/** @internal */
export const ClientCreateApiResponseModeResponse$outboundSchema:
  z.ZodNativeEnum<typeof ClientCreateApiResponseModeResponse> =
    ClientCreateApiResponseModeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiResponseModeResponse$ {
  /** @deprecated use `ClientCreateApiResponseModeResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientCreateApiResponseModeResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiResponseModeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiResponseModeResponse$outboundSchema;
}

/** @internal */
export const ClientCreateApiResponse$inboundSchema: z.ZodType<
  ClientCreateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => ClientCreateApiClientNameResponse$inboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientCreateApiDescriptionResponse$inboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientCreateApiClientTypeResponse$inboundSchema.optional(),
  applicationType: ClientCreateApiApplicationTypeResponse$inboundSchema
    .optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientCreateApiLogoUrisResponse$inboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(ClientCreateApiGrantTypeResponse$inboundSchema)
    .optional(),
  responseTypes: z.array(ClientCreateApiResponseTypeResponse$inboundSchema)
    .optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg:
    ClientCreateApiAuthorizationSignAlgResponse$inboundSchema.optional(),
  authorizationEncryptionAlg:
    ClientCreateApiAuthorizationEncryptionAlgResponse$inboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientCreateApiAuthorizationEncryptionEncResponse$inboundSchema.optional(),
  tokenAuthMethod: ClientCreateApiTokenAuthMethodResponse$inboundSchema
    .optional(),
  tokenAuthSignAlg: ClientCreateApiTokenAuthSignAlgResponse$inboundSchema
    .optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientCreateApiRequestSignAlgResponse$inboundSchema
    .optional(),
  requestEncryptionAlg:
    ClientCreateApiRequestEncryptionAlgResponse$inboundSchema.optional(),
  requestEncryptionEnc:
    ClientCreateApiRequestEncryptionEncResponse$inboundSchema.optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientCreateApiIdTokenSignAlgResponse$inboundSchema
    .optional(),
  idTokenEncryptionAlg:
    ClientCreateApiIdTokenEncryptionAlgResponse$inboundSchema.optional(),
  idTokenEncryptionEnc:
    ClientCreateApiIdTokenEncryptionEncResponse$inboundSchema.optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientCreateApiSubjectTypeResponse$inboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientCreateApiUserInfoSignAlgResponse$inboundSchema
    .optional(),
  userInfoEncryptionAlg:
    ClientCreateApiUserInfoEncryptionAlgResponse$inboundSchema.optional(),
  userInfoEncryptionEnc:
    ClientCreateApiUserInfoEncryptionEncResponse$inboundSchema.optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientCreateApiTosUrisResponse$inboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => ClientCreateApiPolicyUrisResponse$inboundSchema),
  ).optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(
    z.lazy(() => ClientCreateApiClientUrisResponse$inboundSchema),
  ).optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientCreateApiBcRequestSignAlgResponse$inboundSchema
    .optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(
    z.lazy(() => ClientCreateApiAttributeResponse$inboundSchema),
  ).optional(),
  extension: z.lazy(() => ClientCreateApiExtensionResponse$inboundSchema)
    .optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientCreateApiClientRegistrationTypeResponse$inboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientCreateApiFapiModeResponse$inboundSchema).optional(),
  responseModes: z.array(ClientCreateApiResponseModeResponse$inboundSchema)
    .optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/** @internal */
export type ClientCreateApiResponse$Outbound = {
  number?: number | undefined;
  serviceNumber?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<ClientCreateApiClientNameResponse$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<ClientCreateApiDescriptionResponse$Outbound> | undefined;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  applicationType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<ClientCreateApiLogoUrisResponse$Outbound> | undefined;
  contacts?: Array<string> | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  dynamicallyRegistered?: boolean | undefined;
  softwareId?: string | undefined;
  softwareVersion?: string | undefined;
  registrationAccessTokenHash?: string | undefined;
  createdAt?: number | undefined;
  modifiedAt?: number | undefined;
  grantTypes?: Array<string> | undefined;
  responseTypes?: Array<string> | undefined;
  redirectUris?: Array<string> | undefined;
  authorizationSignAlg?: string | undefined;
  authorizationEncryptionAlg?: string | undefined;
  authorizationEncryptionEnc?: string | undefined;
  tokenAuthMethod?: string | undefined;
  tokenAuthSignAlg?: string | undefined;
  selfSignedCertificateKeyId?: string | undefined;
  tlsClientAuthSubjectDn?: string | undefined;
  tlsClientAuthSanDns?: string | undefined;
  tlsClientAuthSanUri?: string | undefined;
  tlsClientAuthSanIp?: string | undefined;
  tlsClientAuthSanEmail?: string | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  requestSignAlg?: string | undefined;
  requestEncryptionAlg?: string | undefined;
  requestEncryptionEnc?: string | undefined;
  requestUris?: Array<string> | undefined;
  defaultMaxAge?: number | undefined;
  defaultAcrs?: Array<string> | undefined;
  idTokenSignAlg?: string | undefined;
  idTokenEncryptionAlg?: string | undefined;
  idTokenEncryptionEnc?: string | undefined;
  authTimeRequired?: boolean | undefined;
  subjectType?: string | undefined;
  sectorIdentifierUri?: string | undefined;
  derivedSectorIdentifier?: string | undefined;
  jwksUri?: string | undefined;
  jwks?: string | undefined;
  userInfoSignAlg?: string | undefined;
  userInfoEncryptionAlg?: string | undefined;
  userInfoEncryptionEnc?: string | undefined;
  loginUri?: string | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<ClientCreateApiTosUrisResponse$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?: Array<ClientCreateApiPolicyUrisResponse$Outbound> | undefined;
  clientUri?: string | undefined;
  clientUris?: Array<ClientCreateApiClientUrisResponse$Outbound> | undefined;
  bcDeliveryMode?: string | undefined;
  bcNotificationEndpoint?: string | undefined;
  bcRequestSignAlg?: string | undefined;
  bcUserCodeRequired?: boolean | undefined;
  attributes?: Array<ClientCreateApiAttributeResponse$Outbound> | undefined;
  extension?: ClientCreateApiExtensionResponse$Outbound | undefined;
  authorizationDetailsTypes?: Array<string> | undefined;
  customMetadata?: string | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  digestAlgorithm?: string | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  dpopRequired?: boolean | undefined;
  automaticallyRegistered?: boolean | undefined;
  explicitlyRegistered?: boolean | undefined;
  rsRequestSigned?: boolean | undefined;
  rsSignedRequestKeyId?: string | undefined;
  clientRegistrationTypes?: Array<string> | undefined;
  organizationName?: string | undefined;
  signedJwksUri?: string | undefined;
  entityId?: string | undefined;
  trustAnchorId?: string | undefined;
  trustChain?: Array<string> | undefined;
  trustChainExpiresAt?: number | undefined;
  trustChainUpdatedAt?: number | undefined;
  locked?: boolean | undefined;
  credentialOfferEndpoint?: string | undefined;
  fapiModes?: Array<string> | undefined;
  responseModes?: Array<string> | undefined;
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const ClientCreateApiResponse$outboundSchema: z.ZodType<
  ClientCreateApiResponse$Outbound,
  z.ZodTypeDef,
  ClientCreateApiResponse
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => ClientCreateApiClientNameResponse$outboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientCreateApiDescriptionResponse$outboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientCreateApiClientTypeResponse$outboundSchema.optional(),
  applicationType: ClientCreateApiApplicationTypeResponse$outboundSchema
    .optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(
    z.lazy(() => ClientCreateApiLogoUrisResponse$outboundSchema),
  ).optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(ClientCreateApiGrantTypeResponse$outboundSchema)
    .optional(),
  responseTypes: z.array(ClientCreateApiResponseTypeResponse$outboundSchema)
    .optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg:
    ClientCreateApiAuthorizationSignAlgResponse$outboundSchema.optional(),
  authorizationEncryptionAlg:
    ClientCreateApiAuthorizationEncryptionAlgResponse$outboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientCreateApiAuthorizationEncryptionEncResponse$outboundSchema.optional(),
  tokenAuthMethod: ClientCreateApiTokenAuthMethodResponse$outboundSchema
    .optional(),
  tokenAuthSignAlg: ClientCreateApiTokenAuthSignAlgResponse$outboundSchema
    .optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientCreateApiRequestSignAlgResponse$outboundSchema
    .optional(),
  requestEncryptionAlg:
    ClientCreateApiRequestEncryptionAlgResponse$outboundSchema.optional(),
  requestEncryptionEnc:
    ClientCreateApiRequestEncryptionEncResponse$outboundSchema.optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientCreateApiIdTokenSignAlgResponse$outboundSchema
    .optional(),
  idTokenEncryptionAlg:
    ClientCreateApiIdTokenEncryptionAlgResponse$outboundSchema.optional(),
  idTokenEncryptionEnc:
    ClientCreateApiIdTokenEncryptionEncResponse$outboundSchema.optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientCreateApiSubjectTypeResponse$outboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientCreateApiUserInfoSignAlgResponse$outboundSchema
    .optional(),
  userInfoEncryptionAlg:
    ClientCreateApiUserInfoEncryptionAlgResponse$outboundSchema.optional(),
  userInfoEncryptionEnc:
    ClientCreateApiUserInfoEncryptionEncResponse$outboundSchema.optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientCreateApiTosUrisResponse$outboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => ClientCreateApiPolicyUrisResponse$outboundSchema),
  ).optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(
    z.lazy(() => ClientCreateApiClientUrisResponse$outboundSchema),
  ).optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientCreateApiBcRequestSignAlgResponse$outboundSchema
    .optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(
    z.lazy(() => ClientCreateApiAttributeResponse$outboundSchema),
  ).optional(),
  extension: z.lazy(() => ClientCreateApiExtensionResponse$outboundSchema)
    .optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientCreateApiClientRegistrationTypeResponse$outboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientCreateApiFapiModeResponse$outboundSchema).optional(),
  responseModes: z.array(ClientCreateApiResponseModeResponse$outboundSchema)
    .optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiResponse$ {
  /** @deprecated use `ClientCreateApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiResponse$inboundSchema;
  /** @deprecated use `ClientCreateApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiResponse$outboundSchema;
  /** @deprecated use `ClientCreateApiResponse$Outbound` instead. */
  export type Outbound = ClientCreateApiResponse$Outbound;
}

export function clientCreateApiResponseToJSON(
  clientCreateApiResponse: ClientCreateApiResponse,
): string {
  return JSON.stringify(
    ClientCreateApiResponse$outboundSchema.parse(clientCreateApiResponse),
  );
}

export function clientCreateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientCreateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCreateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCreateApiResponse' from JSON`,
  );
}
