/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeviceAuthorizationApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type DeviceAuthorizationApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type DeviceAuthorizationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: DeviceAuthorizationApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const DeviceAuthorizationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type DeviceAuthorizationApiFormAction = ClosedEnum<
  typeof DeviceAuthorizationApiFormAction
>;

export type DeviceAuthorizationApiFormDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiFormAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiFormScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<DeviceAuthorizationApiFormDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<DeviceAuthorizationApiFormAttribute> | undefined;
};

export type DeviceAuthorizationApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceAuthorizationApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceAuthorizationApiFormElement> | undefined;
};

export type DeviceAuthorizationApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type DeviceAuthorizationApiFormDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const DeviceAuthorizationApiFormGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type DeviceAuthorizationApiFormGmAction = ClosedEnum<
  typeof DeviceAuthorizationApiFormGmAction
>;

export type DeviceAuthorizationApiFormGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type DeviceAuthorizationApiFormGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type DeviceAuthorizationApiFormGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<DeviceAuthorizationApiFormGrantElement> | undefined;
};

export type DeviceAuthorizationApiFormGrant = {
  scopes?: Array<DeviceAuthorizationApiFormGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | DeviceAuthorizationApiFormGrantAuthorizationDetails
    | undefined;
};

export type DeviceAuthorizationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: DeviceAuthorizationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the device authorization request.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the device authorization
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the device authorization
   *
   * @remarks
   * request is the client ID alias. `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the device authorization request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The client authentication method that should be performed at the device authorization
   *
   * @remarks
   * endpoint.
   */
  clientAuthMethod?: string | undefined;
  /**
   * The scopes requested by the device authorization request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the scope request parameter in the device
   * authorization request. However, because unregistered scopes are dropped on Authlete
   * side, if the `scope` request parameter contains unknown scopes, the list returned by
   * this property becomes different from the value of the `scope` request parameter.
   *
   * Note that `description` property and `descriptions` property of each scope object in the
   * array contained in this property is always `null` even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<DeviceAuthorizationApiFormScope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   */
  claimNames?: Array<string> | undefined;
  /**
   * The list of ACR values requested by the device authorization request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `acr_values` request parameter in the
   * device authorization request. However, because unsupported ACR values are dropped
   * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
   * the list returned by this property becomes different from the value of the `acr_values`
   * request parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The device verification code. This corresponds to the `device_code` property in the
   *
   * @remarks
   * response to the client.
   */
  deviceCode?: string | undefined;
  /**
   * The end-user verification code. This corresponds to the `user_code` property in the
   *
   * @remarks
   * response to the client.
   */
  userCode?: string | undefined;
  /**
   * The end-user verification URI. This corresponds to the `verification_uri` property in
   *
   * @remarks
   * the response to the client.
   */
  verificationUri?: string | undefined;
  /**
   * The end-user verification URI that includes the end-user verification code. This corresponds
   *
   * @remarks
   * to the `verification_uri_complete` property in the response to the client.
   */
  verificationUriComplete?: string | undefined;
  /**
   * The duration of the device verification code in seconds. This corresponds to the `expires_in`
   *
   * @remarks
   * property in the response to the client.
   */
  expiresIn?: number | undefined;
  /**
   * The minimum amount of time in seconds that the client must wait for between polling
   *
   * @remarks
   * requests to the token endpoint. This corresponds to the `interval` property in the response
   * to the client.
   */
  interval?: number | undefined;
  /**
   * The warnings raised during processing the backchannel authentication request.
   *
   * @remarks
   */
  warnings?: Array<string> | undefined;
  /**
   * The resources specified by the `resource` request parameters. See "Resource Indicators
   *
   * @remarks
   * for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | DeviceAuthorizationApiFormAuthorizationDetails
    | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?:
    | Array<DeviceAuthorizationApiFormServiceAttribute>
    | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?:
    | Array<DeviceAuthorizationApiFormClientAttribute>
    | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<DeviceAuthorizationApiFormDynamicScope> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: DeviceAuthorizationApiFormGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: DeviceAuthorizationApiFormGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormRequestBody$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type DeviceAuthorizationApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiFormRequestBody$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormRequestBody$ {
  /** @deprecated use `DeviceAuthorizationApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormRequestBody$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormRequestBody$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormRequestBody$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormRequestBody$Outbound;
}

export function deviceAuthorizationApiFormRequestBodyToJSON(
  deviceAuthorizationApiFormRequestBody: DeviceAuthorizationApiFormRequestBody,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormRequestBody$outboundSchema.parse(
      deviceAuthorizationApiFormRequestBody,
    ),
  );
}

export function deviceAuthorizationApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormRequest$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    DeviceAuthorizationApiFormRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeviceAuthorizationApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: DeviceAuthorizationApiFormRequestBody$Outbound;
};

/** @internal */
export const DeviceAuthorizationApiFormRequest$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormRequest$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    DeviceAuthorizationApiFormRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormRequest$ {
  /** @deprecated use `DeviceAuthorizationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormRequest$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormRequest$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormRequest$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormRequest$Outbound;
}

export function deviceAuthorizationApiFormRequestToJSON(
  deviceAuthorizationApiFormRequest: DeviceAuthorizationApiFormRequest,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormRequest$outboundSchema.parse(
      deviceAuthorizationApiFormRequest,
    ),
  );
}

export function deviceAuthorizationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiFormAction
> = z.nativeEnum(DeviceAuthorizationApiFormAction);

/** @internal */
export const DeviceAuthorizationApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiFormAction
> = DeviceAuthorizationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormAction$ {
  /** @deprecated use `DeviceAuthorizationApiFormAction$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormAction$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormAction$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiFormAction$outboundSchema;
}

/** @internal */
export const DeviceAuthorizationApiFormDescription$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormDescription$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormDescription$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormDescription$ {
  /** @deprecated use `DeviceAuthorizationApiFormDescription$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormDescription$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormDescription$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormDescription$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormDescription$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormDescription$Outbound;
}

export function deviceAuthorizationApiFormDescriptionToJSON(
  deviceAuthorizationApiFormDescription: DeviceAuthorizationApiFormDescription,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormDescription$outboundSchema.parse(
      deviceAuthorizationApiFormDescription,
    ),
  );
}

export function deviceAuthorizationApiFormDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormDescription' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormAttribute$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormAttribute$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormAttribute$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormAttribute$ {
  /** @deprecated use `DeviceAuthorizationApiFormAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormAttribute$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormAttribute$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormAttribute$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormAttribute$Outbound;
}

export function deviceAuthorizationApiFormAttributeToJSON(
  deviceAuthorizationApiFormAttribute: DeviceAuthorizationApiFormAttribute,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormAttribute$outboundSchema.parse(
      deviceAuthorizationApiFormAttribute,
    ),
  );
}

export function deviceAuthorizationApiFormAttributeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormScope$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceAuthorizationApiFormDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<DeviceAuthorizationApiFormDescription$Outbound>
    | undefined;
  attributes?: Array<DeviceAuthorizationApiFormAttribute$Outbound> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormScope$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormScope$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => DeviceAuthorizationApiFormDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormScope$ {
  /** @deprecated use `DeviceAuthorizationApiFormScope$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormScope$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormScope$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiFormScope$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormScope$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormScope$Outbound;
}

export function deviceAuthorizationApiFormScopeToJSON(
  deviceAuthorizationApiFormScope: DeviceAuthorizationApiFormScope,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormScope$outboundSchema.parse(
      deviceAuthorizationApiFormScope,
    ),
  );
}

export function deviceAuthorizationApiFormScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiFormScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormScope' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormElement$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormElement$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormElement$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormElement$ {
  /** @deprecated use `DeviceAuthorizationApiFormElement$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormElement$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormElement$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormElement$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormElement$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormElement$Outbound;
}

export function deviceAuthorizationApiFormElementToJSON(
  deviceAuthorizationApiFormElement: DeviceAuthorizationApiFormElement,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormElement$outboundSchema.parse(
      deviceAuthorizationApiFormElement,
    ),
  );
}

export function deviceAuthorizationApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormElement' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiFormElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DeviceAuthorizationApiFormAuthorizationDetails$Outbound = {
  elements?: Array<DeviceAuthorizationApiFormElement$Outbound> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormAuthorizationDetails$ {
  /** @deprecated use `DeviceAuthorizationApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    DeviceAuthorizationApiFormAuthorizationDetails$Outbound;
}

export function deviceAuthorizationApiFormAuthorizationDetailsToJSON(
  deviceAuthorizationApiFormAuthorizationDetails:
    DeviceAuthorizationApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormAuthorizationDetails$outboundSchema.parse(
      deviceAuthorizationApiFormAuthorizationDetails,
    ),
  );
}

export function deviceAuthorizationApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceAuthorizationApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceAuthorizationApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormServiceAttribute$inboundSchema:
  z.ZodType<DeviceAuthorizationApiFormServiceAttribute, z.ZodTypeDef, unknown> =
    z.object({
      key: z.string().optional(),
      value: z.string().optional(),
    });

/** @internal */
export type DeviceAuthorizationApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormServiceAttribute$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormServiceAttribute$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormServiceAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormServiceAttribute$ {
  /** @deprecated use `DeviceAuthorizationApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormServiceAttribute$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormServiceAttribute$Outbound;
}

export function deviceAuthorizationApiFormServiceAttributeToJSON(
  deviceAuthorizationApiFormServiceAttribute:
    DeviceAuthorizationApiFormServiceAttribute,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormServiceAttribute$outboundSchema.parse(
      deviceAuthorizationApiFormServiceAttribute,
    ),
  );
}

export function deviceAuthorizationApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceAuthorizationApiFormServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormServiceAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceAuthorizationApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormClientAttribute$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormClientAttribute$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormClientAttribute$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormClientAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormClientAttribute$ {
  /** @deprecated use `DeviceAuthorizationApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormClientAttribute$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormClientAttribute$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormClientAttribute$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormClientAttribute$Outbound;
}

export function deviceAuthorizationApiFormClientAttributeToJSON(
  deviceAuthorizationApiFormClientAttribute:
    DeviceAuthorizationApiFormClientAttribute,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormClientAttribute$outboundSchema.parse(
      deviceAuthorizationApiFormClientAttribute,
    ),
  );
}

export function deviceAuthorizationApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceAuthorizationApiFormClientAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormClientAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceAuthorizationApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormDynamicScope$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormDynamicScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormDynamicScope$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormDynamicScope$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormDynamicScope
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormDynamicScope$ {
  /** @deprecated use `DeviceAuthorizationApiFormDynamicScope$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormDynamicScope$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormDynamicScope$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormDynamicScope$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormDynamicScope$Outbound;
}

export function deviceAuthorizationApiFormDynamicScopeToJSON(
  deviceAuthorizationApiFormDynamicScope:
    DeviceAuthorizationApiFormDynamicScope,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormDynamicScope$outboundSchema.parse(
      deviceAuthorizationApiFormDynamicScope,
    ),
  );
}

export function deviceAuthorizationApiFormDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormDynamicScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormDynamicScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormDynamicScope' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormGmAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiFormGmAction
> = z.nativeEnum(DeviceAuthorizationApiFormGmAction);

/** @internal */
export const DeviceAuthorizationApiFormGmAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceAuthorizationApiFormGmAction
> = DeviceAuthorizationApiFormGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormGmAction$ {
  /** @deprecated use `DeviceAuthorizationApiFormGmAction$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormGmAction$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGmAction$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormGmAction$outboundSchema;
}

/** @internal */
export const DeviceAuthorizationApiFormGrantScope$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormGrantScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormGrantScope$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormGrantScope$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormGrantScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormGrantScope$ {
  /** @deprecated use `DeviceAuthorizationApiFormGrantScope$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormGrantScope$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrantScope$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormGrantScope$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrantScope$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormGrantScope$Outbound;
}

export function deviceAuthorizationApiFormGrantScopeToJSON(
  deviceAuthorizationApiFormGrantScope: DeviceAuthorizationApiFormGrantScope,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormGrantScope$outboundSchema.parse(
      deviceAuthorizationApiFormGrantScope,
    ),
  );
}

export function deviceAuthorizationApiFormGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormGrantScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormGrantScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormGrantScope' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormGrantElement$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormGrantElement$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormGrantElement$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormGrantElement$ {
  /** @deprecated use `DeviceAuthorizationApiFormGrantElement$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormGrantElement$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormGrantElement$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrantElement$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormGrantElement$Outbound;
}

export function deviceAuthorizationApiFormGrantElementToJSON(
  deviceAuthorizationApiFormGrantElement:
    DeviceAuthorizationApiFormGrantElement,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormGrantElement$outboundSchema.parse(
      deviceAuthorizationApiFormGrantElement,
    ),
  );
}

export function deviceAuthorizationApiFormGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormGrantElement' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiFormGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DeviceAuthorizationApiFormGrantAuthorizationDetails$Outbound = {
  elements?: Array<DeviceAuthorizationApiFormGrantElement$Outbound> | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => DeviceAuthorizationApiFormGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormGrantAuthorizationDetails$ {
  /** @deprecated use `DeviceAuthorizationApiFormGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    DeviceAuthorizationApiFormGrantAuthorizationDetails$Outbound;
}

export function deviceAuthorizationApiFormGrantAuthorizationDetailsToJSON(
  deviceAuthorizationApiFormGrantAuthorizationDetails:
    DeviceAuthorizationApiFormGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormGrantAuthorizationDetails$outboundSchema.parse(
      deviceAuthorizationApiFormGrantAuthorizationDetails,
    ),
  );
}

export function deviceAuthorizationApiFormGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeviceAuthorizationApiFormGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeviceAuthorizationApiFormGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormGrant$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormGrantScope$inboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiFormGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormGrant$Outbound = {
  scopes?: Array<DeviceAuthorizationApiFormGrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceAuthorizationApiFormGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormGrant$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormGrant$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormGrant
> = z.object({
  scopes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormGrantScope$outboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiFormGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormGrant$ {
  /** @deprecated use `DeviceAuthorizationApiFormGrant$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormGrant$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrant$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationApiFormGrant$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormGrant$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormGrant$Outbound;
}

export function deviceAuthorizationApiFormGrantToJSON(
  deviceAuthorizationApiFormGrant: DeviceAuthorizationApiFormGrant,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormGrant$outboundSchema.parse(
      deviceAuthorizationApiFormGrant,
    ),
  );
}

export function deviceAuthorizationApiFormGrantFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationApiFormGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormGrant' from JSON`,
  );
}

/** @internal */
export const DeviceAuthorizationApiFormResponse$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceAuthorizationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  clientAuthMethod: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceAuthorizationApiFormScope$inboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  deviceCode: z.string().optional(),
  userCode: z.string().optional(),
  verificationUri: z.string().optional(),
  verificationUriComplete: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
  warnings: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormClientAttribute$inboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormDynamicScope$inboundSchema),
  ).optional(),
  gmAction: DeviceAuthorizationApiFormGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceAuthorizationApiFormGrant$inboundSchema).optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type DeviceAuthorizationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  clientAuthMethod?: string | undefined;
  scopes?: Array<DeviceAuthorizationApiFormScope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  acrs?: Array<string> | undefined;
  deviceCode?: string | undefined;
  userCode?: string | undefined;
  verificationUri?: string | undefined;
  verificationUriComplete?: string | undefined;
  expiresIn?: number | undefined;
  interval?: number | undefined;
  warnings?: Array<string> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | DeviceAuthorizationApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<DeviceAuthorizationApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<DeviceAuthorizationApiFormClientAttribute$Outbound>
    | undefined;
  dynamicScopes?:
    | Array<DeviceAuthorizationApiFormDynamicScope$Outbound>
    | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: DeviceAuthorizationApiFormGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormResponse$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormResponse$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceAuthorizationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  clientAuthMethod: z.string().optional(),
  scopes: z.array(z.lazy(() => DeviceAuthorizationApiFormScope$outboundSchema))
    .optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  deviceCode: z.string().optional(),
  userCode: z.string().optional(),
  verificationUri: z.string().optional(),
  verificationUriComplete: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
  warnings: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    DeviceAuthorizationApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormClientAttribute$outboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => DeviceAuthorizationApiFormDynamicScope$outboundSchema),
  ).optional(),
  gmAction: DeviceAuthorizationApiFormGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => DeviceAuthorizationApiFormGrant$outboundSchema)
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormResponse$ {
  /** @deprecated use `DeviceAuthorizationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationApiFormResponse$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormResponse$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormResponse$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormResponse$Outbound;
}

export function deviceAuthorizationApiFormResponseToJSON(
  deviceAuthorizationApiFormResponse: DeviceAuthorizationApiFormResponse,
): string {
  return JSON.stringify(
    DeviceAuthorizationApiFormResponse$outboundSchema.parse(
      deviceAuthorizationApiFormResponse,
    ),
  );
}

export function deviceAuthorizationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeviceAuthorizationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationApiFormResponse' from JSON`,
  );
}
