/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const HskCreateApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type HskCreateApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type HskCreateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: HskCreateApiFormRequestBody;
};

/**
 * Result of the API call
 */
export const HskCreateApiFormAction = {
  Success: "SUCCESS",
  InvalidRequest: "INVALID_REQUEST",
  NotFound: "NOT_FOUND",
  ServerError: "SERVER_ERROR",
} as const;
/**
 * Result of the API call
 */
export type HskCreateApiFormAction = ClosedEnum<typeof HskCreateApiFormAction>;

/**
 * Holds information about a key managed in an HSM (Hardware Security Module)
 *
 * @remarks
 */
export type HskCreateApiFormHsk = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * Get the use of the key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

export type HskCreateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * Result of the API call
   */
  action?: HskCreateApiFormAction | undefined;
  /**
   * Holds information about a key managed in an HSM (Hardware Security Module)
   *
   * @remarks
   */
  hsk?: HskCreateApiFormHsk | undefined;
};

/** @internal */
export const HskCreateApiFormRequestBody$inboundSchema: z.ZodType<
  HskCreateApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type HskCreateApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiFormRequestBody$outboundSchema: z.ZodType<
  HskCreateApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormRequestBody$ {
  /** @deprecated use `HskCreateApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormRequestBody$inboundSchema;
  /** @deprecated use `HskCreateApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormRequestBody$outboundSchema;
  /** @deprecated use `HskCreateApiFormRequestBody$Outbound` instead. */
  export type Outbound = HskCreateApiFormRequestBody$Outbound;
}

export function hskCreateApiFormRequestBodyToJSON(
  hskCreateApiFormRequestBody: HskCreateApiFormRequestBody,
): string {
  return JSON.stringify(
    HskCreateApiFormRequestBody$outboundSchema.parse(
      hskCreateApiFormRequestBody,
    ),
  );
}

export function hskCreateApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const HskCreateApiFormRequest$inboundSchema: z.ZodType<
  HskCreateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => HskCreateApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HskCreateApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: HskCreateApiFormRequestBody$Outbound;
};

/** @internal */
export const HskCreateApiFormRequest$outboundSchema: z.ZodType<
  HskCreateApiFormRequest$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => HskCreateApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormRequest$ {
  /** @deprecated use `HskCreateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormRequest$inboundSchema;
  /** @deprecated use `HskCreateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormRequest$outboundSchema;
  /** @deprecated use `HskCreateApiFormRequest$Outbound` instead. */
  export type Outbound = HskCreateApiFormRequest$Outbound;
}

export function hskCreateApiFormRequestToJSON(
  hskCreateApiFormRequest: HskCreateApiFormRequest,
): string {
  return JSON.stringify(
    HskCreateApiFormRequest$outboundSchema.parse(hskCreateApiFormRequest),
  );
}

export function hskCreateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const HskCreateApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof HskCreateApiFormAction
> = z.nativeEnum(HskCreateApiFormAction);

/** @internal */
export const HskCreateApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof HskCreateApiFormAction
> = HskCreateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormAction$ {
  /** @deprecated use `HskCreateApiFormAction$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormAction$inboundSchema;
  /** @deprecated use `HskCreateApiFormAction$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormAction$outboundSchema;
}

/** @internal */
export const HskCreateApiFormHsk$inboundSchema: z.ZodType<
  HskCreateApiFormHsk,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type HskCreateApiFormHsk$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const HskCreateApiFormHsk$outboundSchema: z.ZodType<
  HskCreateApiFormHsk$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormHsk
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormHsk$ {
  /** @deprecated use `HskCreateApiFormHsk$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormHsk$inboundSchema;
  /** @deprecated use `HskCreateApiFormHsk$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormHsk$outboundSchema;
  /** @deprecated use `HskCreateApiFormHsk$Outbound` instead. */
  export type Outbound = HskCreateApiFormHsk$Outbound;
}

export function hskCreateApiFormHskToJSON(
  hskCreateApiFormHsk: HskCreateApiFormHsk,
): string {
  return JSON.stringify(
    HskCreateApiFormHsk$outboundSchema.parse(hskCreateApiFormHsk),
  );
}

export function hskCreateApiFormHskFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiFormHsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiFormHsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiFormHsk' from JSON`,
  );
}

/** @internal */
export const HskCreateApiFormResponse$inboundSchema: z.ZodType<
  HskCreateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskCreateApiFormAction$inboundSchema.optional(),
  hsk: z.lazy(() => HskCreateApiFormHsk$inboundSchema).optional(),
});

/** @internal */
export type HskCreateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  hsk?: HskCreateApiFormHsk$Outbound | undefined;
};

/** @internal */
export const HskCreateApiFormResponse$outboundSchema: z.ZodType<
  HskCreateApiFormResponse$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskCreateApiFormAction$outboundSchema.optional(),
  hsk: z.lazy(() => HskCreateApiFormHsk$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormResponse$ {
  /** @deprecated use `HskCreateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormResponse$inboundSchema;
  /** @deprecated use `HskCreateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormResponse$outboundSchema;
  /** @deprecated use `HskCreateApiFormResponse$Outbound` instead. */
  export type Outbound = HskCreateApiFormResponse$Outbound;
}

export function hskCreateApiFormResponseToJSON(
  hskCreateApiFormResponse: HskCreateApiFormResponse,
): string {
  return JSON.stringify(
    HskCreateApiFormResponse$outboundSchema.parse(hskCreateApiFormResponse),
  );
}

export function hskCreateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateApiFormResponse' from JSON`,
  );
}
