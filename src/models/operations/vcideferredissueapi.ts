/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciDeferredIssueApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciDeferredIssueApiOrder = {
  /**
   * The identifier of a credential request.
   */
  requestIdentifier?: string | undefined;
  /**
   * The additional payload that will be added into a credential to be issued.
   */
  credentialPayload?: string | undefined;
  /**
   * The flag indicating whether to defer credential issuance.
   */
  issuanceDeferred?: boolean | undefined;
  /**
   * The duration of a credential to be issued.
   */
  credentialDuration?: number | undefined;
  /**
   * The key ID of a private key that should be used for signing a credential
   *
   * @remarks
   * to be issued.
   */
  signingKeyId?: string | undefined;
};

export type VciDeferredIssueApiRequestBody = {
  order?: VciDeferredIssueApiOrder | undefined;
};

export type VciDeferredIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciDeferredIssueApiRequestBody;
};

/**
 * The next action that the implementation of the deferred credential
 *
 * @remarks
 * endpoint should take.
 */
export const VciDeferredIssueApiAction = {
  Ok: "OK",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  CallerError: "CALLER_ERROR",
} as const;
/**
 * The next action that the implementation of the deferred credential
 *
 * @remarks
 * endpoint should take.
 */
export type VciDeferredIssueApiAction = ClosedEnum<
  typeof VciDeferredIssueApiAction
>;

export type VciDeferredIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the deferred credential
   *
   * @remarks
   * endpoint should take.
   */
  action?: VciDeferredIssueApiAction | undefined;
  /**
   * The content of the response that the implementation of the deferred
   *
   * @remarks
   * credential endpoint should return.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciDeferredIssueApiOrder$inboundSchema: z.ZodType<
  VciDeferredIssueApiOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestIdentifier: z.string().optional(),
  credentialPayload: z.string().optional(),
  issuanceDeferred: z.boolean().optional(),
  credentialDuration: z.number().int().optional(),
  signingKeyId: z.string().optional(),
});

/** @internal */
export type VciDeferredIssueApiOrder$Outbound = {
  requestIdentifier?: string | undefined;
  credentialPayload?: string | undefined;
  issuanceDeferred?: boolean | undefined;
  credentialDuration?: number | undefined;
  signingKeyId?: string | undefined;
};

/** @internal */
export const VciDeferredIssueApiOrder$outboundSchema: z.ZodType<
  VciDeferredIssueApiOrder$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiOrder
> = z.object({
  requestIdentifier: z.string().optional(),
  credentialPayload: z.string().optional(),
  issuanceDeferred: z.boolean().optional(),
  credentialDuration: z.number().int().optional(),
  signingKeyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiOrder$ {
  /** @deprecated use `VciDeferredIssueApiOrder$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiOrder$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiOrder$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueApiOrder$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiOrder$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiOrder$Outbound;
}

export function vciDeferredIssueApiOrderToJSON(
  vciDeferredIssueApiOrder: VciDeferredIssueApiOrder,
): string {
  return JSON.stringify(
    VciDeferredIssueApiOrder$outboundSchema.parse(vciDeferredIssueApiOrder),
  );
}

export function vciDeferredIssueApiOrderFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredIssueApiOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredIssueApiOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredIssueApiOrder' from JSON`,
  );
}

/** @internal */
export const VciDeferredIssueApiRequestBody$inboundSchema: z.ZodType<
  VciDeferredIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  order: z.lazy(() => VciDeferredIssueApiOrder$inboundSchema).optional(),
});

/** @internal */
export type VciDeferredIssueApiRequestBody$Outbound = {
  order?: VciDeferredIssueApiOrder$Outbound | undefined;
};

/** @internal */
export const VciDeferredIssueApiRequestBody$outboundSchema: z.ZodType<
  VciDeferredIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiRequestBody
> = z.object({
  order: z.lazy(() => VciDeferredIssueApiOrder$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiRequestBody$ {
  /** @deprecated use `VciDeferredIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiRequestBody$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueApiRequestBody$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiRequestBody$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiRequestBody$Outbound;
}

export function vciDeferredIssueApiRequestBodyToJSON(
  vciDeferredIssueApiRequestBody: VciDeferredIssueApiRequestBody,
): string {
  return JSON.stringify(
    VciDeferredIssueApiRequestBody$outboundSchema.parse(
      vciDeferredIssueApiRequestBody,
    ),
  );
}

export function vciDeferredIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciDeferredIssueApiRequest$inboundSchema: z.ZodType<
  VciDeferredIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciDeferredIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciDeferredIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciDeferredIssueApiRequestBody$Outbound;
};

/** @internal */
export const VciDeferredIssueApiRequest$outboundSchema: z.ZodType<
  VciDeferredIssueApiRequest$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciDeferredIssueApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiRequest$ {
  /** @deprecated use `VciDeferredIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiRequest$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueApiRequest$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiRequest$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiRequest$Outbound;
}

export function vciDeferredIssueApiRequestToJSON(
  vciDeferredIssueApiRequest: VciDeferredIssueApiRequest,
): string {
  return JSON.stringify(
    VciDeferredIssueApiRequest$outboundSchema.parse(vciDeferredIssueApiRequest),
  );
}

export function vciDeferredIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const VciDeferredIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciDeferredIssueApiAction
> = z.nativeEnum(VciDeferredIssueApiAction);

/** @internal */
export const VciDeferredIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciDeferredIssueApiAction
> = VciDeferredIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiAction$ {
  /** @deprecated use `VciDeferredIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiAction$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueApiAction$outboundSchema;
}

/** @internal */
export const VciDeferredIssueApiResponse$inboundSchema: z.ZodType<
  VciDeferredIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciDeferredIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciDeferredIssueApiResponse$outboundSchema: z.ZodType<
  VciDeferredIssueApiResponse$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiResponse$ {
  /** @deprecated use `VciDeferredIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiResponse$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueApiResponse$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiResponse$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiResponse$Outbound;
}

export function vciDeferredIssueApiResponseToJSON(
  vciDeferredIssueApiResponse: VciDeferredIssueApiResponse,
): string {
  return JSON.stringify(
    VciDeferredIssueApiResponse$outboundSchema.parse(
      vciDeferredIssueApiResponse,
    ),
  );
}

export function vciDeferredIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredIssueApiResponse' from JSON`,
  );
}
