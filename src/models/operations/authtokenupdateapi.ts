/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenUpdateApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenUpdateApiPropertyRequest = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenUpdateApiElementRequest = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthTokenUpdateApiAuthorizationDetailsRequest = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthTokenUpdateApiElementRequest> | undefined;
};

export type AuthTokenUpdateApiRequestBody = {
  /**
   * An access token.
   *
   * @remarks
   */
  accessToken: string;
  /**
   * A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
   *
   * @remarks
   * If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
   * (or negative), the expiration date of the access token is not changed.
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * A new set of scopes assigned to the access token. Scopes that are not supported by the service
   *
   * @remarks
   * and those that the client application associated with the access token is not allowed to request
   * are ignored on the server side. If the `scopes` request parameter is not included in a request or
   * its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
   * is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
   * if you want to specify `properties`.
   */
  scopes?: Array<string> | undefined;
  /**
   * A new set of properties assigned to the access token. If the `properties` request parameter is
   *
   * @remarks
   * not included in a request or its value is null, the properties of the access token are not changed.
   */
  properties?: Array<AuthTokenUpdateApiPropertyRequest> | undefined;
  /**
   * A boolean request parameter which indicates whether the API attempts to update the expiration
   *
   * @remarks
   * date of the access token when the scopes linked to the access token are changed by this request.
   */
  accessTokenExpiresAtUpdatedOnScopeUpdate?: boolean | undefined;
  /**
   * The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
   *
   * @remarks
   * but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
   */
  accessTokenHash?: string | undefined;
  /**
   * A boolean request parameter which indicates whether to update the value of the access token in
   *
   * @remarks
   * the data store. If this parameter is set to `true` then a new access token value is generated
   * by the server and returned in the response.
   */
  accessTokenValueUpdated?: boolean | undefined;
  /**
   * The flag which indicates whether the access token expires or not. By default, all access tokens
   *
   * @remarks
   * expire after a period of time determined by their service. If this request parameter is `true`
   * then the access token will not automatically expire and must be revoked or deleted manually at
   * the service.
   *
   * If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
   * If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
   * normally.
   */
  accessTokenPersistent?: boolean | undefined;
  /**
   * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
   *
   * @remarks
   * with the corresponding value MUST be presented with the access token when it is used by a client.
   * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
   */
  certificateThumbprint?: string | undefined;
  /**
   * The thumbprint of the public key used for DPoP presentation of this token. If this property is
   *
   * @remarks
   * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
   * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
   */
  dpopKeyThumbprint?: string | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthTokenUpdateApiAuthorizationDetailsRequest
    | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
};

export type AuthTokenUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenUpdateApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenUpdateApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenUpdateApiAction = ClosedEnum<
  typeof AuthTokenUpdateApiAction
>;

export type AuthTokenUpdateApiPropertyResponse = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenUpdateApiElementResponse = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthTokenUpdateApiAuthorizationDetailsResponse = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthTokenUpdateApiElementResponse> | undefined;
};

export type AuthTokenUpdateApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenUpdateApiAction | undefined;
  /**
   * The access token which has been specified by the request.
   */
  accessToken?: string | undefined;
  /**
   * The date at which the access token will expire.
   *
   * @remarks
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<AuthTokenUpdateApiPropertyResponse> | undefined;
  /**
   * The scopes associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthTokenUpdateApiAuthorizationDetailsResponse
    | undefined;
  /**
   * The token type associated with the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const AuthTokenUpdateApiPropertyRequest$inboundSchema: z.ZodType<
  AuthTokenUpdateApiPropertyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenUpdateApiPropertyRequest$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenUpdateApiPropertyRequest$outboundSchema: z.ZodType<
  AuthTokenUpdateApiPropertyRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiPropertyRequest
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiPropertyRequest$ {
  /** @deprecated use `AuthTokenUpdateApiPropertyRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiPropertyRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiPropertyRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiPropertyRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiPropertyRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiPropertyRequest$Outbound;
}

export function authTokenUpdateApiPropertyRequestToJSON(
  authTokenUpdateApiPropertyRequest: AuthTokenUpdateApiPropertyRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiPropertyRequest$outboundSchema.parse(
      authTokenUpdateApiPropertyRequest,
    ),
  );
}

export function authTokenUpdateApiPropertyRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiPropertyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiPropertyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiPropertyRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiElementRequest$inboundSchema: z.ZodType<
  AuthTokenUpdateApiElementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthTokenUpdateApiElementRequest$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenUpdateApiElementRequest$outboundSchema: z.ZodType<
  AuthTokenUpdateApiElementRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiElementRequest
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiElementRequest$ {
  /** @deprecated use `AuthTokenUpdateApiElementRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiElementRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiElementRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiElementRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiElementRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiElementRequest$Outbound;
}

export function authTokenUpdateApiElementRequestToJSON(
  authTokenUpdateApiElementRequest: AuthTokenUpdateApiElementRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiElementRequest$outboundSchema.parse(
      authTokenUpdateApiElementRequest,
    ),
  );
}

export function authTokenUpdateApiElementRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiElementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiElementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiElementRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiAuthorizationDetailsRequest$inboundSchema:
  z.ZodType<
    AuthTokenUpdateApiAuthorizationDetailsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthTokenUpdateApiElementRequest$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthTokenUpdateApiAuthorizationDetailsRequest$Outbound = {
  elements?: Array<AuthTokenUpdateApiElementRequest$Outbound> | undefined;
};

/** @internal */
export const AuthTokenUpdateApiAuthorizationDetailsRequest$outboundSchema:
  z.ZodType<
    AuthTokenUpdateApiAuthorizationDetailsRequest$Outbound,
    z.ZodTypeDef,
    AuthTokenUpdateApiAuthorizationDetailsRequest
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthTokenUpdateApiElementRequest$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiAuthorizationDetailsRequest$ {
  /** @deprecated use `AuthTokenUpdateApiAuthorizationDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiAuthorizationDetailsRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiAuthorizationDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiAuthorizationDetailsRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiAuthorizationDetailsRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiAuthorizationDetailsRequest$Outbound;
}

export function authTokenUpdateApiAuthorizationDetailsRequestToJSON(
  authTokenUpdateApiAuthorizationDetailsRequest:
    AuthTokenUpdateApiAuthorizationDetailsRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiAuthorizationDetailsRequest$outboundSchema.parse(
      authTokenUpdateApiAuthorizationDetailsRequest,
    ),
  );
}

export function authTokenUpdateApiAuthorizationDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenUpdateApiAuthorizationDetailsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenUpdateApiAuthorizationDetailsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenUpdateApiAuthorizationDetailsRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiRequestBody$inboundSchema: z.ZodType<
  AuthTokenUpdateApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  accessTokenExpiresAt: z.number().int().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(
    z.lazy(() => AuthTokenUpdateApiPropertyRequest$inboundSchema),
  ).optional(),
  accessTokenExpiresAtUpdatedOnScopeUpdate: z.boolean().optional(),
  accessTokenHash: z.string().optional(),
  accessTokenValueUpdated: z.boolean().optional(),
  accessTokenPersistent: z.boolean().optional(),
  certificateThumbprint: z.string().optional(),
  dpopKeyThumbprint: z.string().optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenUpdateApiAuthorizationDetailsRequest$inboundSchema
  ).optional(),
  forExternalAttachment: z.boolean().optional(),
});

/** @internal */
export type AuthTokenUpdateApiRequestBody$Outbound = {
  accessToken: string;
  accessTokenExpiresAt?: number | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<AuthTokenUpdateApiPropertyRequest$Outbound> | undefined;
  accessTokenExpiresAtUpdatedOnScopeUpdate?: boolean | undefined;
  accessTokenHash?: string | undefined;
  accessTokenValueUpdated?: boolean | undefined;
  accessTokenPersistent?: boolean | undefined;
  certificateThumbprint?: string | undefined;
  dpopKeyThumbprint?: string | undefined;
  authorizationDetails?:
    | AuthTokenUpdateApiAuthorizationDetailsRequest$Outbound
    | undefined;
  forExternalAttachment?: boolean | undefined;
};

/** @internal */
export const AuthTokenUpdateApiRequestBody$outboundSchema: z.ZodType<
  AuthTokenUpdateApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiRequestBody
> = z.object({
  accessToken: z.string(),
  accessTokenExpiresAt: z.number().int().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(
    z.lazy(() => AuthTokenUpdateApiPropertyRequest$outboundSchema),
  ).optional(),
  accessTokenExpiresAtUpdatedOnScopeUpdate: z.boolean().optional(),
  accessTokenHash: z.string().optional(),
  accessTokenValueUpdated: z.boolean().optional(),
  accessTokenPersistent: z.boolean().optional(),
  certificateThumbprint: z.string().optional(),
  dpopKeyThumbprint: z.string().optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenUpdateApiAuthorizationDetailsRequest$outboundSchema
  ).optional(),
  forExternalAttachment: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiRequestBody$ {
  /** @deprecated use `AuthTokenUpdateApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiRequestBody$Outbound;
}

export function authTokenUpdateApiRequestBodyToJSON(
  authTokenUpdateApiRequestBody: AuthTokenUpdateApiRequestBody,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiRequestBody$outboundSchema.parse(
      authTokenUpdateApiRequestBody,
    ),
  );
}

export function authTokenUpdateApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiRequest$inboundSchema: z.ZodType<
  AuthTokenUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenUpdateApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenUpdateApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenUpdateApiRequestBody$Outbound;
};

/** @internal */
export const AuthTokenUpdateApiRequest$outboundSchema: z.ZodType<
  AuthTokenUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenUpdateApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiRequest$ {
  /** @deprecated use `AuthTokenUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiRequest$Outbound;
}

export function authTokenUpdateApiRequestToJSON(
  authTokenUpdateApiRequest: AuthTokenUpdateApiRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiRequest$outboundSchema.parse(authTokenUpdateApiRequest),
  );
}

export function authTokenUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenUpdateApiAction
> = z.nativeEnum(AuthTokenUpdateApiAction);

/** @internal */
export const AuthTokenUpdateApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenUpdateApiAction
> = AuthTokenUpdateApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiAction$ {
  /** @deprecated use `AuthTokenUpdateApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiAction$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiAction$outboundSchema;
}

/** @internal */
export const AuthTokenUpdateApiPropertyResponse$inboundSchema: z.ZodType<
  AuthTokenUpdateApiPropertyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenUpdateApiPropertyResponse$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenUpdateApiPropertyResponse$outboundSchema: z.ZodType<
  AuthTokenUpdateApiPropertyResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiPropertyResponse
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiPropertyResponse$ {
  /** @deprecated use `AuthTokenUpdateApiPropertyResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiPropertyResponse$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiPropertyResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiPropertyResponse$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiPropertyResponse$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiPropertyResponse$Outbound;
}

export function authTokenUpdateApiPropertyResponseToJSON(
  authTokenUpdateApiPropertyResponse: AuthTokenUpdateApiPropertyResponse,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiPropertyResponse$outboundSchema.parse(
      authTokenUpdateApiPropertyResponse,
    ),
  );
}

export function authTokenUpdateApiPropertyResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiPropertyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenUpdateApiPropertyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiPropertyResponse' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiElementResponse$inboundSchema: z.ZodType<
  AuthTokenUpdateApiElementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthTokenUpdateApiElementResponse$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenUpdateApiElementResponse$outboundSchema: z.ZodType<
  AuthTokenUpdateApiElementResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiElementResponse
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiElementResponse$ {
  /** @deprecated use `AuthTokenUpdateApiElementResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiElementResponse$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiElementResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiElementResponse$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiElementResponse$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiElementResponse$Outbound;
}

export function authTokenUpdateApiElementResponseToJSON(
  authTokenUpdateApiElementResponse: AuthTokenUpdateApiElementResponse,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiElementResponse$outboundSchema.parse(
      authTokenUpdateApiElementResponse,
    ),
  );
}

export function authTokenUpdateApiElementResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiElementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiElementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiElementResponse' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiAuthorizationDetailsResponse$inboundSchema:
  z.ZodType<
    AuthTokenUpdateApiAuthorizationDetailsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthTokenUpdateApiElementResponse$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthTokenUpdateApiAuthorizationDetailsResponse$Outbound = {
  elements?: Array<AuthTokenUpdateApiElementResponse$Outbound> | undefined;
};

/** @internal */
export const AuthTokenUpdateApiAuthorizationDetailsResponse$outboundSchema:
  z.ZodType<
    AuthTokenUpdateApiAuthorizationDetailsResponse$Outbound,
    z.ZodTypeDef,
    AuthTokenUpdateApiAuthorizationDetailsResponse
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthTokenUpdateApiElementResponse$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiAuthorizationDetailsResponse$ {
  /** @deprecated use `AuthTokenUpdateApiAuthorizationDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiAuthorizationDetailsResponse$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiAuthorizationDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiAuthorizationDetailsResponse$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiAuthorizationDetailsResponse$Outbound` instead. */
  export type Outbound =
    AuthTokenUpdateApiAuthorizationDetailsResponse$Outbound;
}

export function authTokenUpdateApiAuthorizationDetailsResponseToJSON(
  authTokenUpdateApiAuthorizationDetailsResponse:
    AuthTokenUpdateApiAuthorizationDetailsResponse,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiAuthorizationDetailsResponse$outboundSchema.parse(
      authTokenUpdateApiAuthorizationDetailsResponse,
    ),
  );
}

export function authTokenUpdateApiAuthorizationDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenUpdateApiAuthorizationDetailsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenUpdateApiAuthorizationDetailsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenUpdateApiAuthorizationDetailsResponse' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiResponse$inboundSchema: z.ZodType<
  AuthTokenUpdateApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenUpdateApiAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenUpdateApiPropertyResponse$inboundSchema),
  ).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenUpdateApiAuthorizationDetailsResponse$inboundSchema
  ).optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/** @internal */
export type AuthTokenUpdateApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  properties?: Array<AuthTokenUpdateApiPropertyResponse$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenUpdateApiAuthorizationDetailsResponse$Outbound
    | undefined;
  tokenType?: string | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const AuthTokenUpdateApiResponse$outboundSchema: z.ZodType<
  AuthTokenUpdateApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenUpdateApiAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenUpdateApiPropertyResponse$outboundSchema),
  ).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenUpdateApiAuthorizationDetailsResponse$outboundSchema
  ).optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiResponse$ {
  /** @deprecated use `AuthTokenUpdateApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiResponse$Outbound;
}

export function authTokenUpdateApiResponseToJSON(
  authTokenUpdateApiResponse: AuthTokenUpdateApiResponse,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiResponse$outboundSchema.parse(authTokenUpdateApiResponse),
  );
}

export function authTokenUpdateApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiResponse' from JSON`,
  );
}
