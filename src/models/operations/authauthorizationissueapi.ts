/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthAuthorizationIssueApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthAuthorizationIssueApiProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthAuthorizationIssueApiElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthAuthorizationIssueApiAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthAuthorizationIssueApiElement> | undefined;
};

export type AuthAuthorizationIssueApiRequestBody = {
  /**
   * The ticket issued from Authlete `/auth/authorization` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The subject (= a user account managed by the service) who has granted authorization to the client application.
   *
   * @remarks
   */
  subject: string;
  /**
   * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference performed for the end-user authentication.
   */
  acr?: string | undefined;
  /**
   * The claims of the end-user (= pieces of information about the end-user) in JSON format.
   *
   * @remarks
   * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
   */
  claims?: string | undefined;
  /**
   * Extra properties to associate with an access token and/or an authorization code.
   */
  properties?: Array<AuthAuthorizationIssueApiProperty> | undefined;
  /**
   * Scopes to associate with an access token and/or an authorization code.
   *
   * @remarks
   * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
   */
  scopes?: Array<string> | undefined;
  /**
   * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
   *
   * @remarks
   * the value of the `subject` request parameter is used as the value of the `sub` claim.
   */
  sub?: string | undefined;
  /**
   * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
   *
   * @remarks
   * the authorization request.
   */
  idtHeaderParams?: string | undefined;
  /**
   * Claim key-value pairs that are used to compute transformed claims.
   *
   * @remarks
   */
  claimsForTx?: string | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthAuthorizationIssueApiAuthorizationDetails
    | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
};

export type AuthAuthorizationIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthAuthorizationIssueApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationIssueApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationIssueApiAction = ClosedEnum<
  typeof AuthAuthorizationIssueApiAction
>;

export type AuthAuthorizationIssueApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationIssueApiAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. Note that an access token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
   *
   * @remarks
   * since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains `id_token`.
   */
  idToken?: string | undefined;
  /**
   * The newly issued authorization code. Note that an authorization code is issued only
   *
   * @remarks
   * when `response_type` contains code.
   */
  authorizationCode?: string | undefined;
  /**
   * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
   *
   * @remarks
   * this property is always set to `null`.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The information about the ticket.
   *
   * @remarks
   */
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiProperty$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiProperty$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiProperty$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiProperty$ {
  /** @deprecated use `AuthAuthorizationIssueApiProperty$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiProperty$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiProperty$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiProperty$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiProperty$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiProperty$Outbound;
}

export function authAuthorizationIssueApiPropertyToJSON(
  authAuthorizationIssueApiProperty: AuthAuthorizationIssueApiProperty,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiProperty$outboundSchema.parse(
      authAuthorizationIssueApiProperty,
    ),
  );
}

export function authAuthorizationIssueApiPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationIssueApiProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiProperty' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiElement$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiElement$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiElement$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiElement$ {
  /** @deprecated use `AuthAuthorizationIssueApiElement$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiElement$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiElement$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationIssueApiElement$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiElement$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiElement$Outbound;
}

export function authAuthorizationIssueApiElementToJSON(
  authAuthorizationIssueApiElement: AuthAuthorizationIssueApiElement,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiElement$outboundSchema.parse(
      authAuthorizationIssueApiElement,
    ),
  );
}

export function authAuthorizationIssueApiElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationIssueApiElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiElement' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthAuthorizationIssueApiElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthAuthorizationIssueApiAuthorizationDetails$Outbound = {
  elements?: Array<AuthAuthorizationIssueApiElement$Outbound> | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthAuthorizationIssueApiElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiAuthorizationDetails$ {
  /** @deprecated use `AuthAuthorizationIssueApiAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiAuthorizationDetails$Outbound;
}

export function authAuthorizationIssueApiAuthorizationDetailsToJSON(
  authAuthorizationIssueApiAuthorizationDetails:
    AuthAuthorizationIssueApiAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiAuthorizationDetails$outboundSchema.parse(
      authAuthorizationIssueApiAuthorizationDetails,
    ),
  );
}

export function authAuthorizationIssueApiAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationIssueApiAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationIssueApiAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationIssueApiAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiRequestBody$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(
    z.lazy(() => AuthAuthorizationIssueApiProperty$inboundSchema),
  ).optional(),
  scopes: z.array(z.string()).optional(),
  sub: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  claimsForTx: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthAuthorizationIssueApiAuthorizationDetails$inboundSchema
  ).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiRequestBody$Outbound = {
  ticket: string;
  subject: string;
  authTime?: number | undefined;
  acr?: string | undefined;
  claims?: string | undefined;
  properties?: Array<AuthAuthorizationIssueApiProperty$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  sub?: string | undefined;
  idtHeaderParams?: string | undefined;
  claimsForTx?: string | undefined;
  consentedClaims?: Array<string> | undefined;
  authorizationDetails?:
    | AuthAuthorizationIssueApiAuthorizationDetails$Outbound
    | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiRequestBody$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiRequestBody
> = z.object({
  ticket: z.string(),
  subject: z.string(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(
    z.lazy(() => AuthAuthorizationIssueApiProperty$outboundSchema),
  ).optional(),
  scopes: z.array(z.string()).optional(),
  sub: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  claimsForTx: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthAuthorizationIssueApiAuthorizationDetails$outboundSchema
  ).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiRequestBody$ {
  /** @deprecated use `AuthAuthorizationIssueApiRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiRequestBody$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiRequestBody$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequestBody$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiRequestBody$Outbound;
}

export function authAuthorizationIssueApiRequestBodyToJSON(
  authAuthorizationIssueApiRequestBody: AuthAuthorizationIssueApiRequestBody,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiRequestBody$outboundSchema.parse(
      authAuthorizationIssueApiRequestBody,
    ),
  );
}

export function authAuthorizationIssueApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationIssueApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiRequest$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthAuthorizationIssueApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthAuthorizationIssueApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthAuthorizationIssueApiRequestBody$Outbound;
};

/** @internal */
export const AuthAuthorizationIssueApiRequest$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    AuthAuthorizationIssueApiRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiRequest$ {
  /** @deprecated use `AuthAuthorizationIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationIssueApiRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiRequest$Outbound;
}

export function authAuthorizationIssueApiRequestToJSON(
  authAuthorizationIssueApiRequest: AuthAuthorizationIssueApiRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiRequest$outboundSchema.parse(
      authAuthorizationIssueApiRequest,
    ),
  );
}

export function authAuthorizationIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationIssueApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationIssueApiAction
> = z.nativeEnum(AuthAuthorizationIssueApiAction);

/** @internal */
export const AuthAuthorizationIssueApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationIssueApiAction
> = AuthAuthorizationIssueApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiAction$ {
  /** @deprecated use `AuthAuthorizationIssueApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationIssueApiAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationIssueApiResponse$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationIssueApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationIssueApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  idToken?: string | undefined;
  authorizationCode?: string | undefined;
  jwtAccessToken?: string | undefined;
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiResponse$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationIssueApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiResponse$ {
  /** @deprecated use `AuthAuthorizationIssueApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationIssueApiResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiResponse$Outbound;
}

export function authAuthorizationIssueApiResponseToJSON(
  authAuthorizationIssueApiResponse: AuthAuthorizationIssueApiResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationIssueApiResponse$outboundSchema.parse(
      authAuthorizationIssueApiResponse,
    ),
  );
}

export function authAuthorizationIssueApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationIssueApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationIssueApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationIssueApiResponse' from JSON`,
  );
}
