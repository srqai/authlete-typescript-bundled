/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClientAuthorizationGetListApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type ClientAuthorizationGetListApiRequest = {
  /**
   * Unique user ID of an end-user.
   *
   * @remarks
   */
  subject: string;
  /**
   * Unique ID of a client developer.
   *
   * @remarks
   */
  developer?: string | undefined;
  /**
   * Start index of search results (inclusive). The default value is 0.
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive). The default value is 5.
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * A service ID.
   */
  serviceId: string;
};

export type ClientAuthorizationGetListApiClientName = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientAuthorizationGetListApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const ClientAuthorizationGetListApiClientType = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type ClientAuthorizationGetListApiClientType = ClosedEnum<
  typeof ClientAuthorizationGetListApiClientType
>;

export type ClientAuthorizationGetListApiClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<ClientAuthorizationGetListApiClientName> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<ClientAuthorizationGetListApiDescription> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: ClientAuthorizationGetListApiClientType | undefined;
};

export type ClientAuthorizationGetListApiResponse = {
  /**
   * Start index of search results (inclusive).
   *
   * @remarks
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive).
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * Unique ID of a client developer.
   *
   * @remarks
   */
  developer?: string | undefined;
  /**
   * Unique user ID of an end-user.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * Unique ID of a client developer.
   *
   * @remarks
   */
  totalCount?: number | undefined;
  /**
   * An array of clients.
   *
   * @remarks
   */
  clients?: Array<ClientAuthorizationGetListApiClient> | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiRequest$inboundSchema: z.ZodType<
  ClientAuthorizationGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  serviceId: z.string(),
});

/** @internal */
export type ClientAuthorizationGetListApiRequest$Outbound = {
  subject: string;
  developer?: string | undefined;
  start?: number | undefined;
  end?: number | undefined;
  serviceId: string;
};

/** @internal */
export const ClientAuthorizationGetListApiRequest$outboundSchema: z.ZodType<
  ClientAuthorizationGetListApiRequest$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationGetListApiRequest
> = z.object({
  subject: z.string(),
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  serviceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiRequest$ {
  /** @deprecated use `ClientAuthorizationGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiRequest$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiRequest$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiRequest$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiRequest$Outbound;
}

export function clientAuthorizationGetListApiRequestToJSON(
  clientAuthorizationGetListApiRequest: ClientAuthorizationGetListApiRequest,
): string {
  return JSON.stringify(
    ClientAuthorizationGetListApiRequest$outboundSchema.parse(
      clientAuthorizationGetListApiRequest,
    ),
  );
}

export function clientAuthorizationGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationGetListApiClientName$inboundSchema: z.ZodType<
  ClientAuthorizationGetListApiClientName,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientAuthorizationGetListApiClientName$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiClientName$outboundSchema: z.ZodType<
  ClientAuthorizationGetListApiClientName$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationGetListApiClientName
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiClientName$ {
  /** @deprecated use `ClientAuthorizationGetListApiClientName$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiClientName$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiClientName$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiClientName$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiClientName$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiClientName$Outbound;
}

export function clientAuthorizationGetListApiClientNameToJSON(
  clientAuthorizationGetListApiClientName:
    ClientAuthorizationGetListApiClientName,
): string {
  return JSON.stringify(
    ClientAuthorizationGetListApiClientName$outboundSchema.parse(
      clientAuthorizationGetListApiClientName,
    ),
  );
}

export function clientAuthorizationGetListApiClientNameFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientAuthorizationGetListApiClientName,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationGetListApiClientName$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientAuthorizationGetListApiClientName' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationGetListApiDescription$inboundSchema: z.ZodType<
  ClientAuthorizationGetListApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientAuthorizationGetListApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiDescription$outboundSchema: z.ZodType<
  ClientAuthorizationGetListApiDescription$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationGetListApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiDescription$ {
  /** @deprecated use `ClientAuthorizationGetListApiDescription$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiDescription$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiDescription$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiDescription$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiDescription$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiDescription$Outbound;
}

export function clientAuthorizationGetListApiDescriptionToJSON(
  clientAuthorizationGetListApiDescription:
    ClientAuthorizationGetListApiDescription,
): string {
  return JSON.stringify(
    ClientAuthorizationGetListApiDescription$outboundSchema.parse(
      clientAuthorizationGetListApiDescription,
    ),
  );
}

export function clientAuthorizationGetListApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientAuthorizationGetListApiDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationGetListApiDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientAuthorizationGetListApiDescription' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationGetListApiClientType$inboundSchema:
  z.ZodNativeEnum<typeof ClientAuthorizationGetListApiClientType> = z
    .nativeEnum(ClientAuthorizationGetListApiClientType);

/** @internal */
export const ClientAuthorizationGetListApiClientType$outboundSchema:
  z.ZodNativeEnum<typeof ClientAuthorizationGetListApiClientType> =
    ClientAuthorizationGetListApiClientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiClientType$ {
  /** @deprecated use `ClientAuthorizationGetListApiClientType$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiClientType$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiClientType$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiClientType$outboundSchema;
}

/** @internal */
export const ClientAuthorizationGetListApiClient$inboundSchema: z.ZodType<
  ClientAuthorizationGetListApiClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => ClientAuthorizationGetListApiClientName$inboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientAuthorizationGetListApiDescription$inboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientAuthorizationGetListApiClientType$inboundSchema.optional(),
});

/** @internal */
export type ClientAuthorizationGetListApiClient$Outbound = {
  number?: number | undefined;
  clientName?: string | undefined;
  clientNames?:
    | Array<ClientAuthorizationGetListApiClientName$Outbound>
    | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<ClientAuthorizationGetListApiDescription$Outbound>
    | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiClient$outboundSchema: z.ZodType<
  ClientAuthorizationGetListApiClient$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationGetListApiClient
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => ClientAuthorizationGetListApiClientName$outboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientAuthorizationGetListApiDescription$outboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientAuthorizationGetListApiClientType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiClient$ {
  /** @deprecated use `ClientAuthorizationGetListApiClient$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiClient$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiClient$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiClient$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiClient$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiClient$Outbound;
}

export function clientAuthorizationGetListApiClientToJSON(
  clientAuthorizationGetListApiClient: ClientAuthorizationGetListApiClient,
): string {
  return JSON.stringify(
    ClientAuthorizationGetListApiClient$outboundSchema.parse(
      clientAuthorizationGetListApiClient,
    ),
  );
}

export function clientAuthorizationGetListApiClientFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationGetListApiClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationGetListApiClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationGetListApiClient' from JSON`,
  );
}

/** @internal */
export const ClientAuthorizationGetListApiResponse$inboundSchema: z.ZodType<
  ClientAuthorizationGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  developer: z.string().optional(),
  subject: z.string().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(
    z.lazy(() => ClientAuthorizationGetListApiClient$inboundSchema),
  ).optional(),
});

/** @internal */
export type ClientAuthorizationGetListApiResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  developer?: string | undefined;
  subject?: string | undefined;
  totalCount?: number | undefined;
  clients?: Array<ClientAuthorizationGetListApiClient$Outbound> | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiResponse$outboundSchema: z.ZodType<
  ClientAuthorizationGetListApiResponse$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationGetListApiResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  developer: z.string().optional(),
  subject: z.string().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(
    z.lazy(() => ClientAuthorizationGetListApiClient$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiResponse$ {
  /** @deprecated use `ClientAuthorizationGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiResponse$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiResponse$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiResponse$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiResponse$Outbound;
}

export function clientAuthorizationGetListApiResponseToJSON(
  clientAuthorizationGetListApiResponse: ClientAuthorizationGetListApiResponse,
): string {
  return JSON.stringify(
    ClientAuthorizationGetListApiResponse$outboundSchema.parse(
      clientAuthorizationGetListApiResponse,
    ),
  );
}

export function clientAuthorizationGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationGetListApiResponse' from JSON`,
  );
}
