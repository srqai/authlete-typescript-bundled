/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthIntrospectionApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthIntrospectionApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthIntrospectionApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthIntrospectionApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthIntrospectionApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthIntrospectionApiFormAction = ClosedEnum<
  typeof AuthIntrospectionApiFormAction
>;

export type AuthIntrospectionApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthIntrospectionApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthIntrospectionApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthIntrospectionApiFormElement> | undefined;
};

export type AuthIntrospectionApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiFormDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiFormAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiFormScopeDetail = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<AuthIntrospectionApiFormDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<AuthIntrospectionApiFormAttribute> | undefined;
};

export type AuthIntrospectionApiFormScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type AuthIntrospectionApiFormGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthIntrospectionApiFormGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthIntrospectionApiFormGrantElement> | undefined;
};

export type AuthIntrospectionApiFormGrant = {
  scopes?: Array<AuthIntrospectionApiFormScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthIntrospectionApiFormGrantAuthorizationDetails
    | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthIntrospectionApiFormGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthIntrospectionApiFormGrantType = ClosedEnum<
  typeof AuthIntrospectionApiFormGrantType
>;

export type AuthIntrospectionApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthIntrospectionApiFormAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
   *
   * @remarks
   */
  responseContent?: string | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The time at which the access token expires.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  expiresAt?: number | undefined;
  /**
   * The subject who is associated with the access token.
   *
   * @remarks
   * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * `true` if the access token exists.
   *
   * @remarks
   */
  existent?: boolean | undefined;
  /**
   * true` if the access token is usable (= exists and has not expired).
   *
   * @remarks
   */
  usable?: boolean | undefined;
  /**
   * `true` if the access token exists.
   *
   * @remarks
   */
  sufficient?: boolean | undefined;
  /**
   * `true` if the access token can be refreshed using the associated refresh token which had been issued
   *
   * @remarks
   * along with the access token. `false` if the refresh token for the access token has expired or the access
   * token has no associated refresh token.
   */
  refreshable?: boolean | undefined;
  /**
   * The extra properties associated with the access token.
   */
  properties?: Array<AuthIntrospectionApiFormProperty> | undefined;
  /**
   * The client certificate thumbprint used to validate the access token.
   *
   * @remarks
   */
  certificateThumbprint?: string | undefined;
  /**
   * The target resources. This represents the resources specified by the `resource` request parameters
   *
   * @remarks
   * or by the `resource` property in the request object.
   *
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
   *
   * @remarks
   *
   * In some flows, the initial request and the subsequent token request are sent to different endpoints.
   * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
   * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
   * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
   * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
   * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
   *
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthIntrospectionApiFormAuthorizationDetails
    | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?:
    | Array<AuthIntrospectionApiFormServiceAttribute>
    | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<AuthIntrospectionApiFormClientAttribute> | undefined;
  /**
   * The scopes property of this class is a list of scope names. The property does not hold information
   *
   * @remarks
   * about scope attributes. This scopeDetails property was newly created to convey information about
   * scope attributes.
   */
  scopeDetails?: Array<AuthIntrospectionApiFormScopeDetail> | undefined;
  /**
   * The value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: AuthIntrospectionApiFormGrant | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  grantType?: AuthIntrospectionApiFormGrantType | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication that the authorization server performed
   *
   * @remarks
   * during the course of issuing the access token.
   */
  acr?: string | undefined;
  /**
   * The time when the user authentication was performed during the course of issuing the access token.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The flag indicating whether the token is for credential issuance.
   */
  forCredentialIssuance?: boolean | undefined;
  /**
   * The c_nonce
   */
  cnonce?: string | undefined;
  /**
   * The time at which the `c_nonce` expires.
   */
  cnonceExpiresAt?: number | undefined;
  /**
   * The credentials that can be obtained by presenting the access token.
   */
  issuableCredentials?: string | undefined;
  /**
   * The expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormRequestBody$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthIntrospectionApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiFormRequestBody$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormRequestBody$ {
  /** @deprecated use `AuthIntrospectionApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormRequestBody$Outbound;
}

export function authIntrospectionApiFormRequestBodyToJSON(
  authIntrospectionApiFormRequestBody: AuthIntrospectionApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormRequestBody$outboundSchema.parse(
      authIntrospectionApiFormRequestBody,
    ),
  );
}

export function authIntrospectionApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormRequest$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthIntrospectionApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthIntrospectionApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthIntrospectionApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthIntrospectionApiFormRequest$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthIntrospectionApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormRequest$ {
  /** @deprecated use `AuthIntrospectionApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormRequest$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormRequest$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormRequest$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormRequest$Outbound;
}

export function authIntrospectionApiFormRequestToJSON(
  authIntrospectionApiFormRequest: AuthIntrospectionApiFormRequest,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormRequest$outboundSchema.parse(
      authIntrospectionApiFormRequest,
    ),
  );
}

export function authIntrospectionApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiFormAction
> = z.nativeEnum(AuthIntrospectionApiFormAction);

/** @internal */
export const AuthIntrospectionApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiFormAction
> = AuthIntrospectionApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormAction$ {
  /** @deprecated use `AuthIntrospectionApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormAction$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormAction$outboundSchema;
}

/** @internal */
export const AuthIntrospectionApiFormProperty$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormProperty$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormProperty$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormProperty$ {
  /** @deprecated use `AuthIntrospectionApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormProperty$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormProperty$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormProperty$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormProperty$Outbound;
}

export function authIntrospectionApiFormPropertyToJSON(
  authIntrospectionApiFormProperty: AuthIntrospectionApiFormProperty,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormProperty$outboundSchema.parse(
      authIntrospectionApiFormProperty,
    ),
  );
}

export function authIntrospectionApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormProperty' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormElement$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormElement$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormElement$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormElement$ {
  /** @deprecated use `AuthIntrospectionApiFormElement$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormElement$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormElement$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormElement$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormElement$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormElement$Outbound;
}

export function authIntrospectionApiFormElementToJSON(
  authIntrospectionApiFormElement: AuthIntrospectionApiFormElement,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormElement$outboundSchema.parse(
      authIntrospectionApiFormElement,
    ),
  );
}

export function authIntrospectionApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormElement' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthIntrospectionApiFormElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthIntrospectionApiFormAuthorizationDetails$Outbound = {
  elements?: Array<AuthIntrospectionApiFormElement$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthIntrospectionApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormAuthorizationDetails$ {
  /** @deprecated use `AuthIntrospectionApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormAuthorizationDetails$Outbound;
}

export function authIntrospectionApiFormAuthorizationDetailsToJSON(
  authIntrospectionApiFormAuthorizationDetails:
    AuthIntrospectionApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormAuthorizationDetails$outboundSchema.parse(
      authIntrospectionApiFormAuthorizationDetails,
    ),
  );
}

export function authIntrospectionApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormServiceAttribute$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormServiceAttribute$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormServiceAttribute$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormServiceAttribute$ {
  /** @deprecated use `AuthIntrospectionApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormServiceAttribute$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormServiceAttribute$Outbound;
}

export function authIntrospectionApiFormServiceAttributeToJSON(
  authIntrospectionApiFormServiceAttribute:
    AuthIntrospectionApiFormServiceAttribute,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormServiceAttribute$outboundSchema.parse(
      authIntrospectionApiFormServiceAttribute,
    ),
  );
}

export function authIntrospectionApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionApiFormServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormServiceAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormClientAttribute$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormClientAttribute$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormClientAttribute$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormClientAttribute$ {
  /** @deprecated use `AuthIntrospectionApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormClientAttribute$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormClientAttribute$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormClientAttribute$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormClientAttribute$Outbound;
}

export function authIntrospectionApiFormClientAttributeToJSON(
  authIntrospectionApiFormClientAttribute:
    AuthIntrospectionApiFormClientAttribute,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormClientAttribute$outboundSchema.parse(
      authIntrospectionApiFormClientAttribute,
    ),
  );
}

export function authIntrospectionApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionApiFormClientAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormClientAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormDescription$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormDescription$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormDescription$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormDescription$ {
  /** @deprecated use `AuthIntrospectionApiFormDescription$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormDescription$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormDescription$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormDescription$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormDescription$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormDescription$Outbound;
}

export function authIntrospectionApiFormDescriptionToJSON(
  authIntrospectionApiFormDescription: AuthIntrospectionApiFormDescription,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormDescription$outboundSchema.parse(
      authIntrospectionApiFormDescription,
    ),
  );
}

export function authIntrospectionApiFormDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormDescription' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormAttribute$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormAttribute$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormAttribute$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormAttribute$ {
  /** @deprecated use `AuthIntrospectionApiFormAttribute$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormAttribute$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormAttribute$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormAttribute$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormAttribute$Outbound;
}

export function authIntrospectionApiFormAttributeToJSON(
  authIntrospectionApiFormAttribute: AuthIntrospectionApiFormAttribute,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormAttribute$outboundSchema.parse(
      authIntrospectionApiFormAttribute,
    ),
  );
}

export function authIntrospectionApiFormAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormAttribute' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormScopeDetail$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormScopeDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthIntrospectionApiFormDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => AuthIntrospectionApiFormAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type AuthIntrospectionApiFormScopeDetail$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<AuthIntrospectionApiFormDescription$Outbound>
    | undefined;
  attributes?: Array<AuthIntrospectionApiFormAttribute$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormScopeDetail$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormScopeDetail$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormScopeDetail
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthIntrospectionApiFormDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => AuthIntrospectionApiFormAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormScopeDetail$ {
  /** @deprecated use `AuthIntrospectionApiFormScopeDetail$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormScopeDetail$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormScopeDetail$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormScopeDetail$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormScopeDetail$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormScopeDetail$Outbound;
}

export function authIntrospectionApiFormScopeDetailToJSON(
  authIntrospectionApiFormScopeDetail: AuthIntrospectionApiFormScopeDetail,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormScopeDetail$outboundSchema.parse(
      authIntrospectionApiFormScopeDetail,
    ),
  );
}

export function authIntrospectionApiFormScopeDetailFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormScopeDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormScopeDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormScopeDetail' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormScope$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type AuthIntrospectionApiFormScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormScope$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormScope$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormScope$ {
  /** @deprecated use `AuthIntrospectionApiFormScope$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormScope$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormScope$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormScope$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormScope$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormScope$Outbound;
}

export function authIntrospectionApiFormScopeToJSON(
  authIntrospectionApiFormScope: AuthIntrospectionApiFormScope,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormScope$outboundSchema.parse(
      authIntrospectionApiFormScope,
    ),
  );
}

export function authIntrospectionApiFormScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormScope' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormGrantElement$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormGrantElement$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormGrantElement$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormGrantElement$ {
  /** @deprecated use `AuthIntrospectionApiFormGrantElement$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormGrantElement$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormGrantElement$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrantElement$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormGrantElement$Outbound;
}

export function authIntrospectionApiFormGrantElementToJSON(
  authIntrospectionApiFormGrantElement: AuthIntrospectionApiFormGrantElement,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormGrantElement$outboundSchema.parse(
      authIntrospectionApiFormGrantElement,
    ),
  );
}

export function authIntrospectionApiFormGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormGrantElement' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthIntrospectionApiFormGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthIntrospectionApiFormGrantAuthorizationDetails$Outbound = {
  elements?: Array<AuthIntrospectionApiFormGrantElement$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionApiFormGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthIntrospectionApiFormGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormGrantAuthorizationDetails$ {
  /** @deprecated use `AuthIntrospectionApiFormGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    AuthIntrospectionApiFormGrantAuthorizationDetails$Outbound;
}

export function authIntrospectionApiFormGrantAuthorizationDetailsToJSON(
  authIntrospectionApiFormGrantAuthorizationDetails:
    AuthIntrospectionApiFormGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormGrantAuthorizationDetails$outboundSchema.parse(
      authIntrospectionApiFormGrantAuthorizationDetails,
    ),
  );
}

export function authIntrospectionApiFormGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionApiFormGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiFormGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionApiFormGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormGrant$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.lazy(() => AuthIntrospectionApiFormScope$inboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiFormGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type AuthIntrospectionApiFormGrant$Outbound = {
  scopes?: Array<AuthIntrospectionApiFormScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | AuthIntrospectionApiFormGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormGrant$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormGrant$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormGrant
> = z.object({
  scopes: z.array(z.lazy(() => AuthIntrospectionApiFormScope$outboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiFormGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormGrant$ {
  /** @deprecated use `AuthIntrospectionApiFormGrant$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormGrant$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrant$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormGrant$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrant$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormGrant$Outbound;
}

export function authIntrospectionApiFormGrantToJSON(
  authIntrospectionApiFormGrant: AuthIntrospectionApiFormGrant,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormGrant$outboundSchema.parse(
      authIntrospectionApiFormGrant,
    ),
  );
}

export function authIntrospectionApiFormGrantFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormGrant' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiFormGrantType$inboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiFormGrantType
> = z.nativeEnum(AuthIntrospectionApiFormGrantType);

/** @internal */
export const AuthIntrospectionApiFormGrantType$outboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiFormGrantType
> = AuthIntrospectionApiFormGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormGrantType$ {
  /** @deprecated use `AuthIntrospectionApiFormGrantType$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormGrantType$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormGrantType$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormGrantType$outboundSchema;
}

/** @internal */
export const AuthIntrospectionApiFormResponse$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  expiresAt: z.number().int().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  existent: z.boolean().optional(),
  usable: z.boolean().optional(),
  sufficient: z.boolean().optional(),
  refreshable: z.boolean().optional(),
  properties: z.array(
    z.lazy(() => AuthIntrospectionApiFormProperty$inboundSchema),
  ).optional(),
  certificateThumbprint: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiFormServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiFormClientAttribute$inboundSchema),
  ).optional(),
  scopeDetails: z.array(
    z.lazy(() => AuthIntrospectionApiFormScopeDetail$inboundSchema),
  ).optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthIntrospectionApiFormGrant$inboundSchema).optional(),
  forExternalAttachment: z.boolean().optional(),
  consentedClaims: z.array(z.string()).optional(),
  grantType: AuthIntrospectionApiFormGrantType$inboundSchema.optional(),
  acr: z.string().optional(),
  authTime: z.number().int().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  forCredentialIssuance: z.boolean().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  issuableCredentials: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  expiresAt?: number | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  existent?: boolean | undefined;
  usable?: boolean | undefined;
  sufficient?: boolean | undefined;
  refreshable?: boolean | undefined;
  properties?: Array<AuthIntrospectionApiFormProperty$Outbound> | undefined;
  certificateThumbprint?: string | undefined;
  resources?: Array<string> | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthIntrospectionApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<AuthIntrospectionApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<AuthIntrospectionApiFormClientAttribute$Outbound>
    | undefined;
  scopeDetails?:
    | Array<AuthIntrospectionApiFormScopeDetail$Outbound>
    | undefined;
  grantId?: string | undefined;
  grant?: AuthIntrospectionApiFormGrant$Outbound | undefined;
  forExternalAttachment?: boolean | undefined;
  consentedClaims?: Array<string> | undefined;
  grantType?: string | undefined;
  acr?: string | undefined;
  authTime?: number | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  forCredentialIssuance?: boolean | undefined;
  cnonce?: string | undefined;
  cnonceExpiresAt?: number | undefined;
  issuableCredentials?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormResponse$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  expiresAt: z.number().int().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  existent: z.boolean().optional(),
  usable: z.boolean().optional(),
  sufficient: z.boolean().optional(),
  refreshable: z.boolean().optional(),
  properties: z.array(
    z.lazy(() => AuthIntrospectionApiFormProperty$outboundSchema),
  ).optional(),
  certificateThumbprint: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiFormServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiFormClientAttribute$outboundSchema),
  ).optional(),
  scopeDetails: z.array(
    z.lazy(() => AuthIntrospectionApiFormScopeDetail$outboundSchema),
  ).optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthIntrospectionApiFormGrant$outboundSchema).optional(),
  forExternalAttachment: z.boolean().optional(),
  consentedClaims: z.array(z.string()).optional(),
  grantType: AuthIntrospectionApiFormGrantType$outboundSchema.optional(),
  acr: z.string().optional(),
  authTime: z.number().int().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  forCredentialIssuance: z.boolean().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  issuableCredentials: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormResponse$ {
  /** @deprecated use `AuthIntrospectionApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiFormResponse$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiFormResponse$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormResponse$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormResponse$Outbound;
}

export function authIntrospectionApiFormResponseToJSON(
  authIntrospectionApiFormResponse: AuthIntrospectionApiFormResponse,
): string {
  return JSON.stringify(
    AuthIntrospectionApiFormResponse$outboundSchema.parse(
      authIntrospectionApiFormResponse,
    ),
  );
}

export function authIntrospectionApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiFormResponse' from JSON`,
  );
}
