/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciOfferCreateApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciOfferCreateApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type VciOfferCreateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciOfferCreateApiFormRequestBody;
};

/**
 * The result of the `/vci/offer/create` API call.
 */
export const VciOfferCreateApiFormAction = {
  Created: "CREATED",
  Forbidden: "FORBIDDEN",
  CallerError: "CALLER_ERROR",
  AuthleteError: "AUTHLETE_ERROR",
} as const;
/**
 * The result of the `/vci/offer/create` API call.
 */
export type VciOfferCreateApiFormAction = ClosedEnum<
  typeof VciOfferCreateApiFormAction
>;

export type VciOfferCreateApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type VciOfferCreateApiFormInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The credential offer in the JSON format.
   */
  credentialOffer?: string | undefined;
  /**
   * The identifier of the credential issuer.
   */
  credentialIssuer?: string | undefined;
  /**
   * The value of the `credentials` object in the JSON format.
   */
  credentials?: string | undefined;
  /**
   * The flag indicating whether the `authorization_code` object is
   *
   * @remarks
   * included in the `grants` object.
   */
  authorizationCodeGrantIncluded?: boolean | undefined;
  /**
   * The flag indicating whether the `issuer_state` property is
   *
   * @remarks
   * included in the `authorization_code` object in the `grants`
   * object.
   */
  issuerStateIncluded?: boolean | undefined;
  /**
   * The value of the `issuer_state` property in the
   *
   * @remarks
   * `authorization_code` object in the `grants` object.
   */
  issuerState?: string | undefined;
  /**
   * The flag indicating whether the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object is
   * included in the `grants` object.
   */
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  /**
   * The value of the `pre-authorized_code` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  preAuthorizedCode?: string | undefined;
  /**
   * The value of the `user_pin_required` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  userPinRequired?: boolean | undefined;
  /**
   * The value of the user PIN associated with the credential offer.
   */
  userPin?: string | undefined;
  /**
   * The subject associated with the credential offer.
   */
  subject?: string | undefined;
  /**
   * The time at which the credential offer will expire.
   */
  expiresAt?: number | undefined;
  /**
   * The general-purpose arbitrary string.
   */
  context?: string | undefined;
  /**
   * Extra properties to associate with the credential offer.
   */
  properties?: Array<VciOfferCreateApiFormProperty> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT
   *
   * @remarks
   * access token.
   */
  jwtAtClaims?: string | undefined;
  /**
   * The time at which the user authentication was performed during
   *
   * @remarks
   * the course of issuing the credential offer.
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication
   *
   * @remarks
   * performed during the course of issuing the credential offer.
   */
  acr?: string | undefined;
};

export type VciOfferCreateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The result of the `/vci/offer/create` API call.
   */
  action?: VciOfferCreateApiFormAction | undefined;
  info?: VciOfferCreateApiFormInfo | undefined;
};

/** @internal */
export const VciOfferCreateApiFormRequestBody$inboundSchema: z.ZodType<
  VciOfferCreateApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type VciOfferCreateApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiFormRequestBody$outboundSchema: z.ZodType<
  VciOfferCreateApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormRequestBody$ {
  /** @deprecated use `VciOfferCreateApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiFormRequestBody$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiFormRequestBody$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormRequestBody$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormRequestBody$Outbound;
}

export function vciOfferCreateApiFormRequestBodyToJSON(
  vciOfferCreateApiFormRequestBody: VciOfferCreateApiFormRequestBody,
): string {
  return JSON.stringify(
    VciOfferCreateApiFormRequestBody$outboundSchema.parse(
      vciOfferCreateApiFormRequestBody,
    ),
  );
}

export function vciOfferCreateApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferCreateApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferCreateApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferCreateApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const VciOfferCreateApiFormRequest$inboundSchema: z.ZodType<
  VciOfferCreateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciOfferCreateApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciOfferCreateApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: VciOfferCreateApiFormRequestBody$Outbound;
};

/** @internal */
export const VciOfferCreateApiFormRequest$outboundSchema: z.ZodType<
  VciOfferCreateApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciOfferCreateApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormRequest$ {
  /** @deprecated use `VciOfferCreateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiFormRequest$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiFormRequest$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormRequest$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormRequest$Outbound;
}

export function vciOfferCreateApiFormRequestToJSON(
  vciOfferCreateApiFormRequest: VciOfferCreateApiFormRequest,
): string {
  return JSON.stringify(
    VciOfferCreateApiFormRequest$outboundSchema.parse(
      vciOfferCreateApiFormRequest,
    ),
  );
}

export function vciOfferCreateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferCreateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferCreateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferCreateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciOfferCreateApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciOfferCreateApiFormAction
> = z.nativeEnum(VciOfferCreateApiFormAction);

/** @internal */
export const VciOfferCreateApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciOfferCreateApiFormAction
> = VciOfferCreateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormAction$ {
  /** @deprecated use `VciOfferCreateApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiFormAction$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiFormAction$outboundSchema;
}

/** @internal */
export const VciOfferCreateApiFormProperty$inboundSchema: z.ZodType<
  VciOfferCreateApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type VciOfferCreateApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const VciOfferCreateApiFormProperty$outboundSchema: z.ZodType<
  VciOfferCreateApiFormProperty$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormProperty$ {
  /** @deprecated use `VciOfferCreateApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiFormProperty$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiFormProperty$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormProperty$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormProperty$Outbound;
}

export function vciOfferCreateApiFormPropertyToJSON(
  vciOfferCreateApiFormProperty: VciOfferCreateApiFormProperty,
): string {
  return JSON.stringify(
    VciOfferCreateApiFormProperty$outboundSchema.parse(
      vciOfferCreateApiFormProperty,
    ),
  );
}

export function vciOfferCreateApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferCreateApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferCreateApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferCreateApiFormProperty' from JSON`,
  );
}

/** @internal */
export const VciOfferCreateApiFormInfo$inboundSchema: z.ZodType<
  VciOfferCreateApiFormInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  credentials: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  userPinRequired: z.boolean().optional(),
  userPin: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(z.lazy(() => VciOfferCreateApiFormProperty$inboundSchema))
    .optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
});

/** @internal */
export type VciOfferCreateApiFormInfo$Outbound = {
  identifier?: string | undefined;
  credentialOffer?: string | undefined;
  credentialIssuer?: string | undefined;
  credentials?: string | undefined;
  authorizationCodeGrantIncluded?: boolean | undefined;
  issuerStateIncluded?: boolean | undefined;
  issuerState?: string | undefined;
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  preAuthorizedCode?: string | undefined;
  userPinRequired?: boolean | undefined;
  userPin?: string | undefined;
  subject?: string | undefined;
  expiresAt?: number | undefined;
  context?: string | undefined;
  properties?: Array<VciOfferCreateApiFormProperty$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
};

/** @internal */
export const VciOfferCreateApiFormInfo$outboundSchema: z.ZodType<
  VciOfferCreateApiFormInfo$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormInfo
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  credentials: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  userPinRequired: z.boolean().optional(),
  userPin: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(
    z.lazy(() => VciOfferCreateApiFormProperty$outboundSchema),
  ).optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormInfo$ {
  /** @deprecated use `VciOfferCreateApiFormInfo$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiFormInfo$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormInfo$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiFormInfo$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormInfo$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormInfo$Outbound;
}

export function vciOfferCreateApiFormInfoToJSON(
  vciOfferCreateApiFormInfo: VciOfferCreateApiFormInfo,
): string {
  return JSON.stringify(
    VciOfferCreateApiFormInfo$outboundSchema.parse(vciOfferCreateApiFormInfo),
  );
}

export function vciOfferCreateApiFormInfoFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferCreateApiFormInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferCreateApiFormInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferCreateApiFormInfo' from JSON`,
  );
}

/** @internal */
export const VciOfferCreateApiFormResponse$inboundSchema: z.ZodType<
  VciOfferCreateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciOfferCreateApiFormAction$inboundSchema.optional(),
  info: z.lazy(() => VciOfferCreateApiFormInfo$inboundSchema).optional(),
});

/** @internal */
export type VciOfferCreateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  info?: VciOfferCreateApiFormInfo$Outbound | undefined;
};

/** @internal */
export const VciOfferCreateApiFormResponse$outboundSchema: z.ZodType<
  VciOfferCreateApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciOfferCreateApiFormAction$outboundSchema.optional(),
  info: z.lazy(() => VciOfferCreateApiFormInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormResponse$ {
  /** @deprecated use `VciOfferCreateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiFormResponse$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiFormResponse$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormResponse$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormResponse$Outbound;
}

export function vciOfferCreateApiFormResponseToJSON(
  vciOfferCreateApiFormResponse: VciOfferCreateApiFormResponse,
): string {
  return JSON.stringify(
    VciOfferCreateApiFormResponse$outboundSchema.parse(
      vciOfferCreateApiFormResponse,
    ),
  );
}

export function vciOfferCreateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferCreateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferCreateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferCreateApiFormResponse' from JSON`,
  );
}
