/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthAuthorizationApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthAuthorizationApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthAuthorizationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthAuthorizationApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthAuthorizationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
  NoInteraction: "NO_INTERACTION",
  Interaction: "INTERACTION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthAuthorizationApiFormAction = ClosedEnum<
  typeof AuthAuthorizationApiFormAction
>;

export type AuthAuthorizationApiFormClientName = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormClientDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const AuthAuthorizationApiFormClientType = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type AuthAuthorizationApiFormClientType = ClosedEnum<
  typeof AuthAuthorizationApiFormClientType
>;

export type AuthAuthorizationApiFormLogoUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormTosUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormPolicyUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<AuthAuthorizationApiFormClientName> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<AuthAuthorizationApiFormClientDescription> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: AuthAuthorizationApiFormClientType | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<AuthAuthorizationApiFormLogoUris> | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<AuthAuthorizationApiFormTosUris> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<AuthAuthorizationApiFormPolicyUris> | undefined;
};

/**
 * The display mode which the client application requests by `display` request parameter.
 *
 * @remarks
 * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
 *
 * It is ensured that the value of `display` is one of the supported display modes which are specified
 * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
 * authorization request is not supported, an error is raised.
 *
 * Values for this property correspond to the values listed in
 * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
 */
export const AuthAuthorizationApiFormDisplay = {
  Page: "PAGE",
  Popup: "POPUP",
  Touch: "TOUCH",
  Wap: "WAP",
} as const;
/**
 * The display mode which the client application requests by `display` request parameter.
 *
 * @remarks
 * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
 *
 * It is ensured that the value of `display` is one of the supported display modes which are specified
 * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
 * authorization request is not supported, an error is raised.
 *
 * Values for this property correspond to the values listed in
 * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
 */
export type AuthAuthorizationApiFormDisplay = ClosedEnum<
  typeof AuthAuthorizationApiFormDisplay
>;

export type AuthAuthorizationApiFormMetadatum = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthAuthorizationApiFormSupportedGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthAuthorizationApiFormSupportedGrantType = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedGrantType
>;

export const AuthAuthorizationApiFormSupportedResponseType = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type AuthAuthorizationApiFormSupportedResponseType = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedResponseType
>;

export const AuthAuthorizationApiFormSupportedServiceProfile = {
  Fapi: "FAPI",
  OpenBanking: "OPEN_BANKING",
} as const;
export type AuthAuthorizationApiFormSupportedServiceProfile = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedServiceProfile
>;

/**
 * The display mode which the client application requests by `display` request parameter.
 *
 * @remarks
 * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
 *
 * It is ensured that the value of `display` is one of the supported display modes which are specified
 * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
 * authorization request is not supported, an error is raised.
 *
 * Values for this property correspond to the values listed in
 * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
 */
export const AuthAuthorizationApiFormSupportedDisplay = {
  Page: "PAGE",
  Popup: "POPUP",
  Touch: "TOUCH",
  Wap: "WAP",
} as const;
/**
 * The display mode which the client application requests by `display` request parameter.
 *
 * @remarks
 * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
 *
 * It is ensured that the value of `display` is one of the supported display modes which are specified
 * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
 * authorization request is not supported, an error is raised.
 *
 * Values for this property correspond to the values listed in
 * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
 */
export type AuthAuthorizationApiFormSupportedDisplay = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedDisplay
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const AuthAuthorizationApiFormSupportedTokenAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type AuthAuthorizationApiFormSupportedTokenAuthMethod = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedTokenAuthMethod
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const AuthAuthorizationApiFormSupportedRevocationAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type AuthAuthorizationApiFormSupportedRevocationAuthMethod = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedRevocationAuthMethod
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const AuthAuthorizationApiFormSupportedIntrospectionAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type AuthAuthorizationApiFormSupportedIntrospectionAuthMethod =
  ClosedEnum<typeof AuthAuthorizationApiFormSupportedIntrospectionAuthMethod>;

export type AuthAuthorizationApiFormMtlsEndpointAlias = {
  name?: string | undefined;
  uri?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const AuthAuthorizationApiFormAccessTokenSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type AuthAuthorizationApiFormAccessTokenSignAlg = ClosedEnum<
  typeof AuthAuthorizationApiFormAccessTokenSignAlg
>;

export type AuthAuthorizationApiFormServiceDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormSupportedScopeAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormSupportedScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<AuthAuthorizationApiFormServiceDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?:
    | Array<AuthAuthorizationApiFormSupportedScopeAttribute>
    | undefined;
};

export const AuthAuthorizationApiFormSupportedClaimType = {
  Normal: "NORMAL",
  Aggregated: "AGGREGATED",
  Distributed: "DISTRIBUTED",
} as const;
export type AuthAuthorizationApiFormSupportedClaimType = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedClaimType
>;

export const AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode = {
  Ping: "PING",
  Poll: "POLL",
  Push: "PUSH",
} as const;
export type AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode =
  ClosedEnum<
    typeof AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode
  >;

/**
 * The character set for end-user verification codes (`user_code`) for Device Flow.
 *
 * @remarks
 */
export const AuthAuthorizationApiFormUserCodeCharset = {
  Base20: "BASE20",
  Numeric: "NUMERIC",
} as const;
/**
 * The character set for end-user verification codes (`user_code`) for Device Flow.
 *
 * @remarks
 */
export type AuthAuthorizationApiFormUserCodeCharset = ClosedEnum<
  typeof AuthAuthorizationApiFormUserCodeCharset
>;

/**
 * OIDC4IDA / verifiedClaimsValidationSchemaSet
 *
 * @remarks
 */
export const AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet = {
  Standard: "standard",
  StandardPlusIdDocument: "standard+id_document",
} as const;
/**
 * OIDC4IDA / verifiedClaimsValidationSchemaSet
 *
 * @remarks
 */
export type AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet =
  ClosedEnum<typeof AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet>;

export type AuthAuthorizationApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * Holds information about a key managed in an HSM (Hardware Security Module)
 *
 * @remarks
 */
export type AuthAuthorizationApiFormHsk = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * Get the use of the key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

/**
 * Supported attachment types. This property corresponds to the `attachments_supported`
 *
 * @remarks
 *  server metadata which was added by the third implementer's draft of OpenID Connect
 *  for Identity Assurance 1.0.
 */
export const AuthAuthorizationApiFormSupportedAttachment = {
  Embedded: "EMBEDDED",
  External: "EXTERNAL",
} as const;
/**
 * Supported attachment types. This property corresponds to the `attachments_supported`
 *
 * @remarks
 *  server metadata which was added by the third implementer's draft of OpenID Connect
 *  for Identity Assurance 1.0.
 */
export type AuthAuthorizationApiFormSupportedAttachment = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedAttachment
>;

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const AuthAuthorizationApiFormSupportedClientRegistrationType = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type AuthAuthorizationApiFormSupportedClientRegistrationType =
  ClosedEnum<typeof AuthAuthorizationApiFormSupportedClientRegistrationType>;

export type AuthAuthorizationApiFormTrustAnchor = {
  /**
   * the entity ID of the trust anchor
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * the JWK Set document containing public keys of the trust anchor
   *
   * @remarks
   */
  jwks?: string | undefined;
};

/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export const AuthAuthorizationApiFormSupportedPromptValue = {
  None: "NONE",
  Login: "LOGIN",
  Consent: "CONSENT",
  SelectAccount: "SELECT_ACCOUNT",
} as const;
/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export type AuthAuthorizationApiFormSupportedPromptValue = ClosedEnum<
  typeof AuthAuthorizationApiFormSupportedPromptValue
>;

export const AuthAuthorizationApiFormFapiMode = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type AuthAuthorizationApiFormFapiMode = ClosedEnum<
  typeof AuthAuthorizationApiFormFapiMode
>;

export type AuthAuthorizationApiFormCredentialIssuerMetadata = {
  /**
   * The identifier of a credential request.
   */
  credentialIssuer?: string | undefined;
  /**
   * The identifier of the authorization server that the credential issuer
   *
   * @remarks
   * relies on for authorization.
   */
  authorizationServer?: string | undefined;
  /**
   * The URL of the credential endpoint of the credential issuer.
   */
  credentialEndpoint?: boolean | undefined;
  /**
   * The URL of the batch credential endpoint of the credential issuer.
   */
  batchCredentialEndpoint?: number | undefined;
  /**
   * The URL of the deferred credential endpoint of the credential issuer.
   */
  deferredCredentialEndpoint?: string | undefined;
  /**
   * A JSON array describing supported credentials.
   */
  credentialsSupported?: boolean | undefined;
};

export type AuthAuthorizationApiFormService = {
  /**
   * The sequential number of the service. The value of this property is assigned by Authlete.
   */
  number?: number | undefined;
  /**
   * The name of this service.
   */
  serviceName?: string | undefined;
  /**
   * The issuer identifier of the service.
   *
   * @remarks
   *
   * A URL that starts with  https:// and has no query or fragment component.
   *
   * The value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)
   * and `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  issuer?: string | undefined;
  /**
   * The description about the service.
   */
  description?: string | undefined;
  /**
   * The service ID used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  apiKey?: number | undefined;
  /**
   * Deprecated. Always `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The `metadata` of the service. The content of the returned array depends on contexts.
   *
   * @remarks
   * The predefined service metadata is listed in the following table.
   *
   *   | Key | Description |
   *   | --- | --- |
   *   | `clientCount` | The number of client applications which belong to this service.  |
   */
  metadata?: Array<AuthAuthorizationApiFormMetadatum> | undefined;
  /**
   * The time at which this service was created. The value is represented as milliseconds since the
   *
   * @remarks
   * UNIX epoch (`1970-01-01`).
   */
  createdAt?: number | undefined;
  /**
   * The time at which this service was last modified. The value is represented as milliseconds since
   *
   * @remarks
   * the UNIX epoch (1970-01-01).
   */
  modifiedAt?: number | undefined;
  /**
   * A Web API endpoint for user authentication which is to be prepared on the service side.
   *
   * @remarks
   *
   * The endpoint must be implemented if you do not implement the UI at the authorization endpoint
   * but use the one provided by Authlete.
   *
   * The user authentication at the authorization endpoint provided by Authlete is performed by making
   * a `POST` request to this endpoint.
   */
  authenticationCallbackEndpoint?: string | undefined;
  /**
   * API key for basic authentication at the authentication callback endpoint.
   *
   * @remarks
   *
   * If the value is not empty, Authlete generates Authorization header for Basic authentication when
   * making a request to the authentication callback endpoint.
   */
  authenticationCallbackApiKey?: string | undefined;
  /**
   * API secret for `basic` authentication at the authentication callback endpoint.
   */
  authenticationCallbackApiSecret?: string | undefined;
  /**
   * Values of acrs (authentication context class references) that the service supports.
   *
   * @remarks
   *
   * The value of this property is used as `acr_values_supported`
   * property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedAcrs?: Array<string> | undefined;
  /**
   * Values of `grant_type` request parameter that the service supports.
   *
   * @remarks
   *
   * The value of this property is used as `grant_types_supported property` in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedGrantTypes?:
    | Array<AuthAuthorizationApiFormSupportedGrantType>
    | undefined;
  /**
   * Values of `response_type` request parameter that
   *
   * @remarks
   * the service supports. Valid values are listed in Response Type.
   *
   * The value of this property is used as `response_types_supported` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedResponseTypes?:
    | Array<AuthAuthorizationApiFormSupportedResponseType>
    | undefined;
  /**
   * The supported data types that can be used as values of the type field in `authorization_details`.
   *
   * @remarks
   *
   * This property corresponds to the `authorization_details_types_supported` metadata. See "OAuth 2.0
   * Rich Authorization Requests" (RAR) for details.
   */
  supportedAuthorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The profiles that this service supports.
   *
   * @remarks
   */
  supportedServiceProfiles?:
    | Array<AuthAuthorizationApiFormSupportedServiceProfile>
    | undefined;
  /**
   * The flag to indicate whether the `error_description` response parameter is omitted.
   *
   * @remarks
   *
   * According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include
   * the `error_description` response parameter in error responses.
   *
   * If `true`, Authlete does not embed the `error_description` response parameter in error responses.
   */
  errorDescriptionOmitted?: boolean | undefined;
  /**
   * The flag to indicate whether the `error_uri` response parameter is omitted.
   *
   * @remarks
   *
   * According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.
   *
   * If `true`, Authlete does not embed the
   * `error_uri` response parameter in error responses.
   */
  errorUriOmitted?: boolean | undefined;
  /**
   * The authorization endpoint of the service.
   *
   * @remarks
   *
   * A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.
   *
   * The value of this property is used as `authorization_endpoint` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  authorizationEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct authorization endpoint is enabled or not.
   *
   * @remarks
   *
   * The path of the endpoint is `/api/auth/authorization/direct/service-api-key`.
   */
  directAuthorizationEndpointEnabled?: boolean | undefined;
  /**
   * UI locales that the service supports.
   *
   * @remarks
   *
   * Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.
   *
   * The value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedUiLocales?: Array<string> | undefined;
  /**
   * Values of `display` request parameter that service supports.
   *
   * @remarks
   *
   * The value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedDisplays?:
    | Array<AuthAuthorizationApiFormSupportedDisplay>
    | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * The duration of authorization response JWTs in seconds.
   *
   * @remarks
   *
   * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
   * `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
   * from the authorization endpoint will be packed into a JWT. This property is used to compute the
   * value of the `exp` claim of the JWT.
   */
  authorizationResponseDuration?: number | undefined;
  /**
   * The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.
   *
   * @remarks
   *
   * A URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.
   *
   * The value of this property is used as `token_endpoint` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  tokenEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint
   *
   * @remarks
   * is `/api/auth/token/direct/service-api-key`.
   */
  directTokenEndpointEnabled?: boolean | undefined;
  /**
   * Client authentication methods supported by the token endpoint of the service.
   *
   * @remarks
   *
   * The value of this property is used as `token_endpoint_auth_methods_supports` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedTokenAuthMethods?:
    | Array<AuthAuthorizationApiFormSupportedTokenAuthMethod>
    | undefined;
  /**
   * The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.
   *
   * @remarks
   *
   * This flag should not be set unless you have special reasons.
   */
  missingClientIdAllowed?: boolean | undefined;
  /**
   * The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.
   *
   * @remarks
   *
   * A URL that starts with `https://`. For example, `https://example.com/auth/revocation`.
   */
  revocationEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`.
   */
  directRevocationEndpointEnabled?: boolean | undefined;
  /**
   * Client authentication methods supported at the revocation endpoint.
   *
   * @remarks
   */
  supportedRevocationAuthMethods?:
    | Array<AuthAuthorizationApiFormSupportedRevocationAuthMethod>
    | undefined;
  /**
   * The URI of the introspection endpoint.
   */
  introspectionEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`.
   */
  directIntrospectionEndpointEnabled?: boolean | undefined;
  /**
   * Client authentication methods supported at the introspection endpoint.
   *
   * @remarks
   */
  supportedIntrospectionAuthMethods?:
    | Array<AuthAuthorizationApiFormSupportedIntrospectionAuthMethod>
    | undefined;
  /**
   * The URI of the pushed authorization request endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `pushed_authorization_request_endpoint` metadata defined in "[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)" of OAuth 2.0 Pushed Authorization Requests.
   */
  pushedAuthReqEndpoint?: string | undefined;
  /**
   * The duration of pushed authorization requests in seconds.
   *
   * @remarks
   *
   * [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)
   * defines an endpoint (called "pushed authorization request endpoint") which client applications
   * can register authorization requests into and get corresponding URIs (called "request URIs") from.
   * The issued URIs represent the registered authorization requests. The client applications can use
   * the URIs as the value of the `request_uri` request parameter in an authorization request.
   *
   * The property represents the duration of registered authorization requests and is used as the value
   * of the `expires_in` parameter in responses from the pushed authorization request endpoint.
   */
  pushedAuthReqDuration?: number | undefined;
  /**
   * The flag to indicate whether this service requires that clients use the pushed authorization
   *
   * @remarks
   * request endpoint.
   *
   * This property corresponds to the `require_pushed_authorization_requests` server metadata defined
   * in [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether this service requires that authorization requests always utilize
   *
   * @remarks
   * a request object by using either request or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is
   * `false`, the value of `require_signed_request_object` server metadata of this service is reported
   * as `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).
   * That `require_signed_request_object` is `true` means that authorization requests which don't
   * conform to the JAR specification are rejected.
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The flag to indicate whether a request object is processed based on rules defined in
   *
   * @remarks
   * [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT
   * Secured Authorization Request).
   *
   * Differences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.
   *   - JAR requires that a request object be always -signed.
   *   - JAR does not allow request parameters outside a request object to be referred to.
   *   - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.
   *   - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an
   *   - OIDC request even if the request object includes the request parameter.
   *
   * If this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of
   * `require_signed_request_object` server metadata of this service
   * is reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured
   * Authorization Request). That `require_signed_request_object` is `true` means that authorization
   * requests which don't conform to the JAR specification are rejected.
   */
  traditionalRequestObjectProcessingApplied?: boolean | undefined;
  /**
   * The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.
   *
   * @remarks
   */
  mutualTlsValidatePkiCertChain?: boolean | undefined;
  /**
   * The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.
   *
   * @remarks
   */
  trustedRootCertificates?: Array<string> | undefined;
  /**
   * The MTLS endpoint aliases.
   *
   * @remarks
   *
   * This property corresponds to the mtls_endpoint_aliases metadata defined in "5. Metadata for Mutual TLS Endpoint Aliases" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).
   *
   * The aliases will be embedded in the response from the discovery endpoint like the following.
   *
   * ```json
   * {
   *   ......,
   *   "mtls_endpoint_aliases": {
   *     "token_endpoint":         "https://mtls.example.com/token",
   *     "revocation_endpoint":    "https://mtls.example.com/revo",
   *     "introspection_endpoint": "https://mtls.example.com/introspect"
   *   }
   * }
   * ```
   */
  mtlsEndpointAliases?:
    | Array<AuthAuthorizationApiFormMtlsEndpointAlias>
    | undefined;
  /**
   * The access token type.
   *
   * @remarks
   *
   * This value is used as the value of `token_type` property in access token responses. If this service
   * complies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should
   * be `Bearer`.
   *
   * See [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.
   */
  accessTokenType?: string | undefined;
  /**
   * The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The duration of access tokens in seconds. This value is used as the value of `expires_in` property
   *
   * @remarks
   * in access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).
   */
  accessTokenDuration?: number | undefined;
  /**
   * The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.
   *
   * @remarks
   *
   * If `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.
   *
   * Note that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  accessTokenSignAlg?: AuthAuthorizationApiFormAccessTokenSignAlg | undefined;
  /**
   * The key ID to identify a JWK used for signing access tokens.
   *
   * @remarks
   *
   * A JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.
   * Authlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based
   * access token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions
   * for access token signature. If the number of JWK candidates which satisfy the conditions is 1,
   * there is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed
   * to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.
   */
  accessTokenSignatureKeyId?: string | undefined;
  /**
   * The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The flag to indicate whether the remaining duration of the used refresh token is taken over to
   *
   * @remarks
   * the newly issued refresh token.
   */
  refreshTokenDurationKept?: boolean | undefined;
  /**
   * The flag which indicates whether duration of refresh tokens are reset when they are used even
   *
   * @remarks
   * if the `refreshTokenKept` property of this service set to is `true` (= even if "Refresh Token
   * Continuous Use" is "Kept").
   *
   * This flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,
   * if this service issues a new refresh token on every refresh token request, the refresh token
   * will have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this
   * `refreshTokenDurationReset` property is not referenced.
   */
  refreshTokenDurationReset?: boolean | undefined;
  /**
   * The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.
   *
   * @remarks
   *
   * If `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.
   *
   * See [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.
   */
  refreshTokenKept?: boolean | undefined;
  /**
   * Scopes supported by the service.
   *
   * @remarks
   *
   * Authlete strongly recommends that the service register at least the following scopes.
   *
   * | Name | Description |
   * | --- | --- |
   * | openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |
   * | profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
   * | email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
   * | address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |
   * | phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
   * | offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |
   *
   * The value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedScopes?: Array<AuthAuthorizationApiFormSupportedScope> | undefined;
  /**
   * The flag to indicate whether requests that request no scope are rejected or not.
   *
   * @remarks
   *
   * When a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,
   * the authorization server regards the request requests no scope. When this flag is set to `true`,
   * requests that request no scope are rejected.
   *
   * The requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)
   * does not explicitly mention the case where the default scope set is empty.
   *
   * > If the client omits the scope parameter when requesting authorization, the authorization server
   * MUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.
   *
   * However, if you interpret *"the default scope set exists but is empty"* as *"the default scope set does not exist"*
   * and want to strictly conform to the requirement above, this flag has to be `true`.
   */
  scopeRequired?: boolean | undefined;
  /**
   * 'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s
   *
   * @remarks
   * in seconds. This value is used to calculate the value of `exp` claim in an ID token.'
   */
  idTokenDuration?: number | undefined;
  /**
   * The allowable clock skew between the server and clients in seconds.
   *
   * @remarks
   *
   * The clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.
   */
  allowableClockSkew?: number | undefined;
  /**
   * Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete
   *
   * @remarks
   * currently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.
   *
   * The value of this property is used as `claim_types_supported` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedClaimTypes?:
    | Array<AuthAuthorizationApiFormSupportedClaimType>
    | undefined;
  /**
   * Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).
   *
   * @remarks
   * For example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)
   * for details.
   *
   * The value of this property is used as `claims_locales_supported` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedClaimLocales?: Array<string> | undefined;
  /**
   * Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,
   *
   * @remarks
   * 5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should
   * be supported. The following is the list of standard claims.
   *
   * - `sub`
   * - `name`
   * - `given_name`
   * - `family_name`
   * - `middle_name`
   * - `nickname`
   * - `preferred_username`
   * - `profile`
   * - `picture`
   * - `website`
   * - `email`
   * - `email_verified`
   * - `gender`
   * - `birthdate`
   * - `zoneinfo`
   * - `locale`
   * - `phone_number`
   * - `phone_number_verified`
   * - `address`
   * - `updated_at`
   *
   * The value of this property is used as `claims_supported` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   *
   * The service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional
   * Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).
   */
  supportedClaims?: Array<string> | undefined;
  /**
   * The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included
   *
   * @remarks
   * in the issued ID token only when no access token is issued.
   *
   * To strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section
   * 5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.
   *
   * > The Claims requested by the profile, email, address, and phone scope values are returned from
   * the UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that
   * results in an Access Token being issued. However, when no Access Token is issued (which is the
   * case for the response_type value id_token), the resulting Claims are returned in the ID Token.
   */
  claimShortcutRestrictive?: boolean | undefined;
  /**
   * The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For
   *
   * @remarks
   * example, `http://example.com/auth/jwks`.
   *
   * Client applications accesses this URL (1) to get the public key of the service to validate the
   * signature of an ID token issued by the service and (2) to get the public key of the service to
   * encrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures
   * and Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
   *
   * The value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * 'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint
   *
   * @remarks
   * is `/api/service/jwks/get/direct/service-api-key`. '
   */
  directJwksEndpointEnabled?: boolean | undefined;
  /**
   * The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.
   *
   * @remarks
   *
   * If this property is not `null` in a `/service/create` request or a `/service/update` request,
   * Authlete hosts the content in the database. This property must not be `null` and must contain
   * pairs of public/private keys if the service wants to support asymmetric signatures for ID tokens
   * and asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and
   * Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
   */
  jwks?: string | undefined;
  /**
   * The key ID to identify a JWK used for ID token signature using an asymmetric key.
   *
   * @remarks
   *
   * A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
   * (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
   * to pick up one JWK for signature from the JWK Set when it generates an ID token and signature
   * using an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK
   * which satisfies conditions for ID token signature. If the number of JWK candidates which satisfy
   * the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,
   * a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that
   * Authlete Server can pick up one JWK from among the JWK candidates.
   *
   * This `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation
   * (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
   * this mechanism is needed.
   */
  idTokenSignatureKeyId?: string | undefined;
  /**
   * The key ID to identify a JWK used for user info signature using an asymmetric key.
   *
   * @remarks
   *
   * A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
   * (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
   * to pick up one JWK for signature from the JWK Set when it is required to sign user info (which
   * is returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))
   * using an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies
   * conditions for user info signature. If the number of JWK candidates which satisfy the conditions
   * is 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)
   * is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.
   *
   * This `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation
   * (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
   * this mechanism is needed.
   */
  userInfoSignatureKeyId?: string | undefined;
  /**
   * The key ID to identify a JWK used for signing authorization responses using an asymmetric key.
   *
   * @remarks
   *
   * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
   * `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
   * from the authorization endpoint will be packed into a JWT. This property is used to compute the
   * value of the `exp` claim of the JWT.
   *
   * Authlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response
   * signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.
   * On the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that
   * Authlete Server can pick up one JWK from among the JWK candidates. This property exists to specify
   * the key ID.
   */
  authorizationSignatureKeyId?: string | undefined;
  /**
   * The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the
   *
   * @remarks
   * service. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.
   *
   * The value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  userInfoEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct userinfo endpoint is enabled or not. The path
   *
   * @remarks
   * of the endpoint is `/api/auth/userinfo/direct/service-api-key`.
   */
  directUserInfoEndpointEnabled?: boolean | undefined;
  /**
   * The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)
   *
   * @remarks
   * is supported.
   */
  dynamicRegistrationSupported?: boolean | undefined;
  /**
   * The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)
   *
   * @remarks
   * of the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.
   *
   * The value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  registrationEndpoint?: string | undefined;
  /**
   * The URI of the registration management endpoint. If dynamic client registration is supported,
   *
   * @remarks
   * and this is set, this URI will be used as the basis of the client's management endpoint by appending
   * `/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will
   * be used as the URI base instead.
   */
  registrationManagementEndpoint?: string | undefined;
  /**
   * The URL of the "Policy" of the service.
   *
   * @remarks
   *
   * The value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  policyUri?: string | undefined;
  /**
   * The URL of the "Terms Of Service" of the service.
   *
   * @remarks
   *
   * The value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  tosUri?: string | undefined;
  /**
   * The URL of a page where documents for developers can be found.
   *
   * @remarks
   *
   * The value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  serviceDocumentation?: string | undefined;
  /**
   * The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA
   *
   * @remarks
   * (Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
   */
  backchannelAuthenticationEndpoint?: string | undefined;
  /**
   * The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`
   *
   * @remarks
   * metadata.
   *
   * Backchannel token delivery modes are defined in the specification of [CIBA (Client Initiated
   * Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
   */
  supportedBackchannelTokenDeliveryModes?:
    | Array<AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode>
    | undefined;
  /**
   * The duration of backchannel authentication request IDs issued from the backchannel authentication
   *
   * @remarks
   * endpoint in seconds. This is used as the value of the `expires_in` property in responses from
   * the backchannel authentication endpoint.
   */
  backchannelAuthReqIdDuration?: number | undefined;
  /**
   * The minimum interval between polling requests to the token endpoint from client applications in
   *
   * @remarks
   * seconds. This is used as the value of the `interval` property in responses from the backchannel
   * authentication endpoint.
   */
  backchannelPollingInterval?: number | undefined;
  /**
   * The boolean flag which indicates whether the `user_code` request parameter is supported at the
   *
   * @remarks
   * backchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`
   * metadata.
   */
  backchannelUserCodeParameterSupported?: boolean | undefined;
  /**
   * The flag to indicate whether the `binding_message` request parameter is always required whenever
   *
   * @remarks
   * a backchannel authentication request is judged as a request for Financial-grade API.
   *
   * The FAPI-CIBA profile requires that the authorization server _"shall ensure unique authorization
   * context exists in the authorization request or require a `binding_message` in the authorization
   * request"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property
   * to `true`.
   *
   * If this property is set to `false`, the `binding_message` request parameter remains optional
   * even in FAPI context, but in exchange, your authorization server must implement a custom mechanism
   * that ensures each backchannel authentication request has unique context.
   */
  backchannelBindingMessageRequiredInFapi?: boolean | undefined;
  /**
   * The URI of the device authorization endpoint.
   *
   * @remarks
   *
   * Device authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.
   */
  deviceAuthorizationEndpoint?: string | undefined;
  /**
   * The verification URI for the device flow. This URI is used as the value of the `verification_uri`
   *
   * @remarks
   * parameter in responses from the device authorization endpoint.
   */
  deviceVerificationUri?: string | undefined;
  /**
   * The verification URI for the device flow with a placeholder for a user code. This URI is used
   *
   * @remarks
   * to build the value of the `verification_uri_complete` parameter in responses from the device
   * authorization endpoint.
   *
   * It is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for
   * a user code. For example, like the following.
   *
   * `https://example.com/device?user\_code=USER\_CODE`
   *
   * The fixed string is replaced with an actual user code when Authlete builds a verification URI
   * with a user code for the `verification_uri_complete` parameter.
   *
   * If this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization
   * responses.
   */
  deviceVerificationUriComplete?: string | undefined;
  /**
   * The duration of device verification codes and end-user verification codes issued from the device
   *
   * @remarks
   * authorization endpoint in seconds. This is used as the value of the `expires_in` property in responses
   * from the device authorization endpoint.
   */
  deviceFlowCodeDuration?: number | undefined;
  /**
   * The minimum interval between polling requests to the token endpoint from client applications in
   *
   * @remarks
   * seconds in device flow. This is used as the value of the `interval` property in responses from
   * the device authorization endpoint.
   */
  deviceFlowPollingInterval?: number | undefined;
  /**
   * The character set for end-user verification codes (`user_code`) for Device Flow.
   *
   * @remarks
   */
  userCodeCharset?: AuthAuthorizationApiFormUserCodeCharset | undefined;
  /**
   * The length of end-user verification codes (`user_code`) for Device Flow.
   *
   * @remarks
   */
  userCodeLength?: number | undefined;
  /**
   * Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedTrustFrameworks?: Array<string> | undefined;
  /**
   * Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   *
   * @remarks
   */
  supportedEvidence?: Array<string> | undefined;
  /**
   * Identity documents supported by this service. This corresponds to the `id_documents_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedIdentityDocuments?: Array<string> | undefined;
  /**
   * Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedVerificationMethods?: Array<string> | undefined;
  /**
   * Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedVerifiedClaims?: Array<string> | undefined;
  /**
   * OIDC4IDA / verifiedClaimsValidationSchemaSet
   *
   * @remarks
   */
  verifiedClaimsValidationSchemaSet?:
    | AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet
    | undefined;
  /**
   * The attributes of this service.
   *
   * @remarks
   */
  attributes?: Array<AuthAuthorizationApiFormServiceAttribute> | undefined;
  /**
   * The flag indicating whether the nbf claim in the request object is optional even when the authorization
   *
   * @remarks
   * request is regarded as a FAPI-Part2 request.
   *
   * The final version of Financial-grade API was approved in January, 2021. The Part 2 of the final
   * version has new requirements on lifetime of request objects. They require that request objects
   * contain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.
   *
   * Therefore, when an authorization request is regarded as a FAPI-Part2 request, the request object
   * used in the authorization request must contain an nbf claim. Otherwise, the authorization server
   * rejects the authorization request.
   *
   * When this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization
   * request is regarded as a FAPI-Part2 request. That is, the authorization server does not perform
   * the validation on lifetime of the request object.
   *
   * Skipping the validation is a violation of the FAPI specification. The reason why this flag has
   * been prepared nevertheless is that the new requirements (which do not exist in the Implementer's
   * Draft 2 released in October, 2018) have big impacts on deployed implementations of client
   * applications and Authlete thinks there should be a mechanism whereby to make the migration
   * from ID2 to Final smooth without breaking live systems.
   */
  nbfOptional?: boolean | undefined;
  /**
   * The flag indicating whether generation of the iss response parameter is suppressed.
   *
   * @remarks
   *
   * "OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response" has defined a new
   * authorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.
   *
   * The specification requires that the `iss` response parameter always be included in authorization
   * responses unless JARM (JWT Secured Authorization Response Mode) is used.
   *
   * When this flag is `true`, the authorization server does not include the `iss` response parameter
   * in authorization responses. By turning this flag on and off, developers of client applications
   * can experiment the mix-up attack and the effect of the `iss` response parameter.
   *
   * Note that this flag should not be `true` in production environment unless there are special
   * reasons for it.
   */
  issSuppressed?: boolean | undefined;
  /**
   * custom client metadata supported by this service.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored
   * into Authlete database. On the other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),
   * Authlete can recognize them and stores their values into the database. The stored custom client
   * metadata values can be referenced by `customMetadata`.
   */
  supportedCustomClientMetadata?: Array<string> | undefined;
  /**
   * The flag indicating whether the expiration date of an access token never exceeds that of the
   *
   * @remarks
   * corresponding refresh token.
   *
   * When a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),
   * the expiration date of the access token may exceed the expiration date of the corresponding
   * refresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is
   * `true` and/or when `refreshTokenDurationKept` is `true`.
   *
   * When this flag is `true`, the expiration date of an access token never exceeds that of the corresponding
   * refresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,
   * `accessTokenDuration` in `extension` and `access_token.duration` scope attribute.
   *
   * It is technically possible to set a value which is bigger than the duration of refresh tokens
   * as the duration of access tokens although it is strange. In the case, the duration of an access
   * token becomes longer than the duration of the refresh token which is issued together with the
   * access token. Even if the duration values are configured so, if this flag is `true`, the expiration
   * date of the access token does not exceed that of the refresh token. That is, the duration of
   * the access token will be shortened, and as a result, the access token and the refresh token
   * will have the same expiration date.
   */
  tokenExpirationLinked?: boolean | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`
   * for details.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the client is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata of the client that has sent the request object.
   *
   * The request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting
   * Request Objects sent to the OP. This parameter SHOULD be included when symmetric encryption
   * will be used, since this signals to the OP that a client_secret value needs to be returned
   * from which the symmetric key will be derived, that might not otherwise be returned. The RP
   * MAY still use other supported encryption algorithms or send unencrypted Request Objects, even
   * when this parameter is present. If both signing and encryption are requested, the Request Object
   * will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The
   * default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The Client's property that represents the client metadata is `requestEncryptionAlg`. See the
   * description of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the client is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata of the client that has sent the request object.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   * Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   * value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   * MUST also be provided.
   *
   * The Client's property that represents the client metadata is `requestEncryptionEnc`. See the
   * description of `requestEncryptionEnc` for details.
   *
   * Even if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.
   *
   * @remarks
   *
   * When this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,
   * `/api/hsk/*` APIs reject all requests.
   *
   * Even if this flag is `true`, HSM-related features do not work if the configuration of the Authlete
   * server you are using does not support HSM.
   */
  hsmEnabled?: boolean | undefined;
  /**
   * The information about keys managed on HSMs (Hardware Security Modules).
   *
   * @remarks
   *
   * This `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`
   * API and `/api/service/update` API do not have any effect. The contents of this property is controlled
   * only by `/api/hsk/*` APIs.
   */
  hsks?: Array<AuthAuthorizationApiFormHsk> | undefined;
  /**
   * The URL of the grant management endpoint.
   *
   * @remarks
   */
  grantManagementEndpoint?: string | undefined;
  /**
   * The flag indicating whether every authorization request (and any request serving as an authorization
   *
   * @remarks
   * request such as CIBA backchannel authentication request and device authorization request) must
   * include the `grant_management_action` request parameter.
   *
   * This property corresponds to the `grant_management_action_required` server metadata defined
   * in [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   *
   * Note that setting true to this property will result in blocking all public clients because
   * the specification requires that grant management be usable only by confidential clients for
   * security reasons.
   */
  grantManagementActionRequired?: boolean | undefined;
  /**
   * The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as
   *
   * @remarks
   * a value of the `action` response parameter when appropriate.
   *
   * The `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`
   * parameter in an `/api/client/registration` API response. This means that implementations of
   * client `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)
   * strictly.
   *
   * For backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`
   * API does not return the `UNAUTHORIZED` enum value if this flag is not turned on.
   *
   * The steps an existing implementation of client configuration endpoint has to do in order to
   * conform to the requirement related to "401 Unauthorized" are as follows.
   *
   * 1. Update the Authlete library (e.g. authlete-java-common) your system is using.
   * 2. Update your implementation of client configuration endpoint so that it can handle the
   * `UNAUTHORIZED` action.
   * 3. Turn on this `unauthorizedOnClientConfigSupported` flag.
   */
  unauthorizedOnClientConfigSupported?: boolean | undefined;
  /**
   * The flag indicating whether the `scope` request parameter in dynamic client registration and
   *
   * @remarks
   * update requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.
   *
   * Limiting the range of scopes that a client can request is achieved by listing scopes in the
   * `client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`
   * property to `true`. This feature is called "requestable scopes".
   *
   * This property affects behaviors of `/api/client/registration` and other family APIs.
   */
  dcrScopeUsedAsRequestable?: boolean | undefined;
  /**
   * The endpoint for clients ending the sessions.
   *
   * @remarks
   *
   * A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.
   *
   * The value of this property is used as `end_session_endpoint` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  endSessionEndpoint?: string | undefined;
  /**
   * The flag indicating whether the port number component of redirection URIs can be variable when
   *
   * @remarks
   * the host component indicates loopback.
   *
   * When this flag is `true`, if the host component of a redirection URI specified in an authorization
   * request indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`
   * or `::1`), the port number component is ignored when the specified redirection URI is compared
   * to pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](
   * https://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)
   * for Native Apps.
   *
   * [3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)
   * of [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _"If the client registration
   * included the full redirection URI, the authorization server MUST compare the two URIs using
   * simple string comparison as defined in [RFC3986] Section 6.2.1."_ Also, the description of
   * `redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)
   * of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states
   * _"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
   * at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]
   * (**Simple String Comparison**)."_ These "Simple String Comparison" requirements are preceded
   * by this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0
   * are satisfied, the port number component of loopback redirection URIs can be variable when this
   * flag is `true`.
   *
   * [8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)
   * of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.
   *
   * > While redirect URIs using localhost (i.e., `"http://localhost:{port}/{path}"`) function
   * similarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.
   * Specifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently
   * listening on network interfaces other than the loopback interface. It is also less susceptible
   * to client-side firewalls and misconfigured host name resolution on the user's device.
   *
   * However, Authlete allows the port number component to be variable in the case of `localhost`,
   * too. It is left to client applications whether they use `localhost` or a literal loopback IP
   * address (`127.0.0.1` for IPv4 or `::1` for IPv6).
   *
   * Section 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state
   * that loopback redirection URIs use the `"http"` scheme, but Authlete allows the port number
   * component to be variable in other cases (e.g. in the case of the `"https"` scheme), too.
   */
  loopbackRedirectionUriVariable?: boolean | undefined;
  /**
   * The flag indicating whether Authlete checks whether the `aud` claim of request objects matches
   *
   * @remarks
   * the issuer identifier of this service.
   *
   * [Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)
   * of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following
   * statement.
   *
   * > The `aud` value SHOULD be or include the OP's Issuer Identifier URL.
   *
   * Likewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of
   * [RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:
   * JWT-Secured Authorization Request (JAR)) has the following statement.
   *
   * > The value of aud should be the value of the authorization server (AS) issuer, as defined in
   * [RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).
   *
   * As excerpted above, validation on the `aud` claim of request objects is optional. However, if
   * this flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer
   * identifier of this service and raises an error if they are different.
   */
  requestObjectAudienceChecked?: boolean | undefined;
  /**
   * The flag indicating whether Authlete generates access tokens for
   *
   * @remarks
   * external attachments and embeds them in ID tokens and userinfo
   * responses.
   */
  accessTokenForExternalAttachmentEmbedded?: boolean | undefined;
  /**
   * Identifiers of entities that can issue entity statements for this
   *
   * @remarks
   * service. This property corresponds to the `authority_hints`
   * property that appears in a self-signed entity statement that is
   * defined in OpenID Connect Federation 1.0.
   */
  authorityHints?: Array<string> | undefined;
  /**
   * flag indicating whether this service supports OpenID Connect Federation 1
   *
   * @remarks
   */
  federationEnabled?: boolean | undefined;
  /**
   * JWK Set document containing keys that are used to sign (1) self-signed
   *
   * @remarks
   * entity statement of this service and (2) the response from
   * `signed_jwks_uri`.
   */
  federationJwks?: string | undefined;
  /**
   * A key ID to identify a JWK used to sign the entity configuration and
   *
   * @remarks
   * the signed JWK Set.
   */
  federationSignatureKeyId?: string | undefined;
  /**
   * The duration of the entity configuration in seconds.
   *
   * @remarks
   */
  federationConfigurationDuration?: number | undefined;
  /**
   * The URI of the federation registration endpoint. This property corresponds
   *
   * @remarks
   * to the `federation_registration_endpoint` server metadata that is
   * defined in OpenID Connect Federation 1.0.
   */
  federationRegistrationEndpoint?: string | undefined;
  /**
   * The human-readable name representing the organization that operates
   *
   * @remarks
   * this service. This property corresponds to the `organization_name`
   * server metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The transformed claims predefined by this service in JSON format.
   *
   * @remarks
   * This property corresponds to the `transformed_claims_predefined`
   * server metadata.
   */
  predefinedTransformedClaims?: string | undefined;
  /**
   * flag indicating whether refresh token requests with the same
   *
   * @remarks
   * refresh token can be made multiple times in quick succession and
   * they can obtain the same renewed refresh token within the short
   * period.
   */
  refreshTokenIdempotent?: boolean | undefined;
  /**
   * The URI of the endpoint that returns this service's JWK Set document in
   *
   * @remarks
   * the JWT format. This property corresponds to the `signed_jwks_uri`
   * server metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * Supported attachment types. This property corresponds to the {@code
   *
   * @remarks
   * attachments_supported} server metadata which was added by the third
   * implementer's draft of OpenID Connect for Identity Assurance 1.0.
   */
  supportedAttachments?:
    | Array<AuthAuthorizationApiFormSupportedAttachment>
    | undefined;
  /**
   * Supported algorithms used to compute digest values of external
   *
   * @remarks
   * attachments. This property corresponds to the
   * `digest_algorithms_supported` server metadata which was added
   * by the third implementer's draft of OpenID Connect for Identity
   * Assurance 1.0.
   */
  supportedDigestAlgorithms?: Array<string> | undefined;
  /**
   * Document types supported by this service. This property corresponds
   *
   * @remarks
   * to the `documents_supported` server metadata.
   */
  supportedDocuments?: Array<string> | undefined;
  /**
   * validation and verification processes supported by this service.
   *
   * @remarks
   * This property corresponds to the `documents_methods_supported`
   * server metadata.
   *
   * The third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   * renamed the
   * `id_documents_verification_methods_supported` server metadata to
   * `documents_methods_supported`.
   */
  supportedDocumentsMethods?: Array<string> | undefined;
  /**
   * Document validation methods supported by this service. This property
   *
   * @remarks
   * corresponds to the `documents_validation_methods_supported` server
   * metadata which was added by the third implementer's draft of <a href=
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   */
  supportedDocumentsValidationMethods?: Array<string> | undefined;
  /**
   * Document verification methods supported by this service. This property
   *
   * @remarks
   * corresponds to the `documents_verification_methods_supported` server
   * metadata which was added by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   */
  supportedDocumentsVerificationMethods?: Array<string> | undefined;
  /**
   * Electronic record types supported by this service. This property
   *
   * @remarks
   * corresponds to the `electronic_records_supported` server metadata
   * which was added by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   */
  supportedElectronicRecords?: Array<string> | undefined;
  supportedClientRegistrationTypes?:
    | Array<AuthAuthorizationApiFormSupportedClientRegistrationType>
    | undefined;
  /**
   * The flag indicating whether to prohibit unidentifiable clients from
   *
   * @remarks
   * making token exchange requests.
   */
  tokenExchangeByIdentifiableClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to prohibit public clients from making
   *
   * @remarks
   * token exchange requests.
   */
  tokenExchangeByConfidentialClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to prohibit clients that have no explicit
   *
   * @remarks
   * permission from making token exchange requests.
   */
  tokenExchangeByPermittedClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to reject token exchange requests which
   *
   * @remarks
   * use encrypted JWTs as input tokens.
   */
  tokenExchangeEncryptedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to reject token exchange requests which
   *
   * @remarks
   * use unsigned JWTs as input tokens.
   */
  tokenExchangeUnsignedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to prohibit unidentifiable clients from
   *
   * @remarks
   * using the grant type "urn:ietf:params:oauth:grant-type:jwt-bearer".
   */
  jwtGrantByIdentifiableClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to reject token requests that use an
   *
   * @remarks
   * encrypted JWT as an authorization grant with the grant type
   * "urn:ietf:params:oauth:grant-type:jwt-bearer".
   */
  jwtGrantEncryptedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to reject token requests that use an
   *
   * @remarks
   * unsigned JWT as an authorization grant with the grant type
   * "urn:ietf:params:oauth:grant-type:jwt-bearer".
   */
  jwtGrantUnsignedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to block DCR (Dynamic Client Registration)
   *
   * @remarks
   * requests whose "software_id" has already been used previously.
   */
  dcrDuplicateSoftwareIdBlocked?: boolean | undefined;
  /**
   * The trust anchors that are referenced when this service resolves
   *
   * @remarks
   * trust chains of relying parties.
   *
   * If this property is empty, client registration fails regardless of
   * whether its type is `automatic` or `explicit`. It means
   * that OpenID Connect Federation 1.0 does not work.
   */
  trustAnchors?: Array<AuthAuthorizationApiFormTrustAnchor> | undefined;
  /**
   * The flag indicating whether the openid scope should be dropped from
   *
   * @remarks
   * scopes list assigned to access token issued when a refresh token grant
   * is used.
   */
  openidDroppedOnRefreshWithoutOfflineAccess?: boolean | undefined;
  /**
   * Supported document check methods. This property corresponds to the `documents_check_methods_supported`
   *
   * @remarks
   * server metadata which was added by the fourth implementer's draft of OpenID Connect for Identity
   * Assurance 1.0.
   */
  supportedDocumentsCheckMethods?: Array<string> | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsResponseSigned?: boolean | undefined;
  /**
   * The duration of `c_nonce`.
   *
   * @remarks
   */
  cnonceDuration?: number | undefined;
  /**
   * Whether to require DPoP proof JWTs to include the `nonce` claim
   *
   * @remarks
   * whenever they are presented.
   */
  dpopNonceRequired?: boolean | undefined;
  /**
   * Get the flag indicating whether the feature of Verifiable Credentials
   *
   * @remarks
   * for this service is enabled or not.
   */
  verifiableCredentialsEnabled?: boolean | undefined;
  /**
   * The URL at which the JWK Set document of the credential issuer is
   *
   * @remarks
   * exposed.
   */
  credentialJwksUri?: string | undefined;
  /**
   * The default duration of credential offers in seconds.
   *
   * @remarks
   */
  credentialOfferDuration?: number | undefined;
  /**
   * The duration of nonce values for DPoP proof JWTs in seconds.
   *
   * @remarks
   */
  dpopNonceDuration?: number | undefined;
  /**
   * The flag indicating whether token requests using the pre-authorized
   *
   * @remarks
   * code grant flow by unidentifiable clients are allowed.
   */
  preAuthorizedGrantAnonymousAccessSupported?: boolean | undefined;
  /**
   * The duration of transaction ID in seconds that may be issued as a
   *
   * @remarks
   * result of a credential request or a batch credential request.
   */
  credentialTransactionDuration?: number | undefined;
  /**
   * The key ID of the key for signing introspection responses.
   *
   * @remarks
   */
  introspectionSignatureKeyId?: string | undefined;
  /**
   * The key ID of the key for signing introspection responses.
   *
   * @remarks
   */
  resourceSignatureKeyId?: string | undefined;
  /**
   * The default length of user PINs.
   *
   * @remarks
   */
  userPinLength?: number | undefined;
  /**
   * The supported `prompt` values.
   *
   * @remarks
   */
  supportedPromptValues?:
    | Array<AuthAuthorizationApiFormSupportedPromptValue>
    | undefined;
  /**
   * The flag indicating whether to enable the feature of ID token
   *
   * @remarks
   * reissuance in the refresh token flow.
   */
  idTokenReissuable?: boolean | undefined;
  /**
   * The JWK Set document containing private keys that are used to sign
   *
   * @remarks
   * verifiable credentials.
   */
  credentialJwks?: string | undefined;
  /**
   * FAPI modes for this service.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests to this service based
   * on the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported
   * by this service.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always
   * processes requests to this service based on "Financial-grade API Security Profile 1.0 - Part 2:
   * Advanced" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.
   */
  fapiModes?: Array<AuthAuthorizationApiFormFapiMode> | undefined;
  /**
   * The default duration of verifiable credentials in seconds.
   *
   * @remarks
   */
  credentialDuration?: number | undefined;
  credentialIssuerMetadata?:
    | AuthAuthorizationApiFormCredentialIssuerMetadata
    | undefined;
  /**
   * The type of the `aud` claim in ID tokens.
   *
   * @remarks
   */
  idTokenAudType?: string | undefined;
};

export type AuthAuthorizationApiFormScopeDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormScopeAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthAuthorizationApiFormScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<AuthAuthorizationApiFormScopeDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<AuthAuthorizationApiFormScopeAttribute> | undefined;
};

/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export const AuthAuthorizationApiFormPrompt = {
  None: "NONE",
  Login: "LOGIN",
  Consent: "CONSENT",
  SelectAccount: "SELECT_ACCOUNT",
} as const;
/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export type AuthAuthorizationApiFormPrompt = ClosedEnum<
  typeof AuthAuthorizationApiFormPrompt
>;

/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export const AuthAuthorizationApiFormLowestPrompt = {
  None: "NONE",
  Login: "LOGIN",
  Consent: "CONSENT",
  SelectAccount: "SELECT_ACCOUNT",
} as const;
/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export type AuthAuthorizationApiFormLowestPrompt = ClosedEnum<
  typeof AuthAuthorizationApiFormLowestPrompt
>;

export type AuthAuthorizationApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthAuthorizationApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthAuthorizationApiFormElement> | undefined;
};

export type AuthAuthorizationApiFormDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const AuthAuthorizationApiFormGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type AuthAuthorizationApiFormGmAction = ClosedEnum<
  typeof AuthAuthorizationApiFormGmAction
>;

export type AuthAuthorizationApiFormGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type AuthAuthorizationApiFormGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthAuthorizationApiFormGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthAuthorizationApiFormGrantElement> | undefined;
};

export type AuthAuthorizationApiFormGrant = {
  scopes?: Array<AuthAuthorizationApiFormGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthAuthorizationApiFormGrantAuthorizationDetails
    | undefined;
};

export type AuthAuthorizationApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthAuthorizationApiFormCredentialOfferInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The credential offer in the JSON format.
   */
  credentialOffer?: string | undefined;
  /**
   * The identifier of the credential issuer.
   */
  credentialIssuer?: string | undefined;
  /**
   * The value of the `credentials` object in the JSON format.
   */
  credentials?: string | undefined;
  /**
   * The flag indicating whether the `authorization_code` object is
   *
   * @remarks
   * included in the `grants` object.
   */
  authorizationCodeGrantIncluded?: boolean | undefined;
  /**
   * The flag indicating whether the `issuer_state` property is
   *
   * @remarks
   * included in the `authorization_code` object in the `grants`
   * object.
   */
  issuerStateIncluded?: boolean | undefined;
  /**
   * The value of the `issuer_state` property in the
   *
   * @remarks
   * `authorization_code` object in the `grants` object.
   */
  issuerState?: string | undefined;
  /**
   * The flag indicating whether the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object is
   * included in the `grants` object.
   */
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  /**
   * The value of the `pre-authorized_code` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  preAuthorizedCode?: string | undefined;
  /**
   * The value of the `user_pin_required` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  userPinRequired?: boolean | undefined;
  /**
   * The value of the user PIN associated with the credential offer.
   */
  userPin?: string | undefined;
  /**
   * The subject associated with the credential offer.
   */
  subject?: string | undefined;
  /**
   * The time at which the credential offer will expire.
   */
  expiresAt?: number | undefined;
  /**
   * The general-purpose arbitrary string.
   */
  context?: string | undefined;
  /**
   * Extra properties to associate with the credential offer.
   */
  properties?: Array<AuthAuthorizationApiFormProperty> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT
   *
   * @remarks
   * access token.
   */
  jwtAtClaims?: string | undefined;
  /**
   * The time at which the user authentication was performed during
   *
   * @remarks
   * the course of issuing the credential offer.
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication
   *
   * @remarks
   * performed during the course of issuing the credential offer.
   */
  acr?: string | undefined;
};

export type AuthAuthorizationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthAuthorizationApiFormAction | undefined;
  client?: AuthAuthorizationApiFormClient | undefined;
  /**
   * The display mode which the client application requests by `display` request parameter.
   *
   * @remarks
   * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
   *
   * It is ensured that the value of `display` is one of the supported display modes which are specified
   * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
   * authorization request is not supported, an error is raised.
   *
   * Values for this property correspond to the values listed in
   * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
   */
  display?: AuthAuthorizationApiFormDisplay | undefined;
  /**
   * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
   *
   * @remarks
   * of the client application when the authorization request does not contain `max_age` request parameter.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
   * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
   * for `defaultMaxAge` configuration parameter.
   */
  maxAge?: number | undefined;
  service?: AuthAuthorizationApiFormService | undefined;
  /**
   * The scopes that the client application requests. This value comes from `scope` request parameter.
   *
   * @remarks
   * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
   * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
   * the value of this parameter is `null`.
   *
   * It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
   * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
   * an error and are just ignored.
   *
   * OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
   *
   * | Name | Description |
   * | --- | --- |
   * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
   * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
   * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
   * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
   * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
   * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |
   *
   * Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
   * when scope request parameter contains `offline_access`. This behavior is a requirement written in
   * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
   */
  scopes?: Array<AuthAuthorizationApiFormScope> | undefined;
  /**
   * The locales that the client application presented as candidates to be used for UI.
   *
   * @remarks
   * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
   * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
   *
   * It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
   * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
   * cause an error and are just ignored.
   */
  uiLocales?: Array<string> | undefined;
  /**
   * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
   *
   * @remarks
   * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
   * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
   *
   * It is ensured that locales listed by this parameters are contained in the list of supported claim locales
   * which are specified by `supportedClaimsLocales` configuration parameter of the service.
   * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
   */
  claimsLocales?: Array<string> | undefined;
  /**
   * The list of claims that the client application requests to be embedded in the ID token.
   *
   * @remarks
   * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
   * which are expanded to claims.
   *
   * See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
   * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * for the special scopes.
   */
  claims?: Array<string> | undefined;
  /**
   * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
   *
   * @remarks
   * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
   * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
   */
  acrEssential?: boolean | undefined;
  /**
   * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
   *
   * @remarks
   * `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
   *
   * @remarks
   * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
   * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * default_acr_values" for `defaultAcrs` configuration parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
   *
   * @remarks
   * The value comes from `sub` claim in `claims` request parameter.
   */
  subject?: string | undefined;
  /**
   * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
   */
  loginHint?: string | undefined;
  /**
   * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
   */
  prompts?: Array<AuthAuthorizationApiFormPrompt> | undefined;
  /**
   * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
   *
   * @remarks
   *
   * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
   */
  lowestPrompt?: AuthAuthorizationApiFormLowestPrompt | undefined;
  /**
   * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
   *
   * @remarks
   */
  requestObjectPayload?: string | undefined;
  /**
   * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
   *
   * @remarks
   *
   * A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
   * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
   * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
   * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
   *
   * The following is an excerpt from the specification.
   * You can find `userinfo` and `id_token` are top-level properties.
   *
   * ```json
   * {
   *   "userinfo":
   *   {
   *     "given_name": { "essential": true },
   *     "nickname": null,
   *     "email": { "essential": true },
   *     "email_verified": { "essential": true },
   *     "picture": null,
   *     "http://example.info/claims/groups": null
   *   },
   *   "id_token":
   *   {
   *     "auth_time": { "essential": true },
   *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   *   }
   * }
   * ```
   *
   * This value of this property is the value of the `id_token` property in JSON format.
   * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
   *
   * ```json
   * {
   *   "auth_time": { "essential": true },
   *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   * }
   * ```
   *
   * Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
   * this property holds the former value.
   */
  idTokenClaims?: string | undefined;
  /**
   * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
   *
   * @remarks
   *
   * A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
   * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
   * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
   * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
   *
   * The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
   *
   * ```json
   * {
   *   "userinfo":
   *   {
   *     "given_name": { "essential": true },
   *     "nickname": null,
   *     "email": { "essential": true },
   *     "email_verified": { "essential": true },
   *     "picture": null,
   *     "http://example.info/claims/groups": null
   *   },
   *   "id_token":
   *   {
   *     "auth_time": { "essential": true },
   *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   *   }
   * }
   * ````
   *
   * The value of this property is the value of the `userinfo` property in JSON format.
   * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
   *
   * ```json
   * {
   *   "given_name": { "essential": true },
   *   "nickname": null,
   *   "email": { "essential": true },
   *   "email_verified": { "essential": true },
   *   "picture": null,
   *   "http://example.info/claims/groups": null
   * }
   * ```
   *
   * Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
   * the value of this property holds the former value.
   */
  userInfoClaims?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
   *
   * @remarks
   * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthAuthorizationApiFormAuthorizationDetails
    | undefined;
  /**
   * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
   *
   * @remarks
   * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
   *
   * > purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
   * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
   */
  purpose?: string | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * A ticket issued by Authlete to the service implementation. This is needed when the service
   *
   * @remarks
   * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
   * API.
   */
  ticket?: string | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<AuthAuthorizationApiFormDynamicScope> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: AuthAuthorizationApiFormGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: AuthAuthorizationApiFormGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * Get names of claims that are requested indirectly by <i>"transformed
   *
   * @remarks
   * claims"</i>.
   *
   * <p>
   * A client application can request <i>"transformed claims"</i> by adding
   * names of transformed claims in the `claims` request parameter.
   * The following is an example of the `claims` request parameter
   * that requests a predefined transformed claim named `18_or_over`
   * and a transformed claim named `nationality_usa` to be embedded
   * in the response from the userinfo endpoint.
   * </p>
   *
   * ```json
   * {
   *   "transformed_claims": {
   *     "nationality_usa": {
   *       "claim": "nationalities",
   *       "fn": [
   *         [ "eq", "USA" ],
   *         "any"
   *       ]
   *     }
   *   },
   *   "userinfo": {
   *     "::18_or_over": null,
   *     ":nationality_usa": null
   *   }
   * }
   * ```
   *
   * The example above assumes that a transformed claim named `18_or_over`
   * is predefined by the authorization server like below.
   *
   * ```json
   * {
   *   "18_or_over": {
   *     "claim": "birthdate",
   *     "fn": [
   *       "years_ago",
   *       [ "gte", 18 ]
   *     ]
   *   }
   * }
   * ```
   *
   * In the example, the `nationalities` claim is requested indirectly
   * by the `nationality_usa` transformed claim. Likewise, the
   * `birthdate` claim is requested indirectly by the `18_or_over`
   * transformed claim.
   *
   * When the `claims` request parameter of an authorization request is
   * like the example above, this `requestedClaimsForTx` property will
   * hold the following value.
   *
   * ```json
   * [ "birthdate", "nationalities" ]
   * ```
   *
   * It is expected that the authorization server implementation prepares values
   * of the listed claims and passes them as the value of the `claimsForTx`
   * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
   * is an example of the value of the `claimsForTx` request parameter.
   *
   * ```json
   * {
   *   "birthdate": "1970-01-23",
   *   "nationalities": [ "DEU", "USA" ]
   * }
   * ```
   */
  requestedClaimsForTx?: Array<string> | undefined;
  /**
   * Names of verified claims that will be referenced when transformed claims are computed.
   *
   * @remarks
   */
  requestedVerifiedClaimsForTx?: Array<Array<string>> | undefined;
  /**
   * the value of the `transformed_claims` property in the `claims` request
   *
   * @remarks
   * parameter of an authorization request or in the `claims` property in a
   * request object.
   */
  transformedClaims?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * Get the list of claims that the client application requests to be
   *
   * @remarks
   * embedded in userinfo responses. The value comes from the `"scope"`
   * and `"claims"` request parameters of the original authorization
   * request.
   */
  claimsAtUserInfo?: Array<string> | undefined;
  credentialOfferInfo?: AuthAuthorizationApiFormCredentialOfferInfo | undefined;
  /**
   * Get the information about the <b>issuable credentials</b> that can
   *
   * @remarks
   * be obtained by presenting the access token that will be issued as a
   * result of the authorization request.
   */
  issuableCredentials?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormRequestBody$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthAuthorizationApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiFormRequestBody$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormRequestBody$ {
  /** @deprecated use `AuthAuthorizationApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormRequestBody$Outbound;
}

export function authAuthorizationApiFormRequestBodyToJSON(
  authAuthorizationApiFormRequestBody: AuthAuthorizationApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormRequestBody$outboundSchema.parse(
      authAuthorizationApiFormRequestBody,
    ),
  );
}

export function authAuthorizationApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormRequest$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthAuthorizationApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthAuthorizationApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthAuthorizationApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthAuthorizationApiFormRequest$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthAuthorizationApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormRequest$ {
  /** @deprecated use `AuthAuthorizationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormRequest$Outbound;
}

export function authAuthorizationApiFormRequestToJSON(
  authAuthorizationApiFormRequest: AuthAuthorizationApiFormRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormRequest$outboundSchema.parse(
      authAuthorizationApiFormRequest,
    ),
  );
}

export function authAuthorizationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormAction
> = z.nativeEnum(AuthAuthorizationApiFormAction);

/** @internal */
export const AuthAuthorizationApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormAction
> = AuthAuthorizationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormAction$ {
  /** @deprecated use `AuthAuthorizationApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormClientName$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormClientName,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormClientName$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormClientName$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormClientName$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormClientName
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormClientName$ {
  /** @deprecated use `AuthAuthorizationApiFormClientName$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormClientName$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClientName$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormClientName$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClientName$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormClientName$Outbound;
}

export function authAuthorizationApiFormClientNameToJSON(
  authAuthorizationApiFormClientName: AuthAuthorizationApiFormClientName,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormClientName$outboundSchema.parse(
      authAuthorizationApiFormClientName,
    ),
  );
}

export function authAuthorizationApiFormClientNameFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormClientName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormClientName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormClientName' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormClientDescription$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormClientDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormClientDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormClientDescription$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormClientDescription$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormClientDescription
  > = z.object({
    tag: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormClientDescription$ {
  /** @deprecated use `AuthAuthorizationApiFormClientDescription$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormClientDescription$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClientDescription$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormClientDescription$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClientDescription$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormClientDescription$Outbound;
}

export function authAuthorizationApiFormClientDescriptionToJSON(
  authAuthorizationApiFormClientDescription:
    AuthAuthorizationApiFormClientDescription,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormClientDescription$outboundSchema.parse(
      authAuthorizationApiFormClientDescription,
    ),
  );
}

export function authAuthorizationApiFormClientDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormClientDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormClientDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormClientDescription' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormClientType$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormClientType
> = z.nativeEnum(AuthAuthorizationApiFormClientType);

/** @internal */
export const AuthAuthorizationApiFormClientType$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormClientType
> = AuthAuthorizationApiFormClientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormClientType$ {
  /** @deprecated use `AuthAuthorizationApiFormClientType$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormClientType$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClientType$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormClientType$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormLogoUris$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormLogoUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormLogoUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormLogoUris$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormLogoUris$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormLogoUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormLogoUris$ {
  /** @deprecated use `AuthAuthorizationApiFormLogoUris$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormLogoUris$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormLogoUris$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormLogoUris$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormLogoUris$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormLogoUris$Outbound;
}

export function authAuthorizationApiFormLogoUrisToJSON(
  authAuthorizationApiFormLogoUris: AuthAuthorizationApiFormLogoUris,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormLogoUris$outboundSchema.parse(
      authAuthorizationApiFormLogoUris,
    ),
  );
}

export function authAuthorizationApiFormLogoUrisFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormLogoUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormLogoUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormLogoUris' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormTosUris$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormTosUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormTosUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormTosUris$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormTosUris$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormTosUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormTosUris$ {
  /** @deprecated use `AuthAuthorizationApiFormTosUris$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormTosUris$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormTosUris$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormTosUris$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormTosUris$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormTosUris$Outbound;
}

export function authAuthorizationApiFormTosUrisToJSON(
  authAuthorizationApiFormTosUris: AuthAuthorizationApiFormTosUris,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormTosUris$outboundSchema.parse(
      authAuthorizationApiFormTosUris,
    ),
  );
}

export function authAuthorizationApiFormTosUrisFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormTosUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormTosUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormTosUris' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormPolicyUris$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormPolicyUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormPolicyUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormPolicyUris$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormPolicyUris$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormPolicyUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormPolicyUris$ {
  /** @deprecated use `AuthAuthorizationApiFormPolicyUris$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormPolicyUris$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormPolicyUris$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormPolicyUris$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormPolicyUris$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormPolicyUris$Outbound;
}

export function authAuthorizationApiFormPolicyUrisToJSON(
  authAuthorizationApiFormPolicyUris: AuthAuthorizationApiFormPolicyUris,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormPolicyUris$outboundSchema.parse(
      authAuthorizationApiFormPolicyUris,
    ),
  );
}

export function authAuthorizationApiFormPolicyUrisFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormPolicyUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormPolicyUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormPolicyUris' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormClient$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => AuthAuthorizationApiFormClientName$inboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthAuthorizationApiFormClientDescription$inboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: AuthAuthorizationApiFormClientType$inboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(
    z.lazy(() => AuthAuthorizationApiFormLogoUris$inboundSchema),
  ).optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => AuthAuthorizationApiFormTosUris$inboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => AuthAuthorizationApiFormPolicyUris$inboundSchema),
  ).optional(),
});

/** @internal */
export type AuthAuthorizationApiFormClient$Outbound = {
  number?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<AuthAuthorizationApiFormClientName$Outbound> | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<AuthAuthorizationApiFormClientDescription$Outbound>
    | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<AuthAuthorizationApiFormLogoUris$Outbound> | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<AuthAuthorizationApiFormTosUris$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?: Array<AuthAuthorizationApiFormPolicyUris$Outbound> | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormClient$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormClient$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormClient
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => AuthAuthorizationApiFormClientName$outboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthAuthorizationApiFormClientDescription$outboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: AuthAuthorizationApiFormClientType$outboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(
    z.lazy(() => AuthAuthorizationApiFormLogoUris$outboundSchema),
  ).optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => AuthAuthorizationApiFormTosUris$outboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(
    z.lazy(() => AuthAuthorizationApiFormPolicyUris$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormClient$ {
  /** @deprecated use `AuthAuthorizationApiFormClient$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormClient$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClient$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormClient$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormClient$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormClient$Outbound;
}

export function authAuthorizationApiFormClientToJSON(
  authAuthorizationApiFormClient: AuthAuthorizationApiFormClient,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormClient$outboundSchema.parse(
      authAuthorizationApiFormClient,
    ),
  );
}

export function authAuthorizationApiFormClientFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormClient' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormDisplay$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormDisplay
> = z.nativeEnum(AuthAuthorizationApiFormDisplay);

/** @internal */
export const AuthAuthorizationApiFormDisplay$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormDisplay
> = AuthAuthorizationApiFormDisplay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormDisplay$ {
  /** @deprecated use `AuthAuthorizationApiFormDisplay$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormDisplay$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormDisplay$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormDisplay$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormMetadatum$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormMetadatum$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormMetadatum$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormMetadatum$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormMetadatum
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormMetadatum$ {
  /** @deprecated use `AuthAuthorizationApiFormMetadatum$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormMetadatum$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormMetadatum$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormMetadatum$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormMetadatum$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormMetadatum$Outbound;
}

export function authAuthorizationApiFormMetadatumToJSON(
  authAuthorizationApiFormMetadatum: AuthAuthorizationApiFormMetadatum,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormMetadatum$outboundSchema.parse(
      authAuthorizationApiFormMetadatum,
    ),
  );
}

export function authAuthorizationApiFormMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormMetadatum' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormSupportedGrantType$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedGrantType> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedGrantType);

/** @internal */
export const AuthAuthorizationApiFormSupportedGrantType$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedGrantType> =
    AuthAuthorizationApiFormSupportedGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedGrantType$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedGrantType$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedGrantType$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedGrantType$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedGrantType$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedResponseType$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedResponseType> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedResponseType);

/** @internal */
export const AuthAuthorizationApiFormSupportedResponseType$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedResponseType> =
    AuthAuthorizationApiFormSupportedResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedResponseType$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedResponseType$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedResponseType$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedResponseType$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedResponseType$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedServiceProfile$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedServiceProfile> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedServiceProfile);

/** @internal */
export const AuthAuthorizationApiFormSupportedServiceProfile$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedServiceProfile> =
    AuthAuthorizationApiFormSupportedServiceProfile$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedServiceProfile$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedServiceProfile$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedServiceProfile$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedServiceProfile$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedServiceProfile$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedDisplay$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedDisplay> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedDisplay);

/** @internal */
export const AuthAuthorizationApiFormSupportedDisplay$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedDisplay> =
    AuthAuthorizationApiFormSupportedDisplay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedDisplay$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedDisplay$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedDisplay$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedDisplay$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedDisplay$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedTokenAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedTokenAuthMethod> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedTokenAuthMethod);

/** @internal */
export const AuthAuthorizationApiFormSupportedTokenAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedTokenAuthMethod> =
    AuthAuthorizationApiFormSupportedTokenAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedTokenAuthMethod$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedTokenAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedTokenAuthMethod$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedTokenAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedTokenAuthMethod$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedRevocationAuthMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedRevocationAuthMethod
  > = z.nativeEnum(AuthAuthorizationApiFormSupportedRevocationAuthMethod);

/** @internal */
export const AuthAuthorizationApiFormSupportedRevocationAuthMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedRevocationAuthMethod
  > = AuthAuthorizationApiFormSupportedRevocationAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedRevocationAuthMethod$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedRevocationAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedRevocationAuthMethod$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedRevocationAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedRevocationAuthMethod$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedIntrospectionAuthMethod
  > = z.nativeEnum(AuthAuthorizationApiFormSupportedIntrospectionAuthMethod);

/** @internal */
export const AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedIntrospectionAuthMethod
  > = AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormMtlsEndpointAlias$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormMtlsEndpointAlias,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  uri: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormMtlsEndpointAlias$Outbound = {
  name?: string | undefined;
  uri?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormMtlsEndpointAlias$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormMtlsEndpointAlias$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormMtlsEndpointAlias
  > = z.object({
    name: z.string().optional(),
    uri: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormMtlsEndpointAlias$ {
  /** @deprecated use `AuthAuthorizationApiFormMtlsEndpointAlias$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormMtlsEndpointAlias$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormMtlsEndpointAlias$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormMtlsEndpointAlias$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormMtlsEndpointAlias$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormMtlsEndpointAlias$Outbound;
}

export function authAuthorizationApiFormMtlsEndpointAliasToJSON(
  authAuthorizationApiFormMtlsEndpointAlias:
    AuthAuthorizationApiFormMtlsEndpointAlias,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormMtlsEndpointAlias$outboundSchema.parse(
      authAuthorizationApiFormMtlsEndpointAlias,
    ),
  );
}

export function authAuthorizationApiFormMtlsEndpointAliasFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormMtlsEndpointAlias,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormMtlsEndpointAlias$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormMtlsEndpointAlias' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormAccessTokenSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormAccessTokenSignAlg> = z
    .nativeEnum(AuthAuthorizationApiFormAccessTokenSignAlg);

/** @internal */
export const AuthAuthorizationApiFormAccessTokenSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormAccessTokenSignAlg> =
    AuthAuthorizationApiFormAccessTokenSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormAccessTokenSignAlg$ {
  /** @deprecated use `AuthAuthorizationApiFormAccessTokenSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormAccessTokenSignAlg$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormAccessTokenSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormAccessTokenSignAlg$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormServiceDescription$inboundSchema:
  z.ZodType<AuthAuthorizationApiFormServiceDescription, z.ZodTypeDef, unknown> =
    z.object({
      tag: z.string().optional(),
      value: z.string().optional(),
    });

/** @internal */
export type AuthAuthorizationApiFormServiceDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormServiceDescription$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormServiceDescription$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormServiceDescription
  > = z.object({
    tag: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormServiceDescription$ {
  /** @deprecated use `AuthAuthorizationApiFormServiceDescription$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormServiceDescription$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormServiceDescription$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormServiceDescription$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormServiceDescription$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormServiceDescription$Outbound;
}

export function authAuthorizationApiFormServiceDescriptionToJSON(
  authAuthorizationApiFormServiceDescription:
    AuthAuthorizationApiFormServiceDescription,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormServiceDescription$outboundSchema.parse(
      authAuthorizationApiFormServiceDescription,
    ),
  );
}

export function authAuthorizationApiFormServiceDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormServiceDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormServiceDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormServiceDescription' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormSupportedScopeAttribute$inboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormSupportedScopeAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type AuthAuthorizationApiFormSupportedScopeAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormSupportedScopeAttribute$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormSupportedScopeAttribute$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormSupportedScopeAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedScopeAttribute$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedScopeAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedScopeAttribute$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedScopeAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedScopeAttribute$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedScopeAttribute$Outbound` instead. */
  export type Outbound =
    AuthAuthorizationApiFormSupportedScopeAttribute$Outbound;
}

export function authAuthorizationApiFormSupportedScopeAttributeToJSON(
  authAuthorizationApiFormSupportedScopeAttribute:
    AuthAuthorizationApiFormSupportedScopeAttribute,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormSupportedScopeAttribute$outboundSchema.parse(
      authAuthorizationApiFormSupportedScopeAttribute,
    ),
  );
}

export function authAuthorizationApiFormSupportedScopeAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormSupportedScopeAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormSupportedScopeAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormSupportedScopeAttribute' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormSupportedScope$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormSupportedScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthAuthorizationApiFormServiceDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => AuthAuthorizationApiFormSupportedScopeAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type AuthAuthorizationApiFormSupportedScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<AuthAuthorizationApiFormServiceDescription$Outbound>
    | undefined;
  attributes?:
    | Array<AuthAuthorizationApiFormSupportedScopeAttribute$Outbound>
    | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormSupportedScope$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormSupportedScope$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormSupportedScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthAuthorizationApiFormServiceDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() =>
      AuthAuthorizationApiFormSupportedScopeAttribute$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedScope$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedScope$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedScope$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedScope$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedScope$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedScope$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormSupportedScope$Outbound;
}

export function authAuthorizationApiFormSupportedScopeToJSON(
  authAuthorizationApiFormSupportedScope:
    AuthAuthorizationApiFormSupportedScope,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormSupportedScope$outboundSchema.parse(
      authAuthorizationApiFormSupportedScope,
    ),
  );
}

export function authAuthorizationApiFormSupportedScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormSupportedScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormSupportedScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormSupportedScope' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormSupportedClaimType$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedClaimType> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedClaimType);

/** @internal */
export const AuthAuthorizationApiFormSupportedClaimType$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedClaimType> =
    AuthAuthorizationApiFormSupportedClaimType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedClaimType$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedClaimType$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedClaimType$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedClaimType$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedClaimType$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$inboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode
  > = z.nativeEnum(
    AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode,
  );

/** @internal */
export const AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$outboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode
  > =
    AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormUserCodeCharset$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormUserCodeCharset> = z
    .nativeEnum(AuthAuthorizationApiFormUserCodeCharset);

/** @internal */
export const AuthAuthorizationApiFormUserCodeCharset$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormUserCodeCharset> =
    AuthAuthorizationApiFormUserCodeCharset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormUserCodeCharset$ {
  /** @deprecated use `AuthAuthorizationApiFormUserCodeCharset$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormUserCodeCharset$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormUserCodeCharset$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormUserCodeCharset$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$inboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet
  > = z.nativeEnum(AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet);

/** @internal */
export const AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$outboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet
  > = AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$ {
  /** @deprecated use `AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormServiceAttribute$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormServiceAttribute$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormServiceAttribute$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormServiceAttribute$ {
  /** @deprecated use `AuthAuthorizationApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormServiceAttribute$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormServiceAttribute$Outbound;
}

export function authAuthorizationApiFormServiceAttributeToJSON(
  authAuthorizationApiFormServiceAttribute:
    AuthAuthorizationApiFormServiceAttribute,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormServiceAttribute$outboundSchema.parse(
      authAuthorizationApiFormServiceAttribute,
    ),
  );
}

export function authAuthorizationApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormServiceAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormHsk$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormHsk,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormHsk$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormHsk$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormHsk$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormHsk
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormHsk$ {
  /** @deprecated use `AuthAuthorizationApiFormHsk$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormHsk$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormHsk$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormHsk$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormHsk$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormHsk$Outbound;
}

export function authAuthorizationApiFormHskToJSON(
  authAuthorizationApiFormHsk: AuthAuthorizationApiFormHsk,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormHsk$outboundSchema.parse(
      authAuthorizationApiFormHsk,
    ),
  );
}

export function authAuthorizationApiFormHskFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormHsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormHsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormHsk' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormSupportedAttachment$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedAttachment> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedAttachment);

/** @internal */
export const AuthAuthorizationApiFormSupportedAttachment$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedAttachment> =
    AuthAuthorizationApiFormSupportedAttachment$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedAttachment$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedAttachment$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedAttachment$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedAttachment$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedAttachment$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormSupportedClientRegistrationType$inboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedClientRegistrationType
  > = z.nativeEnum(AuthAuthorizationApiFormSupportedClientRegistrationType);

/** @internal */
export const AuthAuthorizationApiFormSupportedClientRegistrationType$outboundSchema:
  z.ZodNativeEnum<
    typeof AuthAuthorizationApiFormSupportedClientRegistrationType
  > = AuthAuthorizationApiFormSupportedClientRegistrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedClientRegistrationType$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedClientRegistrationType$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedClientRegistrationType$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedClientRegistrationType$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedClientRegistrationType$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormTrustAnchor$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormTrustAnchor,
  z.ZodTypeDef,
  unknown
> = z.object({
  entityId: z.string().optional(),
  jwks: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormTrustAnchor$Outbound = {
  entityId?: string | undefined;
  jwks?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormTrustAnchor$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormTrustAnchor$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormTrustAnchor
> = z.object({
  entityId: z.string().optional(),
  jwks: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormTrustAnchor$ {
  /** @deprecated use `AuthAuthorizationApiFormTrustAnchor$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormTrustAnchor$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormTrustAnchor$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormTrustAnchor$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormTrustAnchor$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormTrustAnchor$Outbound;
}

export function authAuthorizationApiFormTrustAnchorToJSON(
  authAuthorizationApiFormTrustAnchor: AuthAuthorizationApiFormTrustAnchor,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormTrustAnchor$outboundSchema.parse(
      authAuthorizationApiFormTrustAnchor,
    ),
  );
}

export function authAuthorizationApiFormTrustAnchorFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormTrustAnchor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormTrustAnchor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormTrustAnchor' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormSupportedPromptValue$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedPromptValue> = z
    .nativeEnum(AuthAuthorizationApiFormSupportedPromptValue);

/** @internal */
export const AuthAuthorizationApiFormSupportedPromptValue$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormSupportedPromptValue> =
    AuthAuthorizationApiFormSupportedPromptValue$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormSupportedPromptValue$ {
  /** @deprecated use `AuthAuthorizationApiFormSupportedPromptValue$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormSupportedPromptValue$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormSupportedPromptValue$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormSupportedPromptValue$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormFapiMode$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormFapiMode
> = z.nativeEnum(AuthAuthorizationApiFormFapiMode);

/** @internal */
export const AuthAuthorizationApiFormFapiMode$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormFapiMode
> = AuthAuthorizationApiFormFapiMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormFapiMode$ {
  /** @deprecated use `AuthAuthorizationApiFormFapiMode$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormFapiMode$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormFapiMode$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormFapiMode$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormCredentialIssuerMetadata$inboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormCredentialIssuerMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    credentialIssuer: z.string().optional(),
    authorizationServer: z.string().optional(),
    credentialEndpoint: z.boolean().optional(),
    batchCredentialEndpoint: z.number().int().optional(),
    deferredCredentialEndpoint: z.string().optional(),
    credentialsSupported: z.boolean().optional(),
  });

/** @internal */
export type AuthAuthorizationApiFormCredentialIssuerMetadata$Outbound = {
  credentialIssuer?: string | undefined;
  authorizationServer?: string | undefined;
  credentialEndpoint?: boolean | undefined;
  batchCredentialEndpoint?: number | undefined;
  deferredCredentialEndpoint?: string | undefined;
  credentialsSupported?: boolean | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormCredentialIssuerMetadata$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormCredentialIssuerMetadata$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormCredentialIssuerMetadata
  > = z.object({
    credentialIssuer: z.string().optional(),
    authorizationServer: z.string().optional(),
    credentialEndpoint: z.boolean().optional(),
    batchCredentialEndpoint: z.number().int().optional(),
    deferredCredentialEndpoint: z.string().optional(),
    credentialsSupported: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormCredentialIssuerMetadata$ {
  /** @deprecated use `AuthAuthorizationApiFormCredentialIssuerMetadata$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormCredentialIssuerMetadata$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormCredentialIssuerMetadata$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormCredentialIssuerMetadata$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormCredentialIssuerMetadata$Outbound` instead. */
  export type Outbound =
    AuthAuthorizationApiFormCredentialIssuerMetadata$Outbound;
}

export function authAuthorizationApiFormCredentialIssuerMetadataToJSON(
  authAuthorizationApiFormCredentialIssuerMetadata:
    AuthAuthorizationApiFormCredentialIssuerMetadata,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormCredentialIssuerMetadata$outboundSchema.parse(
      authAuthorizationApiFormCredentialIssuerMetadata,
    ),
  );
}

export function authAuthorizationApiFormCredentialIssuerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormCredentialIssuerMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormCredentialIssuerMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormCredentialIssuerMetadata' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormService$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormService,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  serviceName: z.string().optional(),
  issuer: z.string().optional(),
  description: z.string().optional(),
  apiKey: z.number().int().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  metadata: z.array(
    z.lazy(() => AuthAuthorizationApiFormMetadatum$inboundSchema),
  ).optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  authenticationCallbackEndpoint: z.string().optional(),
  authenticationCallbackApiKey: z.string().optional(),
  authenticationCallbackApiSecret: z.string().optional(),
  supportedAcrs: z.array(z.string()).optional(),
  supportedGrantTypes: z.array(
    AuthAuthorizationApiFormSupportedGrantType$inboundSchema,
  ).optional(),
  supportedResponseTypes: z.array(
    AuthAuthorizationApiFormSupportedResponseType$inboundSchema,
  ).optional(),
  supportedAuthorizationDetailsTypes: z.array(z.string()).optional(),
  supportedServiceProfiles: z.array(
    AuthAuthorizationApiFormSupportedServiceProfile$inboundSchema,
  ).optional(),
  errorDescriptionOmitted: z.boolean().optional(),
  errorUriOmitted: z.boolean().optional(),
  authorizationEndpoint: z.string().optional(),
  directAuthorizationEndpointEnabled: z.boolean().optional(),
  supportedUiLocales: z.array(z.string()).optional(),
  supportedDisplays: z.array(
    AuthAuthorizationApiFormSupportedDisplay$inboundSchema,
  ).optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  authorizationResponseDuration: z.number().int().optional(),
  tokenEndpoint: z.string().optional(),
  directTokenEndpointEnabled: z.boolean().optional(),
  supportedTokenAuthMethods: z.array(
    AuthAuthorizationApiFormSupportedTokenAuthMethod$inboundSchema,
  ).optional(),
  missingClientIdAllowed: z.boolean().optional(),
  revocationEndpoint: z.string().optional(),
  directRevocationEndpointEnabled: z.boolean().optional(),
  supportedRevocationAuthMethods: z.array(
    AuthAuthorizationApiFormSupportedRevocationAuthMethod$inboundSchema,
  ).optional(),
  introspectionEndpoint: z.string().optional(),
  directIntrospectionEndpointEnabled: z.boolean().optional(),
  supportedIntrospectionAuthMethods: z.array(
    AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$inboundSchema,
  ).optional(),
  pushedAuthReqEndpoint: z.string().optional(),
  pushedAuthReqDuration: z.number().int().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  traditionalRequestObjectProcessingApplied: z.boolean().optional(),
  mutualTlsValidatePkiCertChain: z.boolean().optional(),
  trustedRootCertificates: z.array(z.string()).optional(),
  mtlsEndpointAliases: z.array(
    z.lazy(() => AuthAuthorizationApiFormMtlsEndpointAlias$inboundSchema),
  ).optional(),
  accessTokenType: z.string().optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  accessTokenSignAlg: AuthAuthorizationApiFormAccessTokenSignAlg$inboundSchema
    .optional(),
  accessTokenSignatureKeyId: z.string().optional(),
  refreshTokenDuration: z.number().int().optional(),
  refreshTokenDurationKept: z.boolean().optional(),
  refreshTokenDurationReset: z.boolean().optional(),
  refreshTokenKept: z.boolean().optional(),
  supportedScopes: z.array(
    z.lazy(() => AuthAuthorizationApiFormSupportedScope$inboundSchema),
  ).optional(),
  scopeRequired: z.boolean().optional(),
  idTokenDuration: z.number().int().optional(),
  allowableClockSkew: z.number().int().optional(),
  supportedClaimTypes: z.array(
    AuthAuthorizationApiFormSupportedClaimType$inboundSchema,
  ).optional(),
  supportedClaimLocales: z.array(z.string()).optional(),
  supportedClaims: z.array(z.string()).optional(),
  claimShortcutRestrictive: z.boolean().optional(),
  jwksUri: z.string().optional(),
  directJwksEndpointEnabled: z.boolean().optional(),
  jwks: z.string().optional(),
  idTokenSignatureKeyId: z.string().optional(),
  userInfoSignatureKeyId: z.string().optional(),
  authorizationSignatureKeyId: z.string().optional(),
  userInfoEndpoint: z.string().optional(),
  directUserInfoEndpointEnabled: z.boolean().optional(),
  dynamicRegistrationSupported: z.boolean().optional(),
  registrationEndpoint: z.string().optional(),
  registrationManagementEndpoint: z.string().optional(),
  policyUri: z.string().optional(),
  tosUri: z.string().optional(),
  serviceDocumentation: z.string().optional(),
  backchannelAuthenticationEndpoint: z.string().optional(),
  supportedBackchannelTokenDeliveryModes: z.array(
    AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$inboundSchema,
  ).optional(),
  backchannelAuthReqIdDuration: z.number().int().optional(),
  backchannelPollingInterval: z.number().int().optional(),
  backchannelUserCodeParameterSupported: z.boolean().optional(),
  backchannelBindingMessageRequiredInFapi: z.boolean().optional(),
  deviceAuthorizationEndpoint: z.string().optional(),
  deviceVerificationUri: z.string().optional(),
  deviceVerificationUriComplete: z.string().optional(),
  deviceFlowCodeDuration: z.number().int().optional(),
  deviceFlowPollingInterval: z.number().int().optional(),
  userCodeCharset: AuthAuthorizationApiFormUserCodeCharset$inboundSchema
    .optional(),
  userCodeLength: z.number().int().optional(),
  supportedTrustFrameworks: z.array(z.string()).optional(),
  supportedEvidence: z.array(z.string()).optional(),
  supportedIdentityDocuments: z.array(z.string()).optional(),
  supportedVerificationMethods: z.array(z.string()).optional(),
  supportedVerifiedClaims: z.array(z.string()).optional(),
  verifiedClaimsValidationSchemaSet:
    AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$inboundSchema
      .optional(),
  attributes: z.array(
    z.lazy(() => AuthAuthorizationApiFormServiceAttribute$inboundSchema),
  ).optional(),
  nbfOptional: z.boolean().optional(),
  issSuppressed: z.boolean().optional(),
  supportedCustomClientMetadata: z.array(z.string()).optional(),
  tokenExpirationLinked: z.boolean().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  hsmEnabled: z.boolean().optional(),
  hsks: z.array(z.lazy(() => AuthAuthorizationApiFormHsk$inboundSchema))
    .optional(),
  grantManagementEndpoint: z.string().optional(),
  grantManagementActionRequired: z.boolean().optional(),
  unauthorizedOnClientConfigSupported: z.boolean().optional(),
  dcrScopeUsedAsRequestable: z.boolean().optional(),
  endSessionEndpoint: z.string().optional(),
  loopbackRedirectionUriVariable: z.boolean().optional(),
  requestObjectAudienceChecked: z.boolean().optional(),
  accessTokenForExternalAttachmentEmbedded: z.boolean().optional(),
  authorityHints: z.array(z.string()).optional(),
  federationEnabled: z.boolean().optional(),
  federationJwks: z.string().optional(),
  federationSignatureKeyId: z.string().optional(),
  federationConfigurationDuration: z.number().int().optional(),
  federationRegistrationEndpoint: z.string().optional(),
  organizationName: z.string().optional(),
  predefinedTransformedClaims: z.string().optional(),
  refreshTokenIdempotent: z.boolean().optional(),
  signedJwksUri: z.string().optional(),
  supportedAttachments: z.array(
    AuthAuthorizationApiFormSupportedAttachment$inboundSchema,
  ).optional(),
  supportedDigestAlgorithms: z.array(z.string()).optional(),
  supportedDocuments: z.array(z.string()).optional(),
  supportedDocumentsMethods: z.array(z.string()).optional(),
  supportedDocumentsValidationMethods: z.array(z.string()).optional(),
  supportedDocumentsVerificationMethods: z.array(z.string()).optional(),
  supportedElectronicRecords: z.array(z.string()).optional(),
  supportedClientRegistrationTypes: z.array(
    AuthAuthorizationApiFormSupportedClientRegistrationType$inboundSchema,
  ).optional(),
  tokenExchangeByIdentifiableClientsOnly: z.boolean().optional(),
  tokenExchangeByConfidentialClientsOnly: z.boolean().optional(),
  tokenExchangeByPermittedClientsOnly: z.boolean().optional(),
  tokenExchangeEncryptedJwtRejected: z.boolean().optional(),
  tokenExchangeUnsignedJwtRejected: z.boolean().optional(),
  jwtGrantByIdentifiableClientsOnly: z.boolean().optional(),
  jwtGrantEncryptedJwtRejected: z.boolean().optional(),
  jwtGrantUnsignedJwtRejected: z.boolean().optional(),
  dcrDuplicateSoftwareIdBlocked: z.boolean().optional(),
  trustAnchors: z.array(
    z.lazy(() => AuthAuthorizationApiFormTrustAnchor$inboundSchema),
  ).optional(),
  openidDroppedOnRefreshWithoutOfflineAccess: z.boolean().optional(),
  supportedDocumentsCheckMethods: z.array(z.string()).optional(),
  rsResponseSigned: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonceRequired: z.boolean().optional(),
  verifiableCredentialsEnabled: z.boolean().optional(),
  credentialJwksUri: z.string().optional(),
  credentialOfferDuration: z.number().int().optional(),
  dpopNonceDuration: z.number().int().optional(),
  preAuthorizedGrantAnonymousAccessSupported: z.boolean().optional(),
  credentialTransactionDuration: z.number().int().optional(),
  introspectionSignatureKeyId: z.string().optional(),
  resourceSignatureKeyId: z.string().optional(),
  userPinLength: z.number().int().optional(),
  supportedPromptValues: z.array(
    AuthAuthorizationApiFormSupportedPromptValue$inboundSchema,
  ).optional(),
  idTokenReissuable: z.boolean().optional(),
  credentialJwks: z.string().optional(),
  fapiModes: z.array(AuthAuthorizationApiFormFapiMode$inboundSchema).optional(),
  credentialDuration: z.number().int().optional(),
  credentialIssuerMetadata: z.lazy(() =>
    AuthAuthorizationApiFormCredentialIssuerMetadata$inboundSchema
  ).optional(),
  idTokenAudType: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormService$Outbound = {
  number?: number | undefined;
  serviceName?: string | undefined;
  issuer?: string | undefined;
  description?: string | undefined;
  apiKey?: number | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  metadata?: Array<AuthAuthorizationApiFormMetadatum$Outbound> | undefined;
  createdAt?: number | undefined;
  modifiedAt?: number | undefined;
  authenticationCallbackEndpoint?: string | undefined;
  authenticationCallbackApiKey?: string | undefined;
  authenticationCallbackApiSecret?: string | undefined;
  supportedAcrs?: Array<string> | undefined;
  supportedGrantTypes?: Array<string> | undefined;
  supportedResponseTypes?: Array<string> | undefined;
  supportedAuthorizationDetailsTypes?: Array<string> | undefined;
  supportedServiceProfiles?: Array<string> | undefined;
  errorDescriptionOmitted?: boolean | undefined;
  errorUriOmitted?: boolean | undefined;
  authorizationEndpoint?: string | undefined;
  directAuthorizationEndpointEnabled?: boolean | undefined;
  supportedUiLocales?: Array<string> | undefined;
  supportedDisplays?: Array<string> | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  authorizationResponseDuration?: number | undefined;
  tokenEndpoint?: string | undefined;
  directTokenEndpointEnabled?: boolean | undefined;
  supportedTokenAuthMethods?: Array<string> | undefined;
  missingClientIdAllowed?: boolean | undefined;
  revocationEndpoint?: string | undefined;
  directRevocationEndpointEnabled?: boolean | undefined;
  supportedRevocationAuthMethods?: Array<string> | undefined;
  introspectionEndpoint?: string | undefined;
  directIntrospectionEndpointEnabled?: boolean | undefined;
  supportedIntrospectionAuthMethods?: Array<string> | undefined;
  pushedAuthReqEndpoint?: string | undefined;
  pushedAuthReqDuration?: number | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  traditionalRequestObjectProcessingApplied?: boolean | undefined;
  mutualTlsValidatePkiCertChain?: boolean | undefined;
  trustedRootCertificates?: Array<string> | undefined;
  mtlsEndpointAliases?:
    | Array<AuthAuthorizationApiFormMtlsEndpointAlias$Outbound>
    | undefined;
  accessTokenType?: string | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  accessTokenSignAlg?: string | undefined;
  accessTokenSignatureKeyId?: string | undefined;
  refreshTokenDuration?: number | undefined;
  refreshTokenDurationKept?: boolean | undefined;
  refreshTokenDurationReset?: boolean | undefined;
  refreshTokenKept?: boolean | undefined;
  supportedScopes?:
    | Array<AuthAuthorizationApiFormSupportedScope$Outbound>
    | undefined;
  scopeRequired?: boolean | undefined;
  idTokenDuration?: number | undefined;
  allowableClockSkew?: number | undefined;
  supportedClaimTypes?: Array<string> | undefined;
  supportedClaimLocales?: Array<string> | undefined;
  supportedClaims?: Array<string> | undefined;
  claimShortcutRestrictive?: boolean | undefined;
  jwksUri?: string | undefined;
  directJwksEndpointEnabled?: boolean | undefined;
  jwks?: string | undefined;
  idTokenSignatureKeyId?: string | undefined;
  userInfoSignatureKeyId?: string | undefined;
  authorizationSignatureKeyId?: string | undefined;
  userInfoEndpoint?: string | undefined;
  directUserInfoEndpointEnabled?: boolean | undefined;
  dynamicRegistrationSupported?: boolean | undefined;
  registrationEndpoint?: string | undefined;
  registrationManagementEndpoint?: string | undefined;
  policyUri?: string | undefined;
  tosUri?: string | undefined;
  serviceDocumentation?: string | undefined;
  backchannelAuthenticationEndpoint?: string | undefined;
  supportedBackchannelTokenDeliveryModes?: Array<string> | undefined;
  backchannelAuthReqIdDuration?: number | undefined;
  backchannelPollingInterval?: number | undefined;
  backchannelUserCodeParameterSupported?: boolean | undefined;
  backchannelBindingMessageRequiredInFapi?: boolean | undefined;
  deviceAuthorizationEndpoint?: string | undefined;
  deviceVerificationUri?: string | undefined;
  deviceVerificationUriComplete?: string | undefined;
  deviceFlowCodeDuration?: number | undefined;
  deviceFlowPollingInterval?: number | undefined;
  userCodeCharset?: string | undefined;
  userCodeLength?: number | undefined;
  supportedTrustFrameworks?: Array<string> | undefined;
  supportedEvidence?: Array<string> | undefined;
  supportedIdentityDocuments?: Array<string> | undefined;
  supportedVerificationMethods?: Array<string> | undefined;
  supportedVerifiedClaims?: Array<string> | undefined;
  verifiedClaimsValidationSchemaSet?: string | undefined;
  attributes?:
    | Array<AuthAuthorizationApiFormServiceAttribute$Outbound>
    | undefined;
  nbfOptional?: boolean | undefined;
  issSuppressed?: boolean | undefined;
  supportedCustomClientMetadata?: Array<string> | undefined;
  tokenExpirationLinked?: boolean | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  hsmEnabled?: boolean | undefined;
  hsks?: Array<AuthAuthorizationApiFormHsk$Outbound> | undefined;
  grantManagementEndpoint?: string | undefined;
  grantManagementActionRequired?: boolean | undefined;
  unauthorizedOnClientConfigSupported?: boolean | undefined;
  dcrScopeUsedAsRequestable?: boolean | undefined;
  endSessionEndpoint?: string | undefined;
  loopbackRedirectionUriVariable?: boolean | undefined;
  requestObjectAudienceChecked?: boolean | undefined;
  accessTokenForExternalAttachmentEmbedded?: boolean | undefined;
  authorityHints?: Array<string> | undefined;
  federationEnabled?: boolean | undefined;
  federationJwks?: string | undefined;
  federationSignatureKeyId?: string | undefined;
  federationConfigurationDuration?: number | undefined;
  federationRegistrationEndpoint?: string | undefined;
  organizationName?: string | undefined;
  predefinedTransformedClaims?: string | undefined;
  refreshTokenIdempotent?: boolean | undefined;
  signedJwksUri?: string | undefined;
  supportedAttachments?: Array<string> | undefined;
  supportedDigestAlgorithms?: Array<string> | undefined;
  supportedDocuments?: Array<string> | undefined;
  supportedDocumentsMethods?: Array<string> | undefined;
  supportedDocumentsValidationMethods?: Array<string> | undefined;
  supportedDocumentsVerificationMethods?: Array<string> | undefined;
  supportedElectronicRecords?: Array<string> | undefined;
  supportedClientRegistrationTypes?: Array<string> | undefined;
  tokenExchangeByIdentifiableClientsOnly?: boolean | undefined;
  tokenExchangeByConfidentialClientsOnly?: boolean | undefined;
  tokenExchangeByPermittedClientsOnly?: boolean | undefined;
  tokenExchangeEncryptedJwtRejected?: boolean | undefined;
  tokenExchangeUnsignedJwtRejected?: boolean | undefined;
  jwtGrantByIdentifiableClientsOnly?: boolean | undefined;
  jwtGrantEncryptedJwtRejected?: boolean | undefined;
  jwtGrantUnsignedJwtRejected?: boolean | undefined;
  dcrDuplicateSoftwareIdBlocked?: boolean | undefined;
  trustAnchors?:
    | Array<AuthAuthorizationApiFormTrustAnchor$Outbound>
    | undefined;
  openidDroppedOnRefreshWithoutOfflineAccess?: boolean | undefined;
  supportedDocumentsCheckMethods?: Array<string> | undefined;
  rsResponseSigned?: boolean | undefined;
  cnonceDuration?: number | undefined;
  dpopNonceRequired?: boolean | undefined;
  verifiableCredentialsEnabled?: boolean | undefined;
  credentialJwksUri?: string | undefined;
  credentialOfferDuration?: number | undefined;
  dpopNonceDuration?: number | undefined;
  preAuthorizedGrantAnonymousAccessSupported?: boolean | undefined;
  credentialTransactionDuration?: number | undefined;
  introspectionSignatureKeyId?: string | undefined;
  resourceSignatureKeyId?: string | undefined;
  userPinLength?: number | undefined;
  supportedPromptValues?: Array<string> | undefined;
  idTokenReissuable?: boolean | undefined;
  credentialJwks?: string | undefined;
  fapiModes?: Array<string> | undefined;
  credentialDuration?: number | undefined;
  credentialIssuerMetadata?:
    | AuthAuthorizationApiFormCredentialIssuerMetadata$Outbound
    | undefined;
  idTokenAudType?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormService$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormService$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormService
> = z.object({
  number: z.number().int().optional(),
  serviceName: z.string().optional(),
  issuer: z.string().optional(),
  description: z.string().optional(),
  apiKey: z.number().int().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  metadata: z.array(
    z.lazy(() => AuthAuthorizationApiFormMetadatum$outboundSchema),
  ).optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  authenticationCallbackEndpoint: z.string().optional(),
  authenticationCallbackApiKey: z.string().optional(),
  authenticationCallbackApiSecret: z.string().optional(),
  supportedAcrs: z.array(z.string()).optional(),
  supportedGrantTypes: z.array(
    AuthAuthorizationApiFormSupportedGrantType$outboundSchema,
  ).optional(),
  supportedResponseTypes: z.array(
    AuthAuthorizationApiFormSupportedResponseType$outboundSchema,
  ).optional(),
  supportedAuthorizationDetailsTypes: z.array(z.string()).optional(),
  supportedServiceProfiles: z.array(
    AuthAuthorizationApiFormSupportedServiceProfile$outboundSchema,
  ).optional(),
  errorDescriptionOmitted: z.boolean().optional(),
  errorUriOmitted: z.boolean().optional(),
  authorizationEndpoint: z.string().optional(),
  directAuthorizationEndpointEnabled: z.boolean().optional(),
  supportedUiLocales: z.array(z.string()).optional(),
  supportedDisplays: z.array(
    AuthAuthorizationApiFormSupportedDisplay$outboundSchema,
  ).optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  authorizationResponseDuration: z.number().int().optional(),
  tokenEndpoint: z.string().optional(),
  directTokenEndpointEnabled: z.boolean().optional(),
  supportedTokenAuthMethods: z.array(
    AuthAuthorizationApiFormSupportedTokenAuthMethod$outboundSchema,
  ).optional(),
  missingClientIdAllowed: z.boolean().optional(),
  revocationEndpoint: z.string().optional(),
  directRevocationEndpointEnabled: z.boolean().optional(),
  supportedRevocationAuthMethods: z.array(
    AuthAuthorizationApiFormSupportedRevocationAuthMethod$outboundSchema,
  ).optional(),
  introspectionEndpoint: z.string().optional(),
  directIntrospectionEndpointEnabled: z.boolean().optional(),
  supportedIntrospectionAuthMethods: z.array(
    AuthAuthorizationApiFormSupportedIntrospectionAuthMethod$outboundSchema,
  ).optional(),
  pushedAuthReqEndpoint: z.string().optional(),
  pushedAuthReqDuration: z.number().int().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  traditionalRequestObjectProcessingApplied: z.boolean().optional(),
  mutualTlsValidatePkiCertChain: z.boolean().optional(),
  trustedRootCertificates: z.array(z.string()).optional(),
  mtlsEndpointAliases: z.array(
    z.lazy(() => AuthAuthorizationApiFormMtlsEndpointAlias$outboundSchema),
  ).optional(),
  accessTokenType: z.string().optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  accessTokenSignAlg: AuthAuthorizationApiFormAccessTokenSignAlg$outboundSchema
    .optional(),
  accessTokenSignatureKeyId: z.string().optional(),
  refreshTokenDuration: z.number().int().optional(),
  refreshTokenDurationKept: z.boolean().optional(),
  refreshTokenDurationReset: z.boolean().optional(),
  refreshTokenKept: z.boolean().optional(),
  supportedScopes: z.array(
    z.lazy(() => AuthAuthorizationApiFormSupportedScope$outboundSchema),
  ).optional(),
  scopeRequired: z.boolean().optional(),
  idTokenDuration: z.number().int().optional(),
  allowableClockSkew: z.number().int().optional(),
  supportedClaimTypes: z.array(
    AuthAuthorizationApiFormSupportedClaimType$outboundSchema,
  ).optional(),
  supportedClaimLocales: z.array(z.string()).optional(),
  supportedClaims: z.array(z.string()).optional(),
  claimShortcutRestrictive: z.boolean().optional(),
  jwksUri: z.string().optional(),
  directJwksEndpointEnabled: z.boolean().optional(),
  jwks: z.string().optional(),
  idTokenSignatureKeyId: z.string().optional(),
  userInfoSignatureKeyId: z.string().optional(),
  authorizationSignatureKeyId: z.string().optional(),
  userInfoEndpoint: z.string().optional(),
  directUserInfoEndpointEnabled: z.boolean().optional(),
  dynamicRegistrationSupported: z.boolean().optional(),
  registrationEndpoint: z.string().optional(),
  registrationManagementEndpoint: z.string().optional(),
  policyUri: z.string().optional(),
  tosUri: z.string().optional(),
  serviceDocumentation: z.string().optional(),
  backchannelAuthenticationEndpoint: z.string().optional(),
  supportedBackchannelTokenDeliveryModes: z.array(
    AuthAuthorizationApiFormSupportedBackchannelTokenDeliveryMode$outboundSchema,
  ).optional(),
  backchannelAuthReqIdDuration: z.number().int().optional(),
  backchannelPollingInterval: z.number().int().optional(),
  backchannelUserCodeParameterSupported: z.boolean().optional(),
  backchannelBindingMessageRequiredInFapi: z.boolean().optional(),
  deviceAuthorizationEndpoint: z.string().optional(),
  deviceVerificationUri: z.string().optional(),
  deviceVerificationUriComplete: z.string().optional(),
  deviceFlowCodeDuration: z.number().int().optional(),
  deviceFlowPollingInterval: z.number().int().optional(),
  userCodeCharset: AuthAuthorizationApiFormUserCodeCharset$outboundSchema
    .optional(),
  userCodeLength: z.number().int().optional(),
  supportedTrustFrameworks: z.array(z.string()).optional(),
  supportedEvidence: z.array(z.string()).optional(),
  supportedIdentityDocuments: z.array(z.string()).optional(),
  supportedVerificationMethods: z.array(z.string()).optional(),
  supportedVerifiedClaims: z.array(z.string()).optional(),
  verifiedClaimsValidationSchemaSet:
    AuthAuthorizationApiFormVerifiedClaimsValidationSchemaSet$outboundSchema
      .optional(),
  attributes: z.array(
    z.lazy(() => AuthAuthorizationApiFormServiceAttribute$outboundSchema),
  ).optional(),
  nbfOptional: z.boolean().optional(),
  issSuppressed: z.boolean().optional(),
  supportedCustomClientMetadata: z.array(z.string()).optional(),
  tokenExpirationLinked: z.boolean().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  hsmEnabled: z.boolean().optional(),
  hsks: z.array(z.lazy(() => AuthAuthorizationApiFormHsk$outboundSchema))
    .optional(),
  grantManagementEndpoint: z.string().optional(),
  grantManagementActionRequired: z.boolean().optional(),
  unauthorizedOnClientConfigSupported: z.boolean().optional(),
  dcrScopeUsedAsRequestable: z.boolean().optional(),
  endSessionEndpoint: z.string().optional(),
  loopbackRedirectionUriVariable: z.boolean().optional(),
  requestObjectAudienceChecked: z.boolean().optional(),
  accessTokenForExternalAttachmentEmbedded: z.boolean().optional(),
  authorityHints: z.array(z.string()).optional(),
  federationEnabled: z.boolean().optional(),
  federationJwks: z.string().optional(),
  federationSignatureKeyId: z.string().optional(),
  federationConfigurationDuration: z.number().int().optional(),
  federationRegistrationEndpoint: z.string().optional(),
  organizationName: z.string().optional(),
  predefinedTransformedClaims: z.string().optional(),
  refreshTokenIdempotent: z.boolean().optional(),
  signedJwksUri: z.string().optional(),
  supportedAttachments: z.array(
    AuthAuthorizationApiFormSupportedAttachment$outboundSchema,
  ).optional(),
  supportedDigestAlgorithms: z.array(z.string()).optional(),
  supportedDocuments: z.array(z.string()).optional(),
  supportedDocumentsMethods: z.array(z.string()).optional(),
  supportedDocumentsValidationMethods: z.array(z.string()).optional(),
  supportedDocumentsVerificationMethods: z.array(z.string()).optional(),
  supportedElectronicRecords: z.array(z.string()).optional(),
  supportedClientRegistrationTypes: z.array(
    AuthAuthorizationApiFormSupportedClientRegistrationType$outboundSchema,
  ).optional(),
  tokenExchangeByIdentifiableClientsOnly: z.boolean().optional(),
  tokenExchangeByConfidentialClientsOnly: z.boolean().optional(),
  tokenExchangeByPermittedClientsOnly: z.boolean().optional(),
  tokenExchangeEncryptedJwtRejected: z.boolean().optional(),
  tokenExchangeUnsignedJwtRejected: z.boolean().optional(),
  jwtGrantByIdentifiableClientsOnly: z.boolean().optional(),
  jwtGrantEncryptedJwtRejected: z.boolean().optional(),
  jwtGrantUnsignedJwtRejected: z.boolean().optional(),
  dcrDuplicateSoftwareIdBlocked: z.boolean().optional(),
  trustAnchors: z.array(
    z.lazy(() => AuthAuthorizationApiFormTrustAnchor$outboundSchema),
  ).optional(),
  openidDroppedOnRefreshWithoutOfflineAccess: z.boolean().optional(),
  supportedDocumentsCheckMethods: z.array(z.string()).optional(),
  rsResponseSigned: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonceRequired: z.boolean().optional(),
  verifiableCredentialsEnabled: z.boolean().optional(),
  credentialJwksUri: z.string().optional(),
  credentialOfferDuration: z.number().int().optional(),
  dpopNonceDuration: z.number().int().optional(),
  preAuthorizedGrantAnonymousAccessSupported: z.boolean().optional(),
  credentialTransactionDuration: z.number().int().optional(),
  introspectionSignatureKeyId: z.string().optional(),
  resourceSignatureKeyId: z.string().optional(),
  userPinLength: z.number().int().optional(),
  supportedPromptValues: z.array(
    AuthAuthorizationApiFormSupportedPromptValue$outboundSchema,
  ).optional(),
  idTokenReissuable: z.boolean().optional(),
  credentialJwks: z.string().optional(),
  fapiModes: z.array(AuthAuthorizationApiFormFapiMode$outboundSchema)
    .optional(),
  credentialDuration: z.number().int().optional(),
  credentialIssuerMetadata: z.lazy(() =>
    AuthAuthorizationApiFormCredentialIssuerMetadata$outboundSchema
  ).optional(),
  idTokenAudType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormService$ {
  /** @deprecated use `AuthAuthorizationApiFormService$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormService$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormService$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormService$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormService$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormService$Outbound;
}

export function authAuthorizationApiFormServiceToJSON(
  authAuthorizationApiFormService: AuthAuthorizationApiFormService,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormService$outboundSchema.parse(
      authAuthorizationApiFormService,
    ),
  );
}

export function authAuthorizationApiFormServiceFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormService' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormScopeDescription$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormScopeDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormScopeDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormScopeDescription$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormScopeDescription$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormScopeDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormScopeDescription$ {
  /** @deprecated use `AuthAuthorizationApiFormScopeDescription$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormScopeDescription$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormScopeDescription$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormScopeDescription$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormScopeDescription$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormScopeDescription$Outbound;
}

export function authAuthorizationApiFormScopeDescriptionToJSON(
  authAuthorizationApiFormScopeDescription:
    AuthAuthorizationApiFormScopeDescription,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormScopeDescription$outboundSchema.parse(
      authAuthorizationApiFormScopeDescription,
    ),
  );
}

export function authAuthorizationApiFormScopeDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormScopeDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormScopeDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormScopeDescription' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormScopeAttribute$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormScopeAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormScopeAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormScopeAttribute$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormScopeAttribute$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormScopeAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormScopeAttribute$ {
  /** @deprecated use `AuthAuthorizationApiFormScopeAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormScopeAttribute$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormScopeAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormScopeAttribute$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormScopeAttribute$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormScopeAttribute$Outbound;
}

export function authAuthorizationApiFormScopeAttributeToJSON(
  authAuthorizationApiFormScopeAttribute:
    AuthAuthorizationApiFormScopeAttribute,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormScopeAttribute$outboundSchema.parse(
      authAuthorizationApiFormScopeAttribute,
    ),
  );
}

export function authAuthorizationApiFormScopeAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormScopeAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormScopeAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormScopeAttribute' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormScope$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthAuthorizationApiFormScopeDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => AuthAuthorizationApiFormScopeAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type AuthAuthorizationApiFormScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<AuthAuthorizationApiFormScopeDescription$Outbound>
    | undefined;
  attributes?:
    | Array<AuthAuthorizationApiFormScopeAttribute$Outbound>
    | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormScope$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormScope$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthAuthorizationApiFormScopeDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => AuthAuthorizationApiFormScopeAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormScope$ {
  /** @deprecated use `AuthAuthorizationApiFormScope$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormScope$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormScope$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormScope$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormScope$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormScope$Outbound;
}

export function authAuthorizationApiFormScopeToJSON(
  authAuthorizationApiFormScope: AuthAuthorizationApiFormScope,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormScope$outboundSchema.parse(
      authAuthorizationApiFormScope,
    ),
  );
}

export function authAuthorizationApiFormScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormScope' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormPrompt$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormPrompt
> = z.nativeEnum(AuthAuthorizationApiFormPrompt);

/** @internal */
export const AuthAuthorizationApiFormPrompt$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormPrompt
> = AuthAuthorizationApiFormPrompt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormPrompt$ {
  /** @deprecated use `AuthAuthorizationApiFormPrompt$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormPrompt$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormPrompt$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormPrompt$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormLowestPrompt$inboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormLowestPrompt> = z.nativeEnum(
    AuthAuthorizationApiFormLowestPrompt,
  );

/** @internal */
export const AuthAuthorizationApiFormLowestPrompt$outboundSchema:
  z.ZodNativeEnum<typeof AuthAuthorizationApiFormLowestPrompt> =
    AuthAuthorizationApiFormLowestPrompt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormLowestPrompt$ {
  /** @deprecated use `AuthAuthorizationApiFormLowestPrompt$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormLowestPrompt$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormLowestPrompt$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormLowestPrompt$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormElement$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormElement$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormElement$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormElement$ {
  /** @deprecated use `AuthAuthorizationApiFormElement$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormElement$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormElement$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormElement$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormElement$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormElement$Outbound;
}

export function authAuthorizationApiFormElementToJSON(
  authAuthorizationApiFormElement: AuthAuthorizationApiFormElement,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormElement$outboundSchema.parse(
      authAuthorizationApiFormElement,
    ),
  );
}

export function authAuthorizationApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormElement' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthAuthorizationApiFormElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthAuthorizationApiFormAuthorizationDetails$Outbound = {
  elements?: Array<AuthAuthorizationApiFormElement$Outbound> | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthAuthorizationApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormAuthorizationDetails$ {
  /** @deprecated use `AuthAuthorizationApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormAuthorizationDetails$Outbound;
}

export function authAuthorizationApiFormAuthorizationDetailsToJSON(
  authAuthorizationApiFormAuthorizationDetails:
    AuthAuthorizationApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormAuthorizationDetails$outboundSchema.parse(
      authAuthorizationApiFormAuthorizationDetails,
    ),
  );
}

export function authAuthorizationApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormDynamicScope$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormDynamicScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormDynamicScope$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormDynamicScope$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormDynamicScope
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormDynamicScope$ {
  /** @deprecated use `AuthAuthorizationApiFormDynamicScope$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormDynamicScope$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormDynamicScope$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormDynamicScope$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormDynamicScope$Outbound;
}

export function authAuthorizationApiFormDynamicScopeToJSON(
  authAuthorizationApiFormDynamicScope: AuthAuthorizationApiFormDynamicScope,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormDynamicScope$outboundSchema.parse(
      authAuthorizationApiFormDynamicScope,
    ),
  );
}

export function authAuthorizationApiFormDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormDynamicScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormDynamicScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormDynamicScope' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormGmAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormGmAction
> = z.nativeEnum(AuthAuthorizationApiFormGmAction);

/** @internal */
export const AuthAuthorizationApiFormGmAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthAuthorizationApiFormGmAction
> = AuthAuthorizationApiFormGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormGmAction$ {
  /** @deprecated use `AuthAuthorizationApiFormGmAction$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormGmAction$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGmAction$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormGmAction$outboundSchema;
}

/** @internal */
export const AuthAuthorizationApiFormGrantScope$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormGrantScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type AuthAuthorizationApiFormGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormGrantScope$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormGrantScope$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormGrantScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormGrantScope$ {
  /** @deprecated use `AuthAuthorizationApiFormGrantScope$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormGrantScope$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrantScope$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormGrantScope$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrantScope$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormGrantScope$Outbound;
}

export function authAuthorizationApiFormGrantScopeToJSON(
  authAuthorizationApiFormGrantScope: AuthAuthorizationApiFormGrantScope,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormGrantScope$outboundSchema.parse(
      authAuthorizationApiFormGrantScope,
    ),
  );
}

export function authAuthorizationApiFormGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormGrantScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormGrantScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormGrantScope' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormGrantElement$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormGrantElement$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormGrantElement$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormGrantElement$ {
  /** @deprecated use `AuthAuthorizationApiFormGrantElement$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormGrantElement$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormGrantElement$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrantElement$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormGrantElement$Outbound;
}

export function authAuthorizationApiFormGrantElementToJSON(
  authAuthorizationApiFormGrantElement: AuthAuthorizationApiFormGrantElement,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormGrantElement$outboundSchema.parse(
      authAuthorizationApiFormGrantElement,
    ),
  );
}

export function authAuthorizationApiFormGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormGrantElement' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthAuthorizationApiFormGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthAuthorizationApiFormGrantAuthorizationDetails$Outbound = {
  elements?: Array<AuthAuthorizationApiFormGrantElement$Outbound> | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthAuthorizationApiFormGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormGrantAuthorizationDetails$ {
  /** @deprecated use `AuthAuthorizationApiFormGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    AuthAuthorizationApiFormGrantAuthorizationDetails$Outbound;
}

export function authAuthorizationApiFormGrantAuthorizationDetailsToJSON(
  authAuthorizationApiFormGrantAuthorizationDetails:
    AuthAuthorizationApiFormGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormGrantAuthorizationDetails$outboundSchema.parse(
      authAuthorizationApiFormGrantAuthorizationDetails,
    ),
  );
}

export function authAuthorizationApiFormGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormGrant$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(
    z.lazy(() => AuthAuthorizationApiFormGrantScope$inboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthAuthorizationApiFormGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type AuthAuthorizationApiFormGrant$Outbound = {
  scopes?: Array<AuthAuthorizationApiFormGrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | AuthAuthorizationApiFormGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormGrant$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormGrant$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormGrant
> = z.object({
  scopes: z.array(
    z.lazy(() => AuthAuthorizationApiFormGrantScope$outboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthAuthorizationApiFormGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormGrant$ {
  /** @deprecated use `AuthAuthorizationApiFormGrant$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormGrant$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrant$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormGrant$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormGrant$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormGrant$Outbound;
}

export function authAuthorizationApiFormGrantToJSON(
  authAuthorizationApiFormGrant: AuthAuthorizationApiFormGrant,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormGrant$outboundSchema.parse(
      authAuthorizationApiFormGrant,
    ),
  );
}

export function authAuthorizationApiFormGrantFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormGrant' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormProperty$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormProperty$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormProperty$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormProperty$ {
  /** @deprecated use `AuthAuthorizationApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormProperty$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormProperty$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormProperty$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormProperty$Outbound;
}

export function authAuthorizationApiFormPropertyToJSON(
  authAuthorizationApiFormProperty: AuthAuthorizationApiFormProperty,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormProperty$outboundSchema.parse(
      authAuthorizationApiFormProperty,
    ),
  );
}

export function authAuthorizationApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormProperty' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormCredentialOfferInfo$inboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormCredentialOfferInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    identifier: z.string().optional(),
    credentialOffer: z.string().optional(),
    credentialIssuer: z.string().optional(),
    credentials: z.string().optional(),
    authorizationCodeGrantIncluded: z.boolean().optional(),
    issuerStateIncluded: z.boolean().optional(),
    issuerState: z.string().optional(),
    preAuthorizedCodeGrantIncluded: z.boolean().optional(),
    preAuthorizedCode: z.string().optional(),
    userPinRequired: z.boolean().optional(),
    userPin: z.string().optional(),
    subject: z.string().optional(),
    expiresAt: z.number().int().optional(),
    context: z.string().optional(),
    properties: z.array(
      z.lazy(() => AuthAuthorizationApiFormProperty$inboundSchema),
    ).optional(),
    jwtAtClaims: z.string().optional(),
    authTime: z.number().int().optional(),
    acr: z.string().optional(),
  });

/** @internal */
export type AuthAuthorizationApiFormCredentialOfferInfo$Outbound = {
  identifier?: string | undefined;
  credentialOffer?: string | undefined;
  credentialIssuer?: string | undefined;
  credentials?: string | undefined;
  authorizationCodeGrantIncluded?: boolean | undefined;
  issuerStateIncluded?: boolean | undefined;
  issuerState?: string | undefined;
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  preAuthorizedCode?: string | undefined;
  userPinRequired?: boolean | undefined;
  userPin?: string | undefined;
  subject?: string | undefined;
  expiresAt?: number | undefined;
  context?: string | undefined;
  properties?: Array<AuthAuthorizationApiFormProperty$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormCredentialOfferInfo$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormCredentialOfferInfo$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormCredentialOfferInfo
  > = z.object({
    identifier: z.string().optional(),
    credentialOffer: z.string().optional(),
    credentialIssuer: z.string().optional(),
    credentials: z.string().optional(),
    authorizationCodeGrantIncluded: z.boolean().optional(),
    issuerStateIncluded: z.boolean().optional(),
    issuerState: z.string().optional(),
    preAuthorizedCodeGrantIncluded: z.boolean().optional(),
    preAuthorizedCode: z.string().optional(),
    userPinRequired: z.boolean().optional(),
    userPin: z.string().optional(),
    subject: z.string().optional(),
    expiresAt: z.number().int().optional(),
    context: z.string().optional(),
    properties: z.array(
      z.lazy(() => AuthAuthorizationApiFormProperty$outboundSchema),
    ).optional(),
    jwtAtClaims: z.string().optional(),
    authTime: z.number().int().optional(),
    acr: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormCredentialOfferInfo$ {
  /** @deprecated use `AuthAuthorizationApiFormCredentialOfferInfo$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormCredentialOfferInfo$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormCredentialOfferInfo$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormCredentialOfferInfo$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormCredentialOfferInfo$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormCredentialOfferInfo$Outbound;
}

export function authAuthorizationApiFormCredentialOfferInfoToJSON(
  authAuthorizationApiFormCredentialOfferInfo:
    AuthAuthorizationApiFormCredentialOfferInfo,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormCredentialOfferInfo$outboundSchema.parse(
      authAuthorizationApiFormCredentialOfferInfo,
    ),
  );
}

export function authAuthorizationApiFormCredentialOfferInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthAuthorizationApiFormCredentialOfferInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthAuthorizationApiFormCredentialOfferInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthAuthorizationApiFormCredentialOfferInfo' from JSON`,
  );
}

/** @internal */
export const AuthAuthorizationApiFormResponse$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationApiFormAction$inboundSchema.optional(),
  client: z.lazy(() => AuthAuthorizationApiFormClient$inboundSchema).optional(),
  display: AuthAuthorizationApiFormDisplay$inboundSchema.optional(),
  maxAge: z.number().int().optional(),
  service: z.lazy(() => AuthAuthorizationApiFormService$inboundSchema)
    .optional(),
  scopes: z.array(z.lazy(() => AuthAuthorizationApiFormScope$inboundSchema))
    .optional(),
  uiLocales: z.array(z.string()).optional(),
  claimsLocales: z.array(z.string()).optional(),
  claims: z.array(z.string()).optional(),
  acrEssential: z.boolean().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  acrs: z.array(z.string()).optional(),
  subject: z.string().optional(),
  loginHint: z.string().optional(),
  prompts: z.array(AuthAuthorizationApiFormPrompt$inboundSchema).optional(),
  lowestPrompt: AuthAuthorizationApiFormLowestPrompt$inboundSchema.optional(),
  requestObjectPayload: z.string().optional(),
  idTokenClaims: z.string().optional(),
  userInfoClaims: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthAuthorizationApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  purpose: z.string().optional(),
  responseContent: z.string().optional(),
  ticket: z.string().optional(),
  dynamicScopes: z.array(
    z.lazy(() => AuthAuthorizationApiFormDynamicScope$inboundSchema),
  ).optional(),
  gmAction: AuthAuthorizationApiFormGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthAuthorizationApiFormGrant$inboundSchema).optional(),
  grantSubject: z.string().optional(),
  requestedClaimsForTx: z.array(z.string()).optional(),
  requestedVerifiedClaimsForTx: z.array(z.array(z.string())).optional(),
  transformedClaims: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  claimsAtUserInfo: z.array(z.string()).optional(),
  credentialOfferInfo: z.lazy(() =>
    AuthAuthorizationApiFormCredentialOfferInfo$inboundSchema
  ).optional(),
  issuableCredentials: z.string().optional(),
});

/** @internal */
export type AuthAuthorizationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  client?: AuthAuthorizationApiFormClient$Outbound | undefined;
  display?: string | undefined;
  maxAge?: number | undefined;
  service?: AuthAuthorizationApiFormService$Outbound | undefined;
  scopes?: Array<AuthAuthorizationApiFormScope$Outbound> | undefined;
  uiLocales?: Array<string> | undefined;
  claimsLocales?: Array<string> | undefined;
  claims?: Array<string> | undefined;
  acrEssential?: boolean | undefined;
  clientIdAliasUsed?: boolean | undefined;
  acrs?: Array<string> | undefined;
  subject?: string | undefined;
  loginHint?: string | undefined;
  prompts?: Array<string> | undefined;
  lowestPrompt?: string | undefined;
  requestObjectPayload?: string | undefined;
  idTokenClaims?: string | undefined;
  userInfoClaims?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthAuthorizationApiFormAuthorizationDetails$Outbound
    | undefined;
  purpose?: string | undefined;
  responseContent?: string | undefined;
  ticket?: string | undefined;
  dynamicScopes?:
    | Array<AuthAuthorizationApiFormDynamicScope$Outbound>
    | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: AuthAuthorizationApiFormGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  requestedClaimsForTx?: Array<string> | undefined;
  requestedVerifiedClaimsForTx?: Array<Array<string>> | undefined;
  transformedClaims?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  claimsAtUserInfo?: Array<string> | undefined;
  credentialOfferInfo?:
    | AuthAuthorizationApiFormCredentialOfferInfo$Outbound
    | undefined;
  issuableCredentials?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormResponse$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthAuthorizationApiFormAction$outboundSchema.optional(),
  client: z.lazy(() => AuthAuthorizationApiFormClient$outboundSchema)
    .optional(),
  display: AuthAuthorizationApiFormDisplay$outboundSchema.optional(),
  maxAge: z.number().int().optional(),
  service: z.lazy(() => AuthAuthorizationApiFormService$outboundSchema)
    .optional(),
  scopes: z.array(z.lazy(() => AuthAuthorizationApiFormScope$outboundSchema))
    .optional(),
  uiLocales: z.array(z.string()).optional(),
  claimsLocales: z.array(z.string()).optional(),
  claims: z.array(z.string()).optional(),
  acrEssential: z.boolean().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  acrs: z.array(z.string()).optional(),
  subject: z.string().optional(),
  loginHint: z.string().optional(),
  prompts: z.array(AuthAuthorizationApiFormPrompt$outboundSchema).optional(),
  lowestPrompt: AuthAuthorizationApiFormLowestPrompt$outboundSchema.optional(),
  requestObjectPayload: z.string().optional(),
  idTokenClaims: z.string().optional(),
  userInfoClaims: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthAuthorizationApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  purpose: z.string().optional(),
  responseContent: z.string().optional(),
  ticket: z.string().optional(),
  dynamicScopes: z.array(
    z.lazy(() => AuthAuthorizationApiFormDynamicScope$outboundSchema),
  ).optional(),
  gmAction: AuthAuthorizationApiFormGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthAuthorizationApiFormGrant$outboundSchema).optional(),
  grantSubject: z.string().optional(),
  requestedClaimsForTx: z.array(z.string()).optional(),
  requestedVerifiedClaimsForTx: z.array(z.array(z.string())).optional(),
  transformedClaims: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  claimsAtUserInfo: z.array(z.string()).optional(),
  credentialOfferInfo: z.lazy(() =>
    AuthAuthorizationApiFormCredentialOfferInfo$outboundSchema
  ).optional(),
  issuableCredentials: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormResponse$ {
  /** @deprecated use `AuthAuthorizationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiFormResponse$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiFormResponse$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormResponse$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormResponse$Outbound;
}

export function authAuthorizationApiFormResponseToJSON(
  authAuthorizationApiFormResponse: AuthAuthorizationApiFormResponse,
): string {
  return JSON.stringify(
    AuthAuthorizationApiFormResponse$outboundSchema.parse(
      authAuthorizationApiFormResponse,
    ),
  );
}

export function authAuthorizationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiFormResponse' from JSON`,
  );
}
