/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenFailApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenFailApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthTokenFailApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenFailApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenFailApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenFailApiFormAction = ClosedEnum<
  typeof AuthTokenFailApiFormAction
>;

export type AuthTokenFailApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenFailApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter. See description for details.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthTokenFailApiFormRequestBody$inboundSchema: z.ZodType<
  AuthTokenFailApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthTokenFailApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiFormRequestBody$outboundSchema: z.ZodType<
  AuthTokenFailApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormRequestBody$ {
  /** @deprecated use `AuthTokenFailApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormRequestBody$Outbound;
}

export function authTokenFailApiFormRequestBodyToJSON(
  authTokenFailApiFormRequestBody: AuthTokenFailApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthTokenFailApiFormRequestBody$outboundSchema.parse(
      authTokenFailApiFormRequestBody,
    ),
  );
}

export function authTokenFailApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenFailApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenFailApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenFailApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenFailApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenFailApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenFailApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenFailApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenFailApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthTokenFailApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenFailApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenFailApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormRequest$ {
  /** @deprecated use `AuthTokenFailApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormRequest$Outbound;
}

export function authTokenFailApiFormRequestToJSON(
  authTokenFailApiFormRequest: AuthTokenFailApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenFailApiFormRequest$outboundSchema.parse(
      authTokenFailApiFormRequest,
    ),
  );
}

export function authTokenFailApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenFailApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenFailApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenFailApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenFailApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenFailApiFormAction
> = z.nativeEnum(AuthTokenFailApiFormAction);

/** @internal */
export const AuthTokenFailApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenFailApiFormAction
> = AuthTokenFailApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormAction$ {
  /** @deprecated use `AuthTokenFailApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenFailApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenFailApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenFailApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthTokenFailApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthTokenFailApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenFailApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenFailApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormResponse$ {
  /** @deprecated use `AuthTokenFailApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormResponse$Outbound;
}

export function authTokenFailApiFormResponseToJSON(
  authTokenFailApiFormResponse: AuthTokenFailApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenFailApiFormResponse$outboundSchema.parse(
      authTokenFailApiFormResponse,
    ),
  );
}

export function authTokenFailApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenFailApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenFailApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenFailApiFormResponse' from JSON`,
  );
}
