/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const HskGetApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type HskGetApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  handle: string;
};

/**
 * Result of the API call
 */
export const HskGetApiAction = {
  Success: "SUCCESS",
  InvalidRequest: "INVALID_REQUEST",
  NotFound: "NOT_FOUND",
  ServerError: "SERVER_ERROR",
} as const;
/**
 * Result of the API call
 */
export type HskGetApiAction = ClosedEnum<typeof HskGetApiAction>;

/**
 * Holds information about a key managed in an HSM (Hardware Security Module)
 *
 * @remarks
 */
export type HskGetApiHsk = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * Get the use of the key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

export type HskGetApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * Result of the API call
   */
  action?: HskGetApiAction | undefined;
  /**
   * Holds information about a key managed in an HSM (Hardware Security Module)
   *
   * @remarks
   */
  hsk?: HskGetApiHsk | undefined;
};

/** @internal */
export const HskGetApiRequest$inboundSchema: z.ZodType<
  HskGetApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  handle: z.string(),
});

/** @internal */
export type HskGetApiRequest$Outbound = {
  serviceId: string;
  handle: string;
};

/** @internal */
export const HskGetApiRequest$outboundSchema: z.ZodType<
  HskGetApiRequest$Outbound,
  z.ZodTypeDef,
  HskGetApiRequest
> = z.object({
  serviceId: z.string(),
  handle: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiRequest$ {
  /** @deprecated use `HskGetApiRequest$inboundSchema` instead. */
  export const inboundSchema = HskGetApiRequest$inboundSchema;
  /** @deprecated use `HskGetApiRequest$outboundSchema` instead. */
  export const outboundSchema = HskGetApiRequest$outboundSchema;
  /** @deprecated use `HskGetApiRequest$Outbound` instead. */
  export type Outbound = HskGetApiRequest$Outbound;
}

export function hskGetApiRequestToJSON(
  hskGetApiRequest: HskGetApiRequest,
): string {
  return JSON.stringify(
    HskGetApiRequest$outboundSchema.parse(hskGetApiRequest),
  );
}

export function hskGetApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<HskGetApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetApiRequest' from JSON`,
  );
}

/** @internal */
export const HskGetApiAction$inboundSchema: z.ZodNativeEnum<
  typeof HskGetApiAction
> = z.nativeEnum(HskGetApiAction);

/** @internal */
export const HskGetApiAction$outboundSchema: z.ZodNativeEnum<
  typeof HskGetApiAction
> = HskGetApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiAction$ {
  /** @deprecated use `HskGetApiAction$inboundSchema` instead. */
  export const inboundSchema = HskGetApiAction$inboundSchema;
  /** @deprecated use `HskGetApiAction$outboundSchema` instead. */
  export const outboundSchema = HskGetApiAction$outboundSchema;
}

/** @internal */
export const HskGetApiHsk$inboundSchema: z.ZodType<
  HskGetApiHsk,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type HskGetApiHsk$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const HskGetApiHsk$outboundSchema: z.ZodType<
  HskGetApiHsk$Outbound,
  z.ZodTypeDef,
  HskGetApiHsk
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiHsk$ {
  /** @deprecated use `HskGetApiHsk$inboundSchema` instead. */
  export const inboundSchema = HskGetApiHsk$inboundSchema;
  /** @deprecated use `HskGetApiHsk$outboundSchema` instead. */
  export const outboundSchema = HskGetApiHsk$outboundSchema;
  /** @deprecated use `HskGetApiHsk$Outbound` instead. */
  export type Outbound = HskGetApiHsk$Outbound;
}

export function hskGetApiHskToJSON(hskGetApiHsk: HskGetApiHsk): string {
  return JSON.stringify(HskGetApiHsk$outboundSchema.parse(hskGetApiHsk));
}

export function hskGetApiHskFromJSON(
  jsonString: string,
): SafeParseResult<HskGetApiHsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetApiHsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetApiHsk' from JSON`,
  );
}

/** @internal */
export const HskGetApiResponse$inboundSchema: z.ZodType<
  HskGetApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskGetApiAction$inboundSchema.optional(),
  hsk: z.lazy(() => HskGetApiHsk$inboundSchema).optional(),
});

/** @internal */
export type HskGetApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  hsk?: HskGetApiHsk$Outbound | undefined;
};

/** @internal */
export const HskGetApiResponse$outboundSchema: z.ZodType<
  HskGetApiResponse$Outbound,
  z.ZodTypeDef,
  HskGetApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskGetApiAction$outboundSchema.optional(),
  hsk: z.lazy(() => HskGetApiHsk$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiResponse$ {
  /** @deprecated use `HskGetApiResponse$inboundSchema` instead. */
  export const inboundSchema = HskGetApiResponse$inboundSchema;
  /** @deprecated use `HskGetApiResponse$outboundSchema` instead. */
  export const outboundSchema = HskGetApiResponse$outboundSchema;
  /** @deprecated use `HskGetApiResponse$Outbound` instead. */
  export type Outbound = HskGetApiResponse$Outbound;
}

export function hskGetApiResponseToJSON(
  hskGetApiResponse: HskGetApiResponse,
): string {
  return JSON.stringify(
    HskGetApiResponse$outboundSchema.parse(hskGetApiResponse),
  );
}

export function hskGetApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<HskGetApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetApiResponse' from JSON`,
  );
}
