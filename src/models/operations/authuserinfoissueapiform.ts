/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthUserinfoIssueApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthUserinfoIssueApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthUserinfoIssueApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthUserinfoIssueApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthUserinfoIssueApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthUserinfoIssueApiFormAction = ClosedEnum<
  typeof AuthUserinfoIssueApiFormAction
>;

export type AuthUserinfoIssueApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthUserinfoIssueApiFormAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  /**
   * The signature header of the response message.
   *
   * @remarks
   */
  signature?: string | undefined;
  /**
   * The signature-input header of the response message
   *
   * @remarks
   */
  signatureInput?: string | undefined;
  /**
   * The content-digest header of the response message
   *
   * @remarks
   */
  contentDigest?: string | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiFormRequestBody$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthUserinfoIssueApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiFormRequestBody$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormRequestBody$ {
  /** @deprecated use `AuthUserinfoIssueApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormRequestBody$Outbound;
}

export function authUserinfoIssueApiFormRequestBodyToJSON(
  authUserinfoIssueApiFormRequestBody: AuthUserinfoIssueApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiFormRequestBody$outboundSchema.parse(
      authUserinfoIssueApiFormRequestBody,
    ),
  );
}

export function authUserinfoIssueApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthUserinfoIssueApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthUserinfoIssueApiFormRequest$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthUserinfoIssueApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthUserinfoIssueApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthUserinfoIssueApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthUserinfoIssueApiFormRequest$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthUserinfoIssueApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormRequest$ {
  /** @deprecated use `AuthUserinfoIssueApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiFormRequest$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiFormRequest$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormRequest$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormRequest$Outbound;
}

export function authUserinfoIssueApiFormRequestToJSON(
  authUserinfoIssueApiFormRequest: AuthUserinfoIssueApiFormRequest,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiFormRequest$outboundSchema.parse(
      authUserinfoIssueApiFormRequest,
    ),
  );
}

export function authUserinfoIssueApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthUserinfoIssueApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthUserinfoIssueApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthUserinfoIssueApiFormAction
> = z.nativeEnum(AuthUserinfoIssueApiFormAction);

/** @internal */
export const AuthUserinfoIssueApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthUserinfoIssueApiFormAction
> = AuthUserinfoIssueApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormAction$ {
  /** @deprecated use `AuthUserinfoIssueApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiFormAction$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiFormAction$outboundSchema;
}

/** @internal */
export const AuthUserinfoIssueApiFormResponse$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthUserinfoIssueApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  signature: z.string().optional(),
  signatureInput: z.string().optional(),
  contentDigest: z.string().optional(),
});

/** @internal */
export type AuthUserinfoIssueApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  signature?: string | undefined;
  signatureInput?: string | undefined;
  contentDigest?: string | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiFormResponse$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthUserinfoIssueApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  signature: z.string().optional(),
  signatureInput: z.string().optional(),
  contentDigest: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormResponse$ {
  /** @deprecated use `AuthUserinfoIssueApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiFormResponse$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiFormResponse$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormResponse$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormResponse$Outbound;
}

export function authUserinfoIssueApiFormResponseToJSON(
  authUserinfoIssueApiFormResponse: AuthUserinfoIssueApiFormResponse,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiFormResponse$outboundSchema.parse(
      authUserinfoIssueApiFormResponse,
    ),
  );
}

export function authUserinfoIssueApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthUserinfoIssueApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiFormResponse' from JSON`,
  );
}
