/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenUpdateApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenUpdateApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthTokenUpdateApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenUpdateApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenUpdateApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenUpdateApiFormAction = ClosedEnum<
  typeof AuthTokenUpdateApiFormAction
>;

export type AuthTokenUpdateApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenUpdateApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthTokenUpdateApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthTokenUpdateApiFormElement> | undefined;
};

export type AuthTokenUpdateApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenUpdateApiFormAction | undefined;
  /**
   * The access token which has been specified by the request.
   */
  accessToken?: string | undefined;
  /**
   * The date at which the access token will expire.
   *
   * @remarks
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<AuthTokenUpdateApiFormProperty> | undefined;
  /**
   * The scopes associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthTokenUpdateApiFormAuthorizationDetails | undefined;
  /**
   * The token type associated with the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormRequestBody$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthTokenUpdateApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiFormRequestBody$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormRequestBody$ {
  /** @deprecated use `AuthTokenUpdateApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormRequestBody$Outbound;
}

export function authTokenUpdateApiFormRequestBodyToJSON(
  authTokenUpdateApiFormRequestBody: AuthTokenUpdateApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormRequestBody$outboundSchema.parse(
      authTokenUpdateApiFormRequestBody,
    ),
  );
}

export function authTokenUpdateApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenUpdateApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenUpdateApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenUpdateApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthTokenUpdateApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenUpdateApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormRequest$ {
  /** @deprecated use `AuthTokenUpdateApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormRequest$Outbound;
}

export function authTokenUpdateApiFormRequestToJSON(
  authTokenUpdateApiFormRequest: AuthTokenUpdateApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormRequest$outboundSchema.parse(
      authTokenUpdateApiFormRequest,
    ),
  );
}

export function authTokenUpdateApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenUpdateApiFormAction
> = z.nativeEnum(AuthTokenUpdateApiFormAction);

/** @internal */
export const AuthTokenUpdateApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenUpdateApiFormAction
> = AuthTokenUpdateApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormAction$ {
  /** @deprecated use `AuthTokenUpdateApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenUpdateApiFormProperty$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenUpdateApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormProperty$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormProperty$ {
  /** @deprecated use `AuthTokenUpdateApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormProperty$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormProperty$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormProperty$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormProperty$Outbound;
}

export function authTokenUpdateApiFormPropertyToJSON(
  authTokenUpdateApiFormProperty: AuthTokenUpdateApiFormProperty,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormProperty$outboundSchema.parse(
      authTokenUpdateApiFormProperty,
    ),
  );
}

export function authTokenUpdateApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormProperty' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiFormElement$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthTokenUpdateApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormElement$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormElement$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormElement$ {
  /** @deprecated use `AuthTokenUpdateApiFormElement$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormElement$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormElement$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormElement$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormElement$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormElement$Outbound;
}

export function authTokenUpdateApiFormElementToJSON(
  authTokenUpdateApiFormElement: AuthTokenUpdateApiFormElement,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormElement$outboundSchema.parse(
      authTokenUpdateApiFormElement,
    ),
  );
}

export function authTokenUpdateApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormElement' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<AuthTokenUpdateApiFormAuthorizationDetails, z.ZodTypeDef, unknown> =
    z.object({
      elements: z.array(
        z.lazy(() => AuthTokenUpdateApiFormElement$inboundSchema),
      ).optional(),
    });

/** @internal */
export type AuthTokenUpdateApiFormAuthorizationDetails$Outbound = {
  elements?: Array<AuthTokenUpdateApiFormElement$Outbound> | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthTokenUpdateApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthTokenUpdateApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthTokenUpdateApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormAuthorizationDetails$ {
  /** @deprecated use `AuthTokenUpdateApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormAuthorizationDetails$Outbound;
}

export function authTokenUpdateApiFormAuthorizationDetailsToJSON(
  authTokenUpdateApiFormAuthorizationDetails:
    AuthTokenUpdateApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormAuthorizationDetails$outboundSchema.parse(
      authTokenUpdateApiFormAuthorizationDetails,
    ),
  );
}

export function authTokenUpdateApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenUpdateApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenUpdateApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenUpdateApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthTokenUpdateApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenUpdateApiFormAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenUpdateApiFormProperty$inboundSchema),
  ).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenUpdateApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/** @internal */
export type AuthTokenUpdateApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  properties?: Array<AuthTokenUpdateApiFormProperty$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenUpdateApiFormAuthorizationDetails$Outbound
    | undefined;
  tokenType?: string | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenUpdateApiFormAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenUpdateApiFormProperty$outboundSchema),
  ).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenUpdateApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormResponse$ {
  /** @deprecated use `AuthTokenUpdateApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormResponse$Outbound;
}

export function authTokenUpdateApiFormResponseToJSON(
  authTokenUpdateApiFormResponse: AuthTokenUpdateApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiFormResponse$outboundSchema.parse(
      authTokenUpdateApiFormResponse,
    ),
  );
}

export function authTokenUpdateApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiFormResponse' from JSON`,
  );
}
