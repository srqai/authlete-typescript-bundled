/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ServiceGetListApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type ServiceGetListApiRequest = {
  /**
   * Start index (inclusive) of the result set. The default value is 0. Must not be a negative number.
   */
  start?: number | undefined;
  /**
   * End index (exclusive) of the result set. The default value is 5. Must not be a negative number.
   */
  end?: number | undefined;
};

export type ServiceGetListApiMetadatum = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const ServiceGetListApiSupportedGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type ServiceGetListApiSupportedGrantType = ClosedEnum<
  typeof ServiceGetListApiSupportedGrantType
>;

export const ServiceGetListApiSupportedResponseType = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type ServiceGetListApiSupportedResponseType = ClosedEnum<
  typeof ServiceGetListApiSupportedResponseType
>;

export const ServiceGetListApiSupportedServiceProfile = {
  Fapi: "FAPI",
  OpenBanking: "OPEN_BANKING",
} as const;
export type ServiceGetListApiSupportedServiceProfile = ClosedEnum<
  typeof ServiceGetListApiSupportedServiceProfile
>;

/**
 * The display mode which the client application requests by `display` request parameter.
 *
 * @remarks
 * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
 *
 * It is ensured that the value of `display` is one of the supported display modes which are specified
 * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
 * authorization request is not supported, an error is raised.
 *
 * Values for this property correspond to the values listed in
 * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
 */
export const ServiceGetListApiSupportedDisplay = {
  Page: "PAGE",
  Popup: "POPUP",
  Touch: "TOUCH",
  Wap: "WAP",
} as const;
/**
 * The display mode which the client application requests by `display` request parameter.
 *
 * @remarks
 * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
 *
 * It is ensured that the value of `display` is one of the supported display modes which are specified
 * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
 * authorization request is not supported, an error is raised.
 *
 * Values for this property correspond to the values listed in
 * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
 */
export type ServiceGetListApiSupportedDisplay = ClosedEnum<
  typeof ServiceGetListApiSupportedDisplay
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ServiceGetListApiSupportedTokenAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ServiceGetListApiSupportedTokenAuthMethod = ClosedEnum<
  typeof ServiceGetListApiSupportedTokenAuthMethod
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ServiceGetListApiSupportedRevocationAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ServiceGetListApiSupportedRevocationAuthMethod = ClosedEnum<
  typeof ServiceGetListApiSupportedRevocationAuthMethod
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ServiceGetListApiSupportedIntrospectionAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ServiceGetListApiSupportedIntrospectionAuthMethod = ClosedEnum<
  typeof ServiceGetListApiSupportedIntrospectionAuthMethod
>;

export type ServiceGetListApiMtlsEndpointAlias = {
  name?: string | undefined;
  uri?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ServiceGetListApiAccessTokenSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ServiceGetListApiAccessTokenSignAlg = ClosedEnum<
  typeof ServiceGetListApiAccessTokenSignAlg
>;

export type ServiceGetListApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ServiceGetListApiSupportedScopeAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ServiceGetListApiSupportedScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<ServiceGetListApiDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<ServiceGetListApiSupportedScopeAttribute> | undefined;
};

export const ServiceGetListApiSupportedClaimType = {
  Normal: "NORMAL",
  Aggregated: "AGGREGATED",
  Distributed: "DISTRIBUTED",
} as const;
export type ServiceGetListApiSupportedClaimType = ClosedEnum<
  typeof ServiceGetListApiSupportedClaimType
>;

export const ServiceGetListApiSupportedBackchannelTokenDeliveryMode = {
  Ping: "PING",
  Poll: "POLL",
  Push: "PUSH",
} as const;
export type ServiceGetListApiSupportedBackchannelTokenDeliveryMode = ClosedEnum<
  typeof ServiceGetListApiSupportedBackchannelTokenDeliveryMode
>;

/**
 * The character set for end-user verification codes (`user_code`) for Device Flow.
 *
 * @remarks
 */
export const ServiceGetListApiUserCodeCharset = {
  Base20: "BASE20",
  Numeric: "NUMERIC",
} as const;
/**
 * The character set for end-user verification codes (`user_code`) for Device Flow.
 *
 * @remarks
 */
export type ServiceGetListApiUserCodeCharset = ClosedEnum<
  typeof ServiceGetListApiUserCodeCharset
>;

/**
 * OIDC4IDA / verifiedClaimsValidationSchemaSet
 *
 * @remarks
 */
export const ServiceGetListApiVerifiedClaimsValidationSchemaSet = {
  Standard: "standard",
  StandardPlusIdDocument: "standard+id_document",
} as const;
/**
 * OIDC4IDA / verifiedClaimsValidationSchemaSet
 *
 * @remarks
 */
export type ServiceGetListApiVerifiedClaimsValidationSchemaSet = ClosedEnum<
  typeof ServiceGetListApiVerifiedClaimsValidationSchemaSet
>;

export type ServiceGetListApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * Holds information about a key managed in an HSM (Hardware Security Module)
 *
 * @remarks
 */
export type ServiceGetListApiHsk = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * Get the use of the key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
};

/**
 * Supported attachment types. This property corresponds to the `attachments_supported`
 *
 * @remarks
 *  server metadata which was added by the third implementer's draft of OpenID Connect
 *  for Identity Assurance 1.0.
 */
export const ServiceGetListApiSupportedAttachment = {
  Embedded: "EMBEDDED",
  External: "EXTERNAL",
} as const;
/**
 * Supported attachment types. This property corresponds to the `attachments_supported`
 *
 * @remarks
 *  server metadata which was added by the third implementer's draft of OpenID Connect
 *  for Identity Assurance 1.0.
 */
export type ServiceGetListApiSupportedAttachment = ClosedEnum<
  typeof ServiceGetListApiSupportedAttachment
>;

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const ServiceGetListApiSupportedClientRegistrationType = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type ServiceGetListApiSupportedClientRegistrationType = ClosedEnum<
  typeof ServiceGetListApiSupportedClientRegistrationType
>;

export type ServiceGetListApiTrustAnchor = {
  /**
   * the entity ID of the trust anchor
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * the JWK Set document containing public keys of the trust anchor
   *
   * @remarks
   */
  jwks?: string | undefined;
};

/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export const ServiceGetListApiSupportedPromptValue = {
  None: "NONE",
  Login: "LOGIN",
  Consent: "CONSENT",
  SelectAccount: "SELECT_ACCOUNT",
} as const;
/**
 * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
 *
 * @remarks
 *
 * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
 *
 * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
 */
export type ServiceGetListApiSupportedPromptValue = ClosedEnum<
  typeof ServiceGetListApiSupportedPromptValue
>;

export const ServiceGetListApiFapiMode = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type ServiceGetListApiFapiMode = ClosedEnum<
  typeof ServiceGetListApiFapiMode
>;

export type ServiceGetListApiCredentialIssuerMetadata = {
  /**
   * The identifier of a credential request.
   */
  credentialIssuer?: string | undefined;
  /**
   * The identifier of the authorization server that the credential issuer
   *
   * @remarks
   * relies on for authorization.
   */
  authorizationServer?: string | undefined;
  /**
   * The URL of the credential endpoint of the credential issuer.
   */
  credentialEndpoint?: boolean | undefined;
  /**
   * The URL of the batch credential endpoint of the credential issuer.
   */
  batchCredentialEndpoint?: number | undefined;
  /**
   * The URL of the deferred credential endpoint of the credential issuer.
   */
  deferredCredentialEndpoint?: string | undefined;
  /**
   * A JSON array describing supported credentials.
   */
  credentialsSupported?: boolean | undefined;
};

export type ServiceGetListApiService = {
  /**
   * The sequential number of the service. The value of this property is assigned by Authlete.
   */
  number?: number | undefined;
  /**
   * The name of this service.
   */
  serviceName?: string | undefined;
  /**
   * The issuer identifier of the service.
   *
   * @remarks
   *
   * A URL that starts with  https:// and has no query or fragment component.
   *
   * The value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)
   * and `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  issuer?: string | undefined;
  /**
   * The description about the service.
   */
  description?: string | undefined;
  /**
   * The service ID used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  apiKey?: number | undefined;
  /**
   * Deprecated. Always `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The `metadata` of the service. The content of the returned array depends on contexts.
   *
   * @remarks
   * The predefined service metadata is listed in the following table.
   *
   *   | Key | Description |
   *   | --- | --- |
   *   | `clientCount` | The number of client applications which belong to this service.  |
   */
  metadata?: Array<ServiceGetListApiMetadatum> | undefined;
  /**
   * The time at which this service was created. The value is represented as milliseconds since the
   *
   * @remarks
   * UNIX epoch (`1970-01-01`).
   */
  createdAt?: number | undefined;
  /**
   * The time at which this service was last modified. The value is represented as milliseconds since
   *
   * @remarks
   * the UNIX epoch (1970-01-01).
   */
  modifiedAt?: number | undefined;
  /**
   * A Web API endpoint for user authentication which is to be prepared on the service side.
   *
   * @remarks
   *
   * The endpoint must be implemented if you do not implement the UI at the authorization endpoint
   * but use the one provided by Authlete.
   *
   * The user authentication at the authorization endpoint provided by Authlete is performed by making
   * a `POST` request to this endpoint.
   */
  authenticationCallbackEndpoint?: string | undefined;
  /**
   * API key for basic authentication at the authentication callback endpoint.
   *
   * @remarks
   *
   * If the value is not empty, Authlete generates Authorization header for Basic authentication when
   * making a request to the authentication callback endpoint.
   */
  authenticationCallbackApiKey?: string | undefined;
  /**
   * API secret for `basic` authentication at the authentication callback endpoint.
   */
  authenticationCallbackApiSecret?: string | undefined;
  /**
   * Values of acrs (authentication context class references) that the service supports.
   *
   * @remarks
   *
   * The value of this property is used as `acr_values_supported`
   * property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedAcrs?: Array<string> | undefined;
  /**
   * Values of `grant_type` request parameter that the service supports.
   *
   * @remarks
   *
   * The value of this property is used as `grant_types_supported property` in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedGrantTypes?: Array<ServiceGetListApiSupportedGrantType> | undefined;
  /**
   * Values of `response_type` request parameter that
   *
   * @remarks
   * the service supports. Valid values are listed in Response Type.
   *
   * The value of this property is used as `response_types_supported` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedResponseTypes?:
    | Array<ServiceGetListApiSupportedResponseType>
    | undefined;
  /**
   * The supported data types that can be used as values of the type field in `authorization_details`.
   *
   * @remarks
   *
   * This property corresponds to the `authorization_details_types_supported` metadata. See "OAuth 2.0
   * Rich Authorization Requests" (RAR) for details.
   */
  supportedAuthorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The profiles that this service supports.
   *
   * @remarks
   */
  supportedServiceProfiles?:
    | Array<ServiceGetListApiSupportedServiceProfile>
    | undefined;
  /**
   * The flag to indicate whether the `error_description` response parameter is omitted.
   *
   * @remarks
   *
   * According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include
   * the `error_description` response parameter in error responses.
   *
   * If `true`, Authlete does not embed the `error_description` response parameter in error responses.
   */
  errorDescriptionOmitted?: boolean | undefined;
  /**
   * The flag to indicate whether the `error_uri` response parameter is omitted.
   *
   * @remarks
   *
   * According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.
   *
   * If `true`, Authlete does not embed the
   * `error_uri` response parameter in error responses.
   */
  errorUriOmitted?: boolean | undefined;
  /**
   * The authorization endpoint of the service.
   *
   * @remarks
   *
   * A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.
   *
   * The value of this property is used as `authorization_endpoint` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  authorizationEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct authorization endpoint is enabled or not.
   *
   * @remarks
   *
   * The path of the endpoint is `/api/auth/authorization/direct/service-api-key`.
   */
  directAuthorizationEndpointEnabled?: boolean | undefined;
  /**
   * UI locales that the service supports.
   *
   * @remarks
   *
   * Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.
   *
   * The value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedUiLocales?: Array<string> | undefined;
  /**
   * Values of `display` request parameter that service supports.
   *
   * @remarks
   *
   * The value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedDisplays?: Array<ServiceGetListApiSupportedDisplay> | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * The duration of authorization response JWTs in seconds.
   *
   * @remarks
   *
   * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
   * `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
   * from the authorization endpoint will be packed into a JWT. This property is used to compute the
   * value of the `exp` claim of the JWT.
   */
  authorizationResponseDuration?: number | undefined;
  /**
   * The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.
   *
   * @remarks
   *
   * A URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.
   *
   * The value of this property is used as `token_endpoint` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  tokenEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint
   *
   * @remarks
   * is `/api/auth/token/direct/service-api-key`.
   */
  directTokenEndpointEnabled?: boolean | undefined;
  /**
   * Client authentication methods supported by the token endpoint of the service.
   *
   * @remarks
   *
   * The value of this property is used as `token_endpoint_auth_methods_supports` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedTokenAuthMethods?:
    | Array<ServiceGetListApiSupportedTokenAuthMethod>
    | undefined;
  /**
   * The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.
   *
   * @remarks
   *
   * This flag should not be set unless you have special reasons.
   */
  missingClientIdAllowed?: boolean | undefined;
  /**
   * The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.
   *
   * @remarks
   *
   * A URL that starts with `https://`. For example, `https://example.com/auth/revocation`.
   */
  revocationEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`.
   */
  directRevocationEndpointEnabled?: boolean | undefined;
  /**
   * Client authentication methods supported at the revocation endpoint.
   *
   * @remarks
   */
  supportedRevocationAuthMethods?:
    | Array<ServiceGetListApiSupportedRevocationAuthMethod>
    | undefined;
  /**
   * The URI of the introspection endpoint.
   */
  introspectionEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`.
   */
  directIntrospectionEndpointEnabled?: boolean | undefined;
  /**
   * Client authentication methods supported at the introspection endpoint.
   *
   * @remarks
   */
  supportedIntrospectionAuthMethods?:
    | Array<ServiceGetListApiSupportedIntrospectionAuthMethod>
    | undefined;
  /**
   * The URI of the pushed authorization request endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `pushed_authorization_request_endpoint` metadata defined in "[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)" of OAuth 2.0 Pushed Authorization Requests.
   */
  pushedAuthReqEndpoint?: string | undefined;
  /**
   * The duration of pushed authorization requests in seconds.
   *
   * @remarks
   *
   * [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)
   * defines an endpoint (called "pushed authorization request endpoint") which client applications
   * can register authorization requests into and get corresponding URIs (called "request URIs") from.
   * The issued URIs represent the registered authorization requests. The client applications can use
   * the URIs as the value of the `request_uri` request parameter in an authorization request.
   *
   * The property represents the duration of registered authorization requests and is used as the value
   * of the `expires_in` parameter in responses from the pushed authorization request endpoint.
   */
  pushedAuthReqDuration?: number | undefined;
  /**
   * The flag to indicate whether this service requires that clients use the pushed authorization
   *
   * @remarks
   * request endpoint.
   *
   * This property corresponds to the `require_pushed_authorization_requests` server metadata defined
   * in [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether this service requires that authorization requests always utilize
   *
   * @remarks
   * a request object by using either request or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is
   * `false`, the value of `require_signed_request_object` server metadata of this service is reported
   * as `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).
   * That `require_signed_request_object` is `true` means that authorization requests which don't
   * conform to the JAR specification are rejected.
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The flag to indicate whether a request object is processed based on rules defined in
   *
   * @remarks
   * [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT
   * Secured Authorization Request).
   *
   * Differences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.
   *   - JAR requires that a request object be always -signed.
   *   - JAR does not allow request parameters outside a request object to be referred to.
   *   - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.
   *   - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an
   *   - OIDC request even if the request object includes the request parameter.
   *
   * If this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of
   * `require_signed_request_object` server metadata of this service
   * is reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured
   * Authorization Request). That `require_signed_request_object` is `true` means that authorization
   * requests which don't conform to the JAR specification are rejected.
   */
  traditionalRequestObjectProcessingApplied?: boolean | undefined;
  /**
   * The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.
   *
   * @remarks
   */
  mutualTlsValidatePkiCertChain?: boolean | undefined;
  /**
   * The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.
   *
   * @remarks
   */
  trustedRootCertificates?: Array<string> | undefined;
  /**
   * The MTLS endpoint aliases.
   *
   * @remarks
   *
   * This property corresponds to the mtls_endpoint_aliases metadata defined in "5. Metadata for Mutual TLS Endpoint Aliases" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).
   *
   * The aliases will be embedded in the response from the discovery endpoint like the following.
   *
   * ```json
   * {
   *   ......,
   *   "mtls_endpoint_aliases": {
   *     "token_endpoint":         "https://mtls.example.com/token",
   *     "revocation_endpoint":    "https://mtls.example.com/revo",
   *     "introspection_endpoint": "https://mtls.example.com/introspect"
   *   }
   * }
   * ```
   */
  mtlsEndpointAliases?: Array<ServiceGetListApiMtlsEndpointAlias> | undefined;
  /**
   * The access token type.
   *
   * @remarks
   *
   * This value is used as the value of `token_type` property in access token responses. If this service
   * complies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should
   * be `Bearer`.
   *
   * See [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.
   */
  accessTokenType?: string | undefined;
  /**
   * The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The duration of access tokens in seconds. This value is used as the value of `expires_in` property
   *
   * @remarks
   * in access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).
   */
  accessTokenDuration?: number | undefined;
  /**
   * The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.
   *
   * @remarks
   *
   * If `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.
   *
   * Note that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  accessTokenSignAlg?: ServiceGetListApiAccessTokenSignAlg | undefined;
  /**
   * The key ID to identify a JWK used for signing access tokens.
   *
   * @remarks
   *
   * A JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.
   * Authlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based
   * access token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions
   * for access token signature. If the number of JWK candidates which satisfy the conditions is 1,
   * there is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed
   * to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.
   */
  accessTokenSignatureKeyId?: string | undefined;
  /**
   * The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The flag to indicate whether the remaining duration of the used refresh token is taken over to
   *
   * @remarks
   * the newly issued refresh token.
   */
  refreshTokenDurationKept?: boolean | undefined;
  /**
   * The flag which indicates whether duration of refresh tokens are reset when they are used even
   *
   * @remarks
   * if the `refreshTokenKept` property of this service set to is `true` (= even if "Refresh Token
   * Continuous Use" is "Kept").
   *
   * This flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,
   * if this service issues a new refresh token on every refresh token request, the refresh token
   * will have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this
   * `refreshTokenDurationReset` property is not referenced.
   */
  refreshTokenDurationReset?: boolean | undefined;
  /**
   * The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.
   *
   * @remarks
   *
   * If `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.
   *
   * See [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.
   */
  refreshTokenKept?: boolean | undefined;
  /**
   * Scopes supported by the service.
   *
   * @remarks
   *
   * Authlete strongly recommends that the service register at least the following scopes.
   *
   * | Name | Description |
   * | --- | --- |
   * | openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |
   * | profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
   * | email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
   * | address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |
   * | phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
   * | offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |
   *
   * The value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedScopes?: Array<ServiceGetListApiSupportedScope> | undefined;
  /**
   * The flag to indicate whether requests that request no scope are rejected or not.
   *
   * @remarks
   *
   * When a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,
   * the authorization server regards the request requests no scope. When this flag is set to `true`,
   * requests that request no scope are rejected.
   *
   * The requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)
   * does not explicitly mention the case where the default scope set is empty.
   *
   * > If the client omits the scope parameter when requesting authorization, the authorization server
   * MUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.
   *
   * However, if you interpret *"the default scope set exists but is empty"* as *"the default scope set does not exist"*
   * and want to strictly conform to the requirement above, this flag has to be `true`.
   */
  scopeRequired?: boolean | undefined;
  /**
   * 'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s
   *
   * @remarks
   * in seconds. This value is used to calculate the value of `exp` claim in an ID token.'
   */
  idTokenDuration?: number | undefined;
  /**
   * The allowable clock skew between the server and clients in seconds.
   *
   * @remarks
   *
   * The clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.
   */
  allowableClockSkew?: number | undefined;
  /**
   * Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete
   *
   * @remarks
   * currently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.
   *
   * The value of this property is used as `claim_types_supported` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedClaimTypes?: Array<ServiceGetListApiSupportedClaimType> | undefined;
  /**
   * Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).
   *
   * @remarks
   * For example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)
   * for details.
   *
   * The value of this property is used as `claims_locales_supported` property in the
   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  supportedClaimLocales?: Array<string> | undefined;
  /**
   * Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,
   *
   * @remarks
   * 5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should
   * be supported. The following is the list of standard claims.
   *
   * - `sub`
   * - `name`
   * - `given_name`
   * - `family_name`
   * - `middle_name`
   * - `nickname`
   * - `preferred_username`
   * - `profile`
   * - `picture`
   * - `website`
   * - `email`
   * - `email_verified`
   * - `gender`
   * - `birthdate`
   * - `zoneinfo`
   * - `locale`
   * - `phone_number`
   * - `phone_number_verified`
   * - `address`
   * - `updated_at`
   *
   * The value of this property is used as `claims_supported` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   *
   * The service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional
   * Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).
   */
  supportedClaims?: Array<string> | undefined;
  /**
   * The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included
   *
   * @remarks
   * in the issued ID token only when no access token is issued.
   *
   * To strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section
   * 5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.
   *
   * > The Claims requested by the profile, email, address, and phone scope values are returned from
   * the UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that
   * results in an Access Token being issued. However, when no Access Token is issued (which is the
   * case for the response_type value id_token), the resulting Claims are returned in the ID Token.
   */
  claimShortcutRestrictive?: boolean | undefined;
  /**
   * The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For
   *
   * @remarks
   * example, `http://example.com/auth/jwks`.
   *
   * Client applications accesses this URL (1) to get the public key of the service to validate the
   * signature of an ID token issued by the service and (2) to get the public key of the service to
   * encrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures
   * and Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
   *
   * The value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * 'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint
   *
   * @remarks
   * is `/api/service/jwks/get/direct/service-api-key`. '
   */
  directJwksEndpointEnabled?: boolean | undefined;
  /**
   * The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.
   *
   * @remarks
   *
   * If this property is not `null` in a `/service/create` request or a `/service/update` request,
   * Authlete hosts the content in the database. This property must not be `null` and must contain
   * pairs of public/private keys if the service wants to support asymmetric signatures for ID tokens
   * and asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and
   * Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
   */
  jwks?: string | undefined;
  /**
   * The key ID to identify a JWK used for ID token signature using an asymmetric key.
   *
   * @remarks
   *
   * A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
   * (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
   * to pick up one JWK for signature from the JWK Set when it generates an ID token and signature
   * using an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK
   * which satisfies conditions for ID token signature. If the number of JWK candidates which satisfy
   * the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,
   * a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that
   * Authlete Server can pick up one JWK from among the JWK candidates.
   *
   * This `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation
   * (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
   * this mechanism is needed.
   */
  idTokenSignatureKeyId?: string | undefined;
  /**
   * The key ID to identify a JWK used for user info signature using an asymmetric key.
   *
   * @remarks
   *
   * A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
   * (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
   * to pick up one JWK for signature from the JWK Set when it is required to sign user info (which
   * is returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))
   * using an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies
   * conditions for user info signature. If the number of JWK candidates which satisfy the conditions
   * is 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)
   * is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.
   *
   * This `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation
   * (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
   * this mechanism is needed.
   */
  userInfoSignatureKeyId?: string | undefined;
  /**
   * The key ID to identify a JWK used for signing authorization responses using an asymmetric key.
   *
   * @remarks
   *
   * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
   * `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
   * from the authorization endpoint will be packed into a JWT. This property is used to compute the
   * value of the `exp` claim of the JWT.
   *
   * Authlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response
   * signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.
   * On the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that
   * Authlete Server can pick up one JWK from among the JWK candidates. This property exists to specify
   * the key ID.
   */
  authorizationSignatureKeyId?: string | undefined;
  /**
   * The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the
   *
   * @remarks
   * service. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.
   *
   * The value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  userInfoEndpoint?: string | undefined;
  /**
   * The flag to indicate whether the direct userinfo endpoint is enabled or not. The path
   *
   * @remarks
   * of the endpoint is `/api/auth/userinfo/direct/service-api-key`.
   */
  directUserInfoEndpointEnabled?: boolean | undefined;
  /**
   * The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)
   *
   * @remarks
   * is supported.
   */
  dynamicRegistrationSupported?: boolean | undefined;
  /**
   * The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)
   *
   * @remarks
   * of the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.
   *
   * The value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  registrationEndpoint?: string | undefined;
  /**
   * The URI of the registration management endpoint. If dynamic client registration is supported,
   *
   * @remarks
   * and this is set, this URI will be used as the basis of the client's management endpoint by appending
   * `/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will
   * be used as the URI base instead.
   */
  registrationManagementEndpoint?: string | undefined;
  /**
   * The URL of the "Policy" of the service.
   *
   * @remarks
   *
   * The value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  policyUri?: string | undefined;
  /**
   * The URL of the "Terms Of Service" of the service.
   *
   * @remarks
   *
   * The value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  tosUri?: string | undefined;
  /**
   * The URL of a page where documents for developers can be found.
   *
   * @remarks
   *
   * The value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  serviceDocumentation?: string | undefined;
  /**
   * The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA
   *
   * @remarks
   * (Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
   */
  backchannelAuthenticationEndpoint?: string | undefined;
  /**
   * The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`
   *
   * @remarks
   * metadata.
   *
   * Backchannel token delivery modes are defined in the specification of [CIBA (Client Initiated
   * Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
   */
  supportedBackchannelTokenDeliveryModes?:
    | Array<ServiceGetListApiSupportedBackchannelTokenDeliveryMode>
    | undefined;
  /**
   * The duration of backchannel authentication request IDs issued from the backchannel authentication
   *
   * @remarks
   * endpoint in seconds. This is used as the value of the `expires_in` property in responses from
   * the backchannel authentication endpoint.
   */
  backchannelAuthReqIdDuration?: number | undefined;
  /**
   * The minimum interval between polling requests to the token endpoint from client applications in
   *
   * @remarks
   * seconds. This is used as the value of the `interval` property in responses from the backchannel
   * authentication endpoint.
   */
  backchannelPollingInterval?: number | undefined;
  /**
   * The boolean flag which indicates whether the `user_code` request parameter is supported at the
   *
   * @remarks
   * backchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`
   * metadata.
   */
  backchannelUserCodeParameterSupported?: boolean | undefined;
  /**
   * The flag to indicate whether the `binding_message` request parameter is always required whenever
   *
   * @remarks
   * a backchannel authentication request is judged as a request for Financial-grade API.
   *
   * The FAPI-CIBA profile requires that the authorization server _"shall ensure unique authorization
   * context exists in the authorization request or require a `binding_message` in the authorization
   * request"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property
   * to `true`.
   *
   * If this property is set to `false`, the `binding_message` request parameter remains optional
   * even in FAPI context, but in exchange, your authorization server must implement a custom mechanism
   * that ensures each backchannel authentication request has unique context.
   */
  backchannelBindingMessageRequiredInFapi?: boolean | undefined;
  /**
   * The URI of the device authorization endpoint.
   *
   * @remarks
   *
   * Device authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.
   */
  deviceAuthorizationEndpoint?: string | undefined;
  /**
   * The verification URI for the device flow. This URI is used as the value of the `verification_uri`
   *
   * @remarks
   * parameter in responses from the device authorization endpoint.
   */
  deviceVerificationUri?: string | undefined;
  /**
   * The verification URI for the device flow with a placeholder for a user code. This URI is used
   *
   * @remarks
   * to build the value of the `verification_uri_complete` parameter in responses from the device
   * authorization endpoint.
   *
   * It is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for
   * a user code. For example, like the following.
   *
   * `https://example.com/device?user\_code=USER\_CODE`
   *
   * The fixed string is replaced with an actual user code when Authlete builds a verification URI
   * with a user code for the `verification_uri_complete` parameter.
   *
   * If this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization
   * responses.
   */
  deviceVerificationUriComplete?: string | undefined;
  /**
   * The duration of device verification codes and end-user verification codes issued from the device
   *
   * @remarks
   * authorization endpoint in seconds. This is used as the value of the `expires_in` property in responses
   * from the device authorization endpoint.
   */
  deviceFlowCodeDuration?: number | undefined;
  /**
   * The minimum interval between polling requests to the token endpoint from client applications in
   *
   * @remarks
   * seconds in device flow. This is used as the value of the `interval` property in responses from
   * the device authorization endpoint.
   */
  deviceFlowPollingInterval?: number | undefined;
  /**
   * The character set for end-user verification codes (`user_code`) for Device Flow.
   *
   * @remarks
   */
  userCodeCharset?: ServiceGetListApiUserCodeCharset | undefined;
  /**
   * The length of end-user verification codes (`user_code`) for Device Flow.
   *
   * @remarks
   */
  userCodeLength?: number | undefined;
  /**
   * Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedTrustFrameworks?: Array<string> | undefined;
  /**
   * Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   *
   * @remarks
   */
  supportedEvidence?: Array<string> | undefined;
  /**
   * Identity documents supported by this service. This corresponds to the `id_documents_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedIdentityDocuments?: Array<string> | undefined;
  /**
   * Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedVerificationMethods?: Array<string> | undefined;
  /**
   * Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`
   *
   * @remarks
   * [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
   */
  supportedVerifiedClaims?: Array<string> | undefined;
  /**
   * OIDC4IDA / verifiedClaimsValidationSchemaSet
   *
   * @remarks
   */
  verifiedClaimsValidationSchemaSet?:
    | ServiceGetListApiVerifiedClaimsValidationSchemaSet
    | undefined;
  /**
   * The attributes of this service.
   *
   * @remarks
   */
  attributes?: Array<ServiceGetListApiAttribute> | undefined;
  /**
   * The flag indicating whether the nbf claim in the request object is optional even when the authorization
   *
   * @remarks
   * request is regarded as a FAPI-Part2 request.
   *
   * The final version of Financial-grade API was approved in January, 2021. The Part 2 of the final
   * version has new requirements on lifetime of request objects. They require that request objects
   * contain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.
   *
   * Therefore, when an authorization request is regarded as a FAPI-Part2 request, the request object
   * used in the authorization request must contain an nbf claim. Otherwise, the authorization server
   * rejects the authorization request.
   *
   * When this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization
   * request is regarded as a FAPI-Part2 request. That is, the authorization server does not perform
   * the validation on lifetime of the request object.
   *
   * Skipping the validation is a violation of the FAPI specification. The reason why this flag has
   * been prepared nevertheless is that the new requirements (which do not exist in the Implementer's
   * Draft 2 released in October, 2018) have big impacts on deployed implementations of client
   * applications and Authlete thinks there should be a mechanism whereby to make the migration
   * from ID2 to Final smooth without breaking live systems.
   */
  nbfOptional?: boolean | undefined;
  /**
   * The flag indicating whether generation of the iss response parameter is suppressed.
   *
   * @remarks
   *
   * "OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response" has defined a new
   * authorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.
   *
   * The specification requires that the `iss` response parameter always be included in authorization
   * responses unless JARM (JWT Secured Authorization Response Mode) is used.
   *
   * When this flag is `true`, the authorization server does not include the `iss` response parameter
   * in authorization responses. By turning this flag on and off, developers of client applications
   * can experiment the mix-up attack and the effect of the `iss` response parameter.
   *
   * Note that this flag should not be `true` in production environment unless there are special
   * reasons for it.
   */
  issSuppressed?: boolean | undefined;
  /**
   * custom client metadata supported by this service.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored
   * into Authlete database. On the other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),
   * Authlete can recognize them and stores their values into the database. The stored custom client
   * metadata values can be referenced by `customMetadata`.
   */
  supportedCustomClientMetadata?: Array<string> | undefined;
  /**
   * The flag indicating whether the expiration date of an access token never exceeds that of the
   *
   * @remarks
   * corresponding refresh token.
   *
   * When a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),
   * the expiration date of the access token may exceed the expiration date of the corresponding
   * refresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is
   * `true` and/or when `refreshTokenDurationKept` is `true`.
   *
   * When this flag is `true`, the expiration date of an access token never exceeds that of the corresponding
   * refresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,
   * `accessTokenDuration` in `extension` and `access_token.duration` scope attribute.
   *
   * It is technically possible to set a value which is bigger than the duration of refresh tokens
   * as the duration of access tokens although it is strange. In the case, the duration of an access
   * token becomes longer than the duration of the refresh token which is issued together with the
   * access token. Even if the duration values are configured so, if this flag is `true`, the expiration
   * date of the access token does not exceed that of the refresh token. That is, the duration of
   * the access token will be shortened, and as a result, the access token and the refresh token
   * will have the same expiration date.
   */
  tokenExpirationLinked?: boolean | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`
   * for details.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the client is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata of the client that has sent the request object.
   *
   * The request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting
   * Request Objects sent to the OP. This parameter SHOULD be included when symmetric encryption
   * will be used, since this signals to the OP that a client_secret value needs to be returned
   * from which the symmetric key will be derived, that might not otherwise be returned. The RP
   * MAY still use other supported encryption algorithms or send unencrypted Request Objects, even
   * when this parameter is present. If both signing and encryption are requested, the Request Object
   * will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The
   * default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The Client's property that represents the client metadata is `requestEncryptionAlg`. See the
   * description of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the client is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata of the client that has sent the request object.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   * Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   * value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   * MUST also be provided.
   *
   * The Client's property that represents the client metadata is `requestEncryptionEnc`. See the
   * description of `requestEncryptionEnc` for details.
   *
   * Even if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.
   *
   * @remarks
   *
   * When this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,
   * `/api/hsk/*` APIs reject all requests.
   *
   * Even if this flag is `true`, HSM-related features do not work if the configuration of the Authlete
   * server you are using does not support HSM.
   */
  hsmEnabled?: boolean | undefined;
  /**
   * The information about keys managed on HSMs (Hardware Security Modules).
   *
   * @remarks
   *
   * This `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`
   * API and `/api/service/update` API do not have any effect. The contents of this property is controlled
   * only by `/api/hsk/*` APIs.
   */
  hsks?: Array<ServiceGetListApiHsk> | undefined;
  /**
   * The URL of the grant management endpoint.
   *
   * @remarks
   */
  grantManagementEndpoint?: string | undefined;
  /**
   * The flag indicating whether every authorization request (and any request serving as an authorization
   *
   * @remarks
   * request such as CIBA backchannel authentication request and device authorization request) must
   * include the `grant_management_action` request parameter.
   *
   * This property corresponds to the `grant_management_action_required` server metadata defined
   * in [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   *
   * Note that setting true to this property will result in blocking all public clients because
   * the specification requires that grant management be usable only by confidential clients for
   * security reasons.
   */
  grantManagementActionRequired?: boolean | undefined;
  /**
   * The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as
   *
   * @remarks
   * a value of the `action` response parameter when appropriate.
   *
   * The `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`
   * parameter in an `/api/client/registration` API response. This means that implementations of
   * client `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)
   * strictly.
   *
   * For backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`
   * API does not return the `UNAUTHORIZED` enum value if this flag is not turned on.
   *
   * The steps an existing implementation of client configuration endpoint has to do in order to
   * conform to the requirement related to "401 Unauthorized" are as follows.
   *
   * 1. Update the Authlete library (e.g. authlete-java-common) your system is using.
   * 2. Update your implementation of client configuration endpoint so that it can handle the
   * `UNAUTHORIZED` action.
   * 3. Turn on this `unauthorizedOnClientConfigSupported` flag.
   */
  unauthorizedOnClientConfigSupported?: boolean | undefined;
  /**
   * The flag indicating whether the `scope` request parameter in dynamic client registration and
   *
   * @remarks
   * update requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.
   *
   * Limiting the range of scopes that a client can request is achieved by listing scopes in the
   * `client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`
   * property to `true`. This feature is called "requestable scopes".
   *
   * This property affects behaviors of `/api/client/registration` and other family APIs.
   */
  dcrScopeUsedAsRequestable?: boolean | undefined;
  /**
   * The endpoint for clients ending the sessions.
   *
   * @remarks
   *
   * A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.
   *
   * The value of this property is used as `end_session_endpoint` property in the [OpenID Provider
   * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  endSessionEndpoint?: string | undefined;
  /**
   * The flag indicating whether the port number component of redirection URIs can be variable when
   *
   * @remarks
   * the host component indicates loopback.
   *
   * When this flag is `true`, if the host component of a redirection URI specified in an authorization
   * request indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`
   * or `::1`), the port number component is ignored when the specified redirection URI is compared
   * to pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](
   * https://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)
   * for Native Apps.
   *
   * [3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)
   * of [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _"If the client registration
   * included the full redirection URI, the authorization server MUST compare the two URIs using
   * simple string comparison as defined in [RFC3986] Section 6.2.1."_ Also, the description of
   * `redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)
   * of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states
   * _"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
   * at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]
   * (**Simple String Comparison**)."_ These "Simple String Comparison" requirements are preceded
   * by this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0
   * are satisfied, the port number component of loopback redirection URIs can be variable when this
   * flag is `true`.
   *
   * [8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)
   * of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.
   *
   * > While redirect URIs using localhost (i.e., `"http://localhost:{port}/{path}"`) function
   * similarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.
   * Specifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently
   * listening on network interfaces other than the loopback interface. It is also less susceptible
   * to client-side firewalls and misconfigured host name resolution on the user's device.
   *
   * However, Authlete allows the port number component to be variable in the case of `localhost`,
   * too. It is left to client applications whether they use `localhost` or a literal loopback IP
   * address (`127.0.0.1` for IPv4 or `::1` for IPv6).
   *
   * Section 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state
   * that loopback redirection URIs use the `"http"` scheme, but Authlete allows the port number
   * component to be variable in other cases (e.g. in the case of the `"https"` scheme), too.
   */
  loopbackRedirectionUriVariable?: boolean | undefined;
  /**
   * The flag indicating whether Authlete checks whether the `aud` claim of request objects matches
   *
   * @remarks
   * the issuer identifier of this service.
   *
   * [Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)
   * of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following
   * statement.
   *
   * > The `aud` value SHOULD be or include the OP's Issuer Identifier URL.
   *
   * Likewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of
   * [RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:
   * JWT-Secured Authorization Request (JAR)) has the following statement.
   *
   * > The value of aud should be the value of the authorization server (AS) issuer, as defined in
   * [RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).
   *
   * As excerpted above, validation on the `aud` claim of request objects is optional. However, if
   * this flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer
   * identifier of this service and raises an error if they are different.
   */
  requestObjectAudienceChecked?: boolean | undefined;
  /**
   * The flag indicating whether Authlete generates access tokens for
   *
   * @remarks
   * external attachments and embeds them in ID tokens and userinfo
   * responses.
   */
  accessTokenForExternalAttachmentEmbedded?: boolean | undefined;
  /**
   * Identifiers of entities that can issue entity statements for this
   *
   * @remarks
   * service. This property corresponds to the `authority_hints`
   * property that appears in a self-signed entity statement that is
   * defined in OpenID Connect Federation 1.0.
   */
  authorityHints?: Array<string> | undefined;
  /**
   * flag indicating whether this service supports OpenID Connect Federation 1
   *
   * @remarks
   */
  federationEnabled?: boolean | undefined;
  /**
   * JWK Set document containing keys that are used to sign (1) self-signed
   *
   * @remarks
   * entity statement of this service and (2) the response from
   * `signed_jwks_uri`.
   */
  federationJwks?: string | undefined;
  /**
   * A key ID to identify a JWK used to sign the entity configuration and
   *
   * @remarks
   * the signed JWK Set.
   */
  federationSignatureKeyId?: string | undefined;
  /**
   * The duration of the entity configuration in seconds.
   *
   * @remarks
   */
  federationConfigurationDuration?: number | undefined;
  /**
   * The URI of the federation registration endpoint. This property corresponds
   *
   * @remarks
   * to the `federation_registration_endpoint` server metadata that is
   * defined in OpenID Connect Federation 1.0.
   */
  federationRegistrationEndpoint?: string | undefined;
  /**
   * The human-readable name representing the organization that operates
   *
   * @remarks
   * this service. This property corresponds to the `organization_name`
   * server metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The transformed claims predefined by this service in JSON format.
   *
   * @remarks
   * This property corresponds to the `transformed_claims_predefined`
   * server metadata.
   */
  predefinedTransformedClaims?: string | undefined;
  /**
   * flag indicating whether refresh token requests with the same
   *
   * @remarks
   * refresh token can be made multiple times in quick succession and
   * they can obtain the same renewed refresh token within the short
   * period.
   */
  refreshTokenIdempotent?: boolean | undefined;
  /**
   * The URI of the endpoint that returns this service's JWK Set document in
   *
   * @remarks
   * the JWT format. This property corresponds to the `signed_jwks_uri`
   * server metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * Supported attachment types. This property corresponds to the {@code
   *
   * @remarks
   * attachments_supported} server metadata which was added by the third
   * implementer's draft of OpenID Connect for Identity Assurance 1.0.
   */
  supportedAttachments?:
    | Array<ServiceGetListApiSupportedAttachment>
    | undefined;
  /**
   * Supported algorithms used to compute digest values of external
   *
   * @remarks
   * attachments. This property corresponds to the
   * `digest_algorithms_supported` server metadata which was added
   * by the third implementer's draft of OpenID Connect for Identity
   * Assurance 1.0.
   */
  supportedDigestAlgorithms?: Array<string> | undefined;
  /**
   * Document types supported by this service. This property corresponds
   *
   * @remarks
   * to the `documents_supported` server metadata.
   */
  supportedDocuments?: Array<string> | undefined;
  /**
   * validation and verification processes supported by this service.
   *
   * @remarks
   * This property corresponds to the `documents_methods_supported`
   * server metadata.
   *
   * The third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   * renamed the
   * `id_documents_verification_methods_supported` server metadata to
   * `documents_methods_supported`.
   */
  supportedDocumentsMethods?: Array<string> | undefined;
  /**
   * Document validation methods supported by this service. This property
   *
   * @remarks
   * corresponds to the `documents_validation_methods_supported` server
   * metadata which was added by the third implementer's draft of <a href=
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   */
  supportedDocumentsValidationMethods?: Array<string> | undefined;
  /**
   * Document verification methods supported by this service. This property
   *
   * @remarks
   * corresponds to the `documents_verification_methods_supported` server
   * metadata which was added by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   */
  supportedDocumentsVerificationMethods?: Array<string> | undefined;
  /**
   * Electronic record types supported by this service. This property
   *
   * @remarks
   * corresponds to the `electronic_records_supported` server metadata
   * which was added by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
   */
  supportedElectronicRecords?: Array<string> | undefined;
  supportedClientRegistrationTypes?:
    | Array<ServiceGetListApiSupportedClientRegistrationType>
    | undefined;
  /**
   * The flag indicating whether to prohibit unidentifiable clients from
   *
   * @remarks
   * making token exchange requests.
   */
  tokenExchangeByIdentifiableClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to prohibit public clients from making
   *
   * @remarks
   * token exchange requests.
   */
  tokenExchangeByConfidentialClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to prohibit clients that have no explicit
   *
   * @remarks
   * permission from making token exchange requests.
   */
  tokenExchangeByPermittedClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to reject token exchange requests which
   *
   * @remarks
   * use encrypted JWTs as input tokens.
   */
  tokenExchangeEncryptedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to reject token exchange requests which
   *
   * @remarks
   * use unsigned JWTs as input tokens.
   */
  tokenExchangeUnsignedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to prohibit unidentifiable clients from
   *
   * @remarks
   * using the grant type "urn:ietf:params:oauth:grant-type:jwt-bearer".
   */
  jwtGrantByIdentifiableClientsOnly?: boolean | undefined;
  /**
   * The flag indicating whether to reject token requests that use an
   *
   * @remarks
   * encrypted JWT as an authorization grant with the grant type
   * "urn:ietf:params:oauth:grant-type:jwt-bearer".
   */
  jwtGrantEncryptedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to reject token requests that use an
   *
   * @remarks
   * unsigned JWT as an authorization grant with the grant type
   * "urn:ietf:params:oauth:grant-type:jwt-bearer".
   */
  jwtGrantUnsignedJwtRejected?: boolean | undefined;
  /**
   * The flag indicating whether to block DCR (Dynamic Client Registration)
   *
   * @remarks
   * requests whose "software_id" has already been used previously.
   */
  dcrDuplicateSoftwareIdBlocked?: boolean | undefined;
  /**
   * The trust anchors that are referenced when this service resolves
   *
   * @remarks
   * trust chains of relying parties.
   *
   * If this property is empty, client registration fails regardless of
   * whether its type is `automatic` or `explicit`. It means
   * that OpenID Connect Federation 1.0 does not work.
   */
  trustAnchors?: Array<ServiceGetListApiTrustAnchor> | undefined;
  /**
   * The flag indicating whether the openid scope should be dropped from
   *
   * @remarks
   * scopes list assigned to access token issued when a refresh token grant
   * is used.
   */
  openidDroppedOnRefreshWithoutOfflineAccess?: boolean | undefined;
  /**
   * Supported document check methods. This property corresponds to the `documents_check_methods_supported`
   *
   * @remarks
   * server metadata which was added by the fourth implementer's draft of OpenID Connect for Identity
   * Assurance 1.0.
   */
  supportedDocumentsCheckMethods?: Array<string> | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsResponseSigned?: boolean | undefined;
  /**
   * The duration of `c_nonce`.
   *
   * @remarks
   */
  cnonceDuration?: number | undefined;
  /**
   * Whether to require DPoP proof JWTs to include the `nonce` claim
   *
   * @remarks
   * whenever they are presented.
   */
  dpopNonceRequired?: boolean | undefined;
  /**
   * Get the flag indicating whether the feature of Verifiable Credentials
   *
   * @remarks
   * for this service is enabled or not.
   */
  verifiableCredentialsEnabled?: boolean | undefined;
  /**
   * The URL at which the JWK Set document of the credential issuer is
   *
   * @remarks
   * exposed.
   */
  credentialJwksUri?: string | undefined;
  /**
   * The default duration of credential offers in seconds.
   *
   * @remarks
   */
  credentialOfferDuration?: number | undefined;
  /**
   * The duration of nonce values for DPoP proof JWTs in seconds.
   *
   * @remarks
   */
  dpopNonceDuration?: number | undefined;
  /**
   * The flag indicating whether token requests using the pre-authorized
   *
   * @remarks
   * code grant flow by unidentifiable clients are allowed.
   */
  preAuthorizedGrantAnonymousAccessSupported?: boolean | undefined;
  /**
   * The duration of transaction ID in seconds that may be issued as a
   *
   * @remarks
   * result of a credential request or a batch credential request.
   */
  credentialTransactionDuration?: number | undefined;
  /**
   * The key ID of the key for signing introspection responses.
   *
   * @remarks
   */
  introspectionSignatureKeyId?: string | undefined;
  /**
   * The key ID of the key for signing introspection responses.
   *
   * @remarks
   */
  resourceSignatureKeyId?: string | undefined;
  /**
   * The default length of user PINs.
   *
   * @remarks
   */
  userPinLength?: number | undefined;
  /**
   * The supported `prompt` values.
   *
   * @remarks
   */
  supportedPromptValues?:
    | Array<ServiceGetListApiSupportedPromptValue>
    | undefined;
  /**
   * The flag indicating whether to enable the feature of ID token
   *
   * @remarks
   * reissuance in the refresh token flow.
   */
  idTokenReissuable?: boolean | undefined;
  /**
   * The JWK Set document containing private keys that are used to sign
   *
   * @remarks
   * verifiable credentials.
   */
  credentialJwks?: string | undefined;
  /**
   * FAPI modes for this service.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests to this service based
   * on the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported
   * by this service.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always
   * processes requests to this service based on "Financial-grade API Security Profile 1.0 - Part 2:
   * Advanced" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.
   */
  fapiModes?: Array<ServiceGetListApiFapiMode> | undefined;
  /**
   * The default duration of verifiable credentials in seconds.
   *
   * @remarks
   */
  credentialDuration?: number | undefined;
  credentialIssuerMetadata?:
    | ServiceGetListApiCredentialIssuerMetadata
    | undefined;
  /**
   * The type of the `aud` claim in ID tokens.
   *
   * @remarks
   */
  idTokenAudType?: string | undefined;
};

export type ServiceGetListApiResponse = {
  /**
   * Start index (inclusive) of the result set. The default value is 0. Must not be a negative
   *
   * @remarks
   * number.
   */
  start?: number | undefined;
  /**
   * Start index (inclusive) of the result set. The default value is 0. Must not be a negative
   *
   * @remarks
   * number.
   */
  end?: number | undefined;
  /**
   * Total number of services owned by the service owner. This doesn't mean the number of services
   *
   * @remarks
   * contained in the response.
   */
  totalCount?: number | undefined;
  /**
   * An array of services.
   *
   * @remarks
   */
  services?: Array<ServiceGetListApiService> | undefined;
};

/** @internal */
export const ServiceGetListApiRequest$inboundSchema: z.ZodType<
  ServiceGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/** @internal */
export type ServiceGetListApiRequest$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
};

/** @internal */
export const ServiceGetListApiRequest$outboundSchema: z.ZodType<
  ServiceGetListApiRequest$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiRequest
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiRequest$ {
  /** @deprecated use `ServiceGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiRequest$inboundSchema;
  /** @deprecated use `ServiceGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiRequest$outboundSchema;
  /** @deprecated use `ServiceGetListApiRequest$Outbound` instead. */
  export type Outbound = ServiceGetListApiRequest$Outbound;
}

export function serviceGetListApiRequestToJSON(
  serviceGetListApiRequest: ServiceGetListApiRequest,
): string {
  return JSON.stringify(
    ServiceGetListApiRequest$outboundSchema.parse(serviceGetListApiRequest),
  );
}

export function serviceGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiMetadatum$inboundSchema: z.ZodType<
  ServiceGetListApiMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiMetadatum$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ServiceGetListApiMetadatum$outboundSchema: z.ZodType<
  ServiceGetListApiMetadatum$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiMetadatum
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiMetadatum$ {
  /** @deprecated use `ServiceGetListApiMetadatum$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiMetadatum$inboundSchema;
  /** @deprecated use `ServiceGetListApiMetadatum$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiMetadatum$outboundSchema;
  /** @deprecated use `ServiceGetListApiMetadatum$Outbound` instead. */
  export type Outbound = ServiceGetListApiMetadatum$Outbound;
}

export function serviceGetListApiMetadatumToJSON(
  serviceGetListApiMetadatum: ServiceGetListApiMetadatum,
): string {
  return JSON.stringify(
    ServiceGetListApiMetadatum$outboundSchema.parse(serviceGetListApiMetadatum),
  );
}

export function serviceGetListApiMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiMetadatum' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiSupportedGrantType$inboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiSupportedGrantType
> = z.nativeEnum(ServiceGetListApiSupportedGrantType);

/** @internal */
export const ServiceGetListApiSupportedGrantType$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedGrantType> =
    ServiceGetListApiSupportedGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedGrantType$ {
  /** @deprecated use `ServiceGetListApiSupportedGrantType$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedGrantType$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedGrantType$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedGrantType$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedResponseType$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedResponseType> = z.nativeEnum(
    ServiceGetListApiSupportedResponseType,
  );

/** @internal */
export const ServiceGetListApiSupportedResponseType$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedResponseType> =
    ServiceGetListApiSupportedResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedResponseType$ {
  /** @deprecated use `ServiceGetListApiSupportedResponseType$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedResponseType$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedResponseType$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedResponseType$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedServiceProfile$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedServiceProfile> = z
    .nativeEnum(ServiceGetListApiSupportedServiceProfile);

/** @internal */
export const ServiceGetListApiSupportedServiceProfile$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedServiceProfile> =
    ServiceGetListApiSupportedServiceProfile$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedServiceProfile$ {
  /** @deprecated use `ServiceGetListApiSupportedServiceProfile$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedServiceProfile$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedServiceProfile$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedServiceProfile$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedDisplay$inboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiSupportedDisplay
> = z.nativeEnum(ServiceGetListApiSupportedDisplay);

/** @internal */
export const ServiceGetListApiSupportedDisplay$outboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiSupportedDisplay
> = ServiceGetListApiSupportedDisplay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedDisplay$ {
  /** @deprecated use `ServiceGetListApiSupportedDisplay$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiSupportedDisplay$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedDisplay$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedDisplay$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedTokenAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedTokenAuthMethod> = z
    .nativeEnum(ServiceGetListApiSupportedTokenAuthMethod);

/** @internal */
export const ServiceGetListApiSupportedTokenAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedTokenAuthMethod> =
    ServiceGetListApiSupportedTokenAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedTokenAuthMethod$ {
  /** @deprecated use `ServiceGetListApiSupportedTokenAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedTokenAuthMethod$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedTokenAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedTokenAuthMethod$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedRevocationAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedRevocationAuthMethod> = z
    .nativeEnum(ServiceGetListApiSupportedRevocationAuthMethod);

/** @internal */
export const ServiceGetListApiSupportedRevocationAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedRevocationAuthMethod> =
    ServiceGetListApiSupportedRevocationAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedRevocationAuthMethod$ {
  /** @deprecated use `ServiceGetListApiSupportedRevocationAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedRevocationAuthMethod$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedRevocationAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedRevocationAuthMethod$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedIntrospectionAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedIntrospectionAuthMethod> = z
    .nativeEnum(ServiceGetListApiSupportedIntrospectionAuthMethod);

/** @internal */
export const ServiceGetListApiSupportedIntrospectionAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedIntrospectionAuthMethod> =
    ServiceGetListApiSupportedIntrospectionAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedIntrospectionAuthMethod$ {
  /** @deprecated use `ServiceGetListApiSupportedIntrospectionAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedIntrospectionAuthMethod$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedIntrospectionAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedIntrospectionAuthMethod$outboundSchema;
}

/** @internal */
export const ServiceGetListApiMtlsEndpointAlias$inboundSchema: z.ZodType<
  ServiceGetListApiMtlsEndpointAlias,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  uri: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiMtlsEndpointAlias$Outbound = {
  name?: string | undefined;
  uri?: string | undefined;
};

/** @internal */
export const ServiceGetListApiMtlsEndpointAlias$outboundSchema: z.ZodType<
  ServiceGetListApiMtlsEndpointAlias$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiMtlsEndpointAlias
> = z.object({
  name: z.string().optional(),
  uri: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiMtlsEndpointAlias$ {
  /** @deprecated use `ServiceGetListApiMtlsEndpointAlias$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiMtlsEndpointAlias$inboundSchema;
  /** @deprecated use `ServiceGetListApiMtlsEndpointAlias$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiMtlsEndpointAlias$outboundSchema;
  /** @deprecated use `ServiceGetListApiMtlsEndpointAlias$Outbound` instead. */
  export type Outbound = ServiceGetListApiMtlsEndpointAlias$Outbound;
}

export function serviceGetListApiMtlsEndpointAliasToJSON(
  serviceGetListApiMtlsEndpointAlias: ServiceGetListApiMtlsEndpointAlias,
): string {
  return JSON.stringify(
    ServiceGetListApiMtlsEndpointAlias$outboundSchema.parse(
      serviceGetListApiMtlsEndpointAlias,
    ),
  );
}

export function serviceGetListApiMtlsEndpointAliasFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiMtlsEndpointAlias, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ServiceGetListApiMtlsEndpointAlias$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiMtlsEndpointAlias' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiAccessTokenSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiAccessTokenSignAlg
> = z.nativeEnum(ServiceGetListApiAccessTokenSignAlg);

/** @internal */
export const ServiceGetListApiAccessTokenSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiAccessTokenSignAlg> =
    ServiceGetListApiAccessTokenSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiAccessTokenSignAlg$ {
  /** @deprecated use `ServiceGetListApiAccessTokenSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiAccessTokenSignAlg$inboundSchema;
  /** @deprecated use `ServiceGetListApiAccessTokenSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiAccessTokenSignAlg$outboundSchema;
}

/** @internal */
export const ServiceGetListApiDescription$inboundSchema: z.ZodType<
  ServiceGetListApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ServiceGetListApiDescription$outboundSchema: z.ZodType<
  ServiceGetListApiDescription$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiDescription$ {
  /** @deprecated use `ServiceGetListApiDescription$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiDescription$inboundSchema;
  /** @deprecated use `ServiceGetListApiDescription$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiDescription$outboundSchema;
  /** @deprecated use `ServiceGetListApiDescription$Outbound` instead. */
  export type Outbound = ServiceGetListApiDescription$Outbound;
}

export function serviceGetListApiDescriptionToJSON(
  serviceGetListApiDescription: ServiceGetListApiDescription,
): string {
  return JSON.stringify(
    ServiceGetListApiDescription$outboundSchema.parse(
      serviceGetListApiDescription,
    ),
  );
}

export function serviceGetListApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiDescription' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiSupportedScopeAttribute$inboundSchema: z.ZodType<
  ServiceGetListApiSupportedScopeAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiSupportedScopeAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ServiceGetListApiSupportedScopeAttribute$outboundSchema: z.ZodType<
  ServiceGetListApiSupportedScopeAttribute$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiSupportedScopeAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedScopeAttribute$ {
  /** @deprecated use `ServiceGetListApiSupportedScopeAttribute$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedScopeAttribute$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedScopeAttribute$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedScopeAttribute$outboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedScopeAttribute$Outbound` instead. */
  export type Outbound = ServiceGetListApiSupportedScopeAttribute$Outbound;
}

export function serviceGetListApiSupportedScopeAttributeToJSON(
  serviceGetListApiSupportedScopeAttribute:
    ServiceGetListApiSupportedScopeAttribute,
): string {
  return JSON.stringify(
    ServiceGetListApiSupportedScopeAttribute$outboundSchema.parse(
      serviceGetListApiSupportedScopeAttribute,
    ),
  );
}

export function serviceGetListApiSupportedScopeAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  ServiceGetListApiSupportedScopeAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ServiceGetListApiSupportedScopeAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ServiceGetListApiSupportedScopeAttribute' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiSupportedScope$inboundSchema: z.ZodType<
  ServiceGetListApiSupportedScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ServiceGetListApiDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => ServiceGetListApiSupportedScopeAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type ServiceGetListApiSupportedScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?: Array<ServiceGetListApiDescription$Outbound> | undefined;
  attributes?:
    | Array<ServiceGetListApiSupportedScopeAttribute$Outbound>
    | undefined;
};

/** @internal */
export const ServiceGetListApiSupportedScope$outboundSchema: z.ZodType<
  ServiceGetListApiSupportedScope$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiSupportedScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ServiceGetListApiDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => ServiceGetListApiSupportedScopeAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedScope$ {
  /** @deprecated use `ServiceGetListApiSupportedScope$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiSupportedScope$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedScope$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiSupportedScope$outboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedScope$Outbound` instead. */
  export type Outbound = ServiceGetListApiSupportedScope$Outbound;
}

export function serviceGetListApiSupportedScopeToJSON(
  serviceGetListApiSupportedScope: ServiceGetListApiSupportedScope,
): string {
  return JSON.stringify(
    ServiceGetListApiSupportedScope$outboundSchema.parse(
      serviceGetListApiSupportedScope,
    ),
  );
}

export function serviceGetListApiSupportedScopeFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiSupportedScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiSupportedScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiSupportedScope' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiSupportedClaimType$inboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiSupportedClaimType
> = z.nativeEnum(ServiceGetListApiSupportedClaimType);

/** @internal */
export const ServiceGetListApiSupportedClaimType$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedClaimType> =
    ServiceGetListApiSupportedClaimType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedClaimType$ {
  /** @deprecated use `ServiceGetListApiSupportedClaimType$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedClaimType$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedClaimType$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedClaimType$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedBackchannelTokenDeliveryMode$inboundSchema:
  z.ZodNativeEnum<
    typeof ServiceGetListApiSupportedBackchannelTokenDeliveryMode
  > = z.nativeEnum(ServiceGetListApiSupportedBackchannelTokenDeliveryMode);

/** @internal */
export const ServiceGetListApiSupportedBackchannelTokenDeliveryMode$outboundSchema:
  z.ZodNativeEnum<
    typeof ServiceGetListApiSupportedBackchannelTokenDeliveryMode
  > = ServiceGetListApiSupportedBackchannelTokenDeliveryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedBackchannelTokenDeliveryMode$ {
  /** @deprecated use `ServiceGetListApiSupportedBackchannelTokenDeliveryMode$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedBackchannelTokenDeliveryMode$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedBackchannelTokenDeliveryMode$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedBackchannelTokenDeliveryMode$outboundSchema;
}

/** @internal */
export const ServiceGetListApiUserCodeCharset$inboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiUserCodeCharset
> = z.nativeEnum(ServiceGetListApiUserCodeCharset);

/** @internal */
export const ServiceGetListApiUserCodeCharset$outboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiUserCodeCharset
> = ServiceGetListApiUserCodeCharset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiUserCodeCharset$ {
  /** @deprecated use `ServiceGetListApiUserCodeCharset$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiUserCodeCharset$inboundSchema;
  /** @deprecated use `ServiceGetListApiUserCodeCharset$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiUserCodeCharset$outboundSchema;
}

/** @internal */
export const ServiceGetListApiVerifiedClaimsValidationSchemaSet$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiVerifiedClaimsValidationSchemaSet> = z
    .nativeEnum(ServiceGetListApiVerifiedClaimsValidationSchemaSet);

/** @internal */
export const ServiceGetListApiVerifiedClaimsValidationSchemaSet$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiVerifiedClaimsValidationSchemaSet> =
    ServiceGetListApiVerifiedClaimsValidationSchemaSet$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiVerifiedClaimsValidationSchemaSet$ {
  /** @deprecated use `ServiceGetListApiVerifiedClaimsValidationSchemaSet$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiVerifiedClaimsValidationSchemaSet$inboundSchema;
  /** @deprecated use `ServiceGetListApiVerifiedClaimsValidationSchemaSet$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiVerifiedClaimsValidationSchemaSet$outboundSchema;
}

/** @internal */
export const ServiceGetListApiAttribute$inboundSchema: z.ZodType<
  ServiceGetListApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ServiceGetListApiAttribute$outboundSchema: z.ZodType<
  ServiceGetListApiAttribute$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiAttribute$ {
  /** @deprecated use `ServiceGetListApiAttribute$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiAttribute$inboundSchema;
  /** @deprecated use `ServiceGetListApiAttribute$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiAttribute$outboundSchema;
  /** @deprecated use `ServiceGetListApiAttribute$Outbound` instead. */
  export type Outbound = ServiceGetListApiAttribute$Outbound;
}

export function serviceGetListApiAttributeToJSON(
  serviceGetListApiAttribute: ServiceGetListApiAttribute,
): string {
  return JSON.stringify(
    ServiceGetListApiAttribute$outboundSchema.parse(serviceGetListApiAttribute),
  );
}

export function serviceGetListApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiAttribute' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiHsk$inboundSchema: z.ZodType<
  ServiceGetListApiHsk,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiHsk$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
};

/** @internal */
export const ServiceGetListApiHsk$outboundSchema: z.ZodType<
  ServiceGetListApiHsk$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiHsk
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  handle: z.string().optional(),
  publicKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiHsk$ {
  /** @deprecated use `ServiceGetListApiHsk$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiHsk$inboundSchema;
  /** @deprecated use `ServiceGetListApiHsk$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiHsk$outboundSchema;
  /** @deprecated use `ServiceGetListApiHsk$Outbound` instead. */
  export type Outbound = ServiceGetListApiHsk$Outbound;
}

export function serviceGetListApiHskToJSON(
  serviceGetListApiHsk: ServiceGetListApiHsk,
): string {
  return JSON.stringify(
    ServiceGetListApiHsk$outboundSchema.parse(serviceGetListApiHsk),
  );
}

export function serviceGetListApiHskFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiHsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiHsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiHsk' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiSupportedAttachment$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedAttachment> = z.nativeEnum(
    ServiceGetListApiSupportedAttachment,
  );

/** @internal */
export const ServiceGetListApiSupportedAttachment$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedAttachment> =
    ServiceGetListApiSupportedAttachment$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedAttachment$ {
  /** @deprecated use `ServiceGetListApiSupportedAttachment$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedAttachment$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedAttachment$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedAttachment$outboundSchema;
}

/** @internal */
export const ServiceGetListApiSupportedClientRegistrationType$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedClientRegistrationType> = z
    .nativeEnum(ServiceGetListApiSupportedClientRegistrationType);

/** @internal */
export const ServiceGetListApiSupportedClientRegistrationType$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedClientRegistrationType> =
    ServiceGetListApiSupportedClientRegistrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedClientRegistrationType$ {
  /** @deprecated use `ServiceGetListApiSupportedClientRegistrationType$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedClientRegistrationType$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedClientRegistrationType$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedClientRegistrationType$outboundSchema;
}

/** @internal */
export const ServiceGetListApiTrustAnchor$inboundSchema: z.ZodType<
  ServiceGetListApiTrustAnchor,
  z.ZodTypeDef,
  unknown
> = z.object({
  entityId: z.string().optional(),
  jwks: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiTrustAnchor$Outbound = {
  entityId?: string | undefined;
  jwks?: string | undefined;
};

/** @internal */
export const ServiceGetListApiTrustAnchor$outboundSchema: z.ZodType<
  ServiceGetListApiTrustAnchor$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiTrustAnchor
> = z.object({
  entityId: z.string().optional(),
  jwks: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiTrustAnchor$ {
  /** @deprecated use `ServiceGetListApiTrustAnchor$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiTrustAnchor$inboundSchema;
  /** @deprecated use `ServiceGetListApiTrustAnchor$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiTrustAnchor$outboundSchema;
  /** @deprecated use `ServiceGetListApiTrustAnchor$Outbound` instead. */
  export type Outbound = ServiceGetListApiTrustAnchor$Outbound;
}

export function serviceGetListApiTrustAnchorToJSON(
  serviceGetListApiTrustAnchor: ServiceGetListApiTrustAnchor,
): string {
  return JSON.stringify(
    ServiceGetListApiTrustAnchor$outboundSchema.parse(
      serviceGetListApiTrustAnchor,
    ),
  );
}

export function serviceGetListApiTrustAnchorFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiTrustAnchor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiTrustAnchor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiTrustAnchor' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiSupportedPromptValue$inboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedPromptValue> = z.nativeEnum(
    ServiceGetListApiSupportedPromptValue,
  );

/** @internal */
export const ServiceGetListApiSupportedPromptValue$outboundSchema:
  z.ZodNativeEnum<typeof ServiceGetListApiSupportedPromptValue> =
    ServiceGetListApiSupportedPromptValue$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiSupportedPromptValue$ {
  /** @deprecated use `ServiceGetListApiSupportedPromptValue$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiSupportedPromptValue$inboundSchema;
  /** @deprecated use `ServiceGetListApiSupportedPromptValue$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiSupportedPromptValue$outboundSchema;
}

/** @internal */
export const ServiceGetListApiFapiMode$inboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiFapiMode
> = z.nativeEnum(ServiceGetListApiFapiMode);

/** @internal */
export const ServiceGetListApiFapiMode$outboundSchema: z.ZodNativeEnum<
  typeof ServiceGetListApiFapiMode
> = ServiceGetListApiFapiMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiFapiMode$ {
  /** @deprecated use `ServiceGetListApiFapiMode$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiFapiMode$inboundSchema;
  /** @deprecated use `ServiceGetListApiFapiMode$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiFapiMode$outboundSchema;
}

/** @internal */
export const ServiceGetListApiCredentialIssuerMetadata$inboundSchema: z.ZodType<
  ServiceGetListApiCredentialIssuerMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  credentialIssuer: z.string().optional(),
  authorizationServer: z.string().optional(),
  credentialEndpoint: z.boolean().optional(),
  batchCredentialEndpoint: z.number().int().optional(),
  deferredCredentialEndpoint: z.string().optional(),
  credentialsSupported: z.boolean().optional(),
});

/** @internal */
export type ServiceGetListApiCredentialIssuerMetadata$Outbound = {
  credentialIssuer?: string | undefined;
  authorizationServer?: string | undefined;
  credentialEndpoint?: boolean | undefined;
  batchCredentialEndpoint?: number | undefined;
  deferredCredentialEndpoint?: string | undefined;
  credentialsSupported?: boolean | undefined;
};

/** @internal */
export const ServiceGetListApiCredentialIssuerMetadata$outboundSchema:
  z.ZodType<
    ServiceGetListApiCredentialIssuerMetadata$Outbound,
    z.ZodTypeDef,
    ServiceGetListApiCredentialIssuerMetadata
  > = z.object({
    credentialIssuer: z.string().optional(),
    authorizationServer: z.string().optional(),
    credentialEndpoint: z.boolean().optional(),
    batchCredentialEndpoint: z.number().int().optional(),
    deferredCredentialEndpoint: z.string().optional(),
    credentialsSupported: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiCredentialIssuerMetadata$ {
  /** @deprecated use `ServiceGetListApiCredentialIssuerMetadata$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiCredentialIssuerMetadata$inboundSchema;
  /** @deprecated use `ServiceGetListApiCredentialIssuerMetadata$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiCredentialIssuerMetadata$outboundSchema;
  /** @deprecated use `ServiceGetListApiCredentialIssuerMetadata$Outbound` instead. */
  export type Outbound = ServiceGetListApiCredentialIssuerMetadata$Outbound;
}

export function serviceGetListApiCredentialIssuerMetadataToJSON(
  serviceGetListApiCredentialIssuerMetadata:
    ServiceGetListApiCredentialIssuerMetadata,
): string {
  return JSON.stringify(
    ServiceGetListApiCredentialIssuerMetadata$outboundSchema.parse(
      serviceGetListApiCredentialIssuerMetadata,
    ),
  );
}

export function serviceGetListApiCredentialIssuerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  ServiceGetListApiCredentialIssuerMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ServiceGetListApiCredentialIssuerMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ServiceGetListApiCredentialIssuerMetadata' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiService$inboundSchema: z.ZodType<
  ServiceGetListApiService,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  serviceName: z.string().optional(),
  issuer: z.string().optional(),
  description: z.string().optional(),
  apiKey: z.number().int().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  metadata: z.array(z.lazy(() => ServiceGetListApiMetadatum$inboundSchema))
    .optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  authenticationCallbackEndpoint: z.string().optional(),
  authenticationCallbackApiKey: z.string().optional(),
  authenticationCallbackApiSecret: z.string().optional(),
  supportedAcrs: z.array(z.string()).optional(),
  supportedGrantTypes: z.array(
    ServiceGetListApiSupportedGrantType$inboundSchema,
  ).optional(),
  supportedResponseTypes: z.array(
    ServiceGetListApiSupportedResponseType$inboundSchema,
  ).optional(),
  supportedAuthorizationDetailsTypes: z.array(z.string()).optional(),
  supportedServiceProfiles: z.array(
    ServiceGetListApiSupportedServiceProfile$inboundSchema,
  ).optional(),
  errorDescriptionOmitted: z.boolean().optional(),
  errorUriOmitted: z.boolean().optional(),
  authorizationEndpoint: z.string().optional(),
  directAuthorizationEndpointEnabled: z.boolean().optional(),
  supportedUiLocales: z.array(z.string()).optional(),
  supportedDisplays: z.array(ServiceGetListApiSupportedDisplay$inboundSchema)
    .optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  authorizationResponseDuration: z.number().int().optional(),
  tokenEndpoint: z.string().optional(),
  directTokenEndpointEnabled: z.boolean().optional(),
  supportedTokenAuthMethods: z.array(
    ServiceGetListApiSupportedTokenAuthMethod$inboundSchema,
  ).optional(),
  missingClientIdAllowed: z.boolean().optional(),
  revocationEndpoint: z.string().optional(),
  directRevocationEndpointEnabled: z.boolean().optional(),
  supportedRevocationAuthMethods: z.array(
    ServiceGetListApiSupportedRevocationAuthMethod$inboundSchema,
  ).optional(),
  introspectionEndpoint: z.string().optional(),
  directIntrospectionEndpointEnabled: z.boolean().optional(),
  supportedIntrospectionAuthMethods: z.array(
    ServiceGetListApiSupportedIntrospectionAuthMethod$inboundSchema,
  ).optional(),
  pushedAuthReqEndpoint: z.string().optional(),
  pushedAuthReqDuration: z.number().int().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  traditionalRequestObjectProcessingApplied: z.boolean().optional(),
  mutualTlsValidatePkiCertChain: z.boolean().optional(),
  trustedRootCertificates: z.array(z.string()).optional(),
  mtlsEndpointAliases: z.array(
    z.lazy(() => ServiceGetListApiMtlsEndpointAlias$inboundSchema),
  ).optional(),
  accessTokenType: z.string().optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  accessTokenSignAlg: ServiceGetListApiAccessTokenSignAlg$inboundSchema
    .optional(),
  accessTokenSignatureKeyId: z.string().optional(),
  refreshTokenDuration: z.number().int().optional(),
  refreshTokenDurationKept: z.boolean().optional(),
  refreshTokenDurationReset: z.boolean().optional(),
  refreshTokenKept: z.boolean().optional(),
  supportedScopes: z.array(
    z.lazy(() => ServiceGetListApiSupportedScope$inboundSchema),
  ).optional(),
  scopeRequired: z.boolean().optional(),
  idTokenDuration: z.number().int().optional(),
  allowableClockSkew: z.number().int().optional(),
  supportedClaimTypes: z.array(
    ServiceGetListApiSupportedClaimType$inboundSchema,
  ).optional(),
  supportedClaimLocales: z.array(z.string()).optional(),
  supportedClaims: z.array(z.string()).optional(),
  claimShortcutRestrictive: z.boolean().optional(),
  jwksUri: z.string().optional(),
  directJwksEndpointEnabled: z.boolean().optional(),
  jwks: z.string().optional(),
  idTokenSignatureKeyId: z.string().optional(),
  userInfoSignatureKeyId: z.string().optional(),
  authorizationSignatureKeyId: z.string().optional(),
  userInfoEndpoint: z.string().optional(),
  directUserInfoEndpointEnabled: z.boolean().optional(),
  dynamicRegistrationSupported: z.boolean().optional(),
  registrationEndpoint: z.string().optional(),
  registrationManagementEndpoint: z.string().optional(),
  policyUri: z.string().optional(),
  tosUri: z.string().optional(),
  serviceDocumentation: z.string().optional(),
  backchannelAuthenticationEndpoint: z.string().optional(),
  supportedBackchannelTokenDeliveryModes: z.array(
    ServiceGetListApiSupportedBackchannelTokenDeliveryMode$inboundSchema,
  ).optional(),
  backchannelAuthReqIdDuration: z.number().int().optional(),
  backchannelPollingInterval: z.number().int().optional(),
  backchannelUserCodeParameterSupported: z.boolean().optional(),
  backchannelBindingMessageRequiredInFapi: z.boolean().optional(),
  deviceAuthorizationEndpoint: z.string().optional(),
  deviceVerificationUri: z.string().optional(),
  deviceVerificationUriComplete: z.string().optional(),
  deviceFlowCodeDuration: z.number().int().optional(),
  deviceFlowPollingInterval: z.number().int().optional(),
  userCodeCharset: ServiceGetListApiUserCodeCharset$inboundSchema.optional(),
  userCodeLength: z.number().int().optional(),
  supportedTrustFrameworks: z.array(z.string()).optional(),
  supportedEvidence: z.array(z.string()).optional(),
  supportedIdentityDocuments: z.array(z.string()).optional(),
  supportedVerificationMethods: z.array(z.string()).optional(),
  supportedVerifiedClaims: z.array(z.string()).optional(),
  verifiedClaimsValidationSchemaSet:
    ServiceGetListApiVerifiedClaimsValidationSchemaSet$inboundSchema.optional(),
  attributes: z.array(z.lazy(() => ServiceGetListApiAttribute$inboundSchema))
    .optional(),
  nbfOptional: z.boolean().optional(),
  issSuppressed: z.boolean().optional(),
  supportedCustomClientMetadata: z.array(z.string()).optional(),
  tokenExpirationLinked: z.boolean().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  hsmEnabled: z.boolean().optional(),
  hsks: z.array(z.lazy(() => ServiceGetListApiHsk$inboundSchema)).optional(),
  grantManagementEndpoint: z.string().optional(),
  grantManagementActionRequired: z.boolean().optional(),
  unauthorizedOnClientConfigSupported: z.boolean().optional(),
  dcrScopeUsedAsRequestable: z.boolean().optional(),
  endSessionEndpoint: z.string().optional(),
  loopbackRedirectionUriVariable: z.boolean().optional(),
  requestObjectAudienceChecked: z.boolean().optional(),
  accessTokenForExternalAttachmentEmbedded: z.boolean().optional(),
  authorityHints: z.array(z.string()).optional(),
  federationEnabled: z.boolean().optional(),
  federationJwks: z.string().optional(),
  federationSignatureKeyId: z.string().optional(),
  federationConfigurationDuration: z.number().int().optional(),
  federationRegistrationEndpoint: z.string().optional(),
  organizationName: z.string().optional(),
  predefinedTransformedClaims: z.string().optional(),
  refreshTokenIdempotent: z.boolean().optional(),
  signedJwksUri: z.string().optional(),
  supportedAttachments: z.array(
    ServiceGetListApiSupportedAttachment$inboundSchema,
  ).optional(),
  supportedDigestAlgorithms: z.array(z.string()).optional(),
  supportedDocuments: z.array(z.string()).optional(),
  supportedDocumentsMethods: z.array(z.string()).optional(),
  supportedDocumentsValidationMethods: z.array(z.string()).optional(),
  supportedDocumentsVerificationMethods: z.array(z.string()).optional(),
  supportedElectronicRecords: z.array(z.string()).optional(),
  supportedClientRegistrationTypes: z.array(
    ServiceGetListApiSupportedClientRegistrationType$inboundSchema,
  ).optional(),
  tokenExchangeByIdentifiableClientsOnly: z.boolean().optional(),
  tokenExchangeByConfidentialClientsOnly: z.boolean().optional(),
  tokenExchangeByPermittedClientsOnly: z.boolean().optional(),
  tokenExchangeEncryptedJwtRejected: z.boolean().optional(),
  tokenExchangeUnsignedJwtRejected: z.boolean().optional(),
  jwtGrantByIdentifiableClientsOnly: z.boolean().optional(),
  jwtGrantEncryptedJwtRejected: z.boolean().optional(),
  jwtGrantUnsignedJwtRejected: z.boolean().optional(),
  dcrDuplicateSoftwareIdBlocked: z.boolean().optional(),
  trustAnchors: z.array(
    z.lazy(() => ServiceGetListApiTrustAnchor$inboundSchema),
  ).optional(),
  openidDroppedOnRefreshWithoutOfflineAccess: z.boolean().optional(),
  supportedDocumentsCheckMethods: z.array(z.string()).optional(),
  rsResponseSigned: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonceRequired: z.boolean().optional(),
  verifiableCredentialsEnabled: z.boolean().optional(),
  credentialJwksUri: z.string().optional(),
  credentialOfferDuration: z.number().int().optional(),
  dpopNonceDuration: z.number().int().optional(),
  preAuthorizedGrantAnonymousAccessSupported: z.boolean().optional(),
  credentialTransactionDuration: z.number().int().optional(),
  introspectionSignatureKeyId: z.string().optional(),
  resourceSignatureKeyId: z.string().optional(),
  userPinLength: z.number().int().optional(),
  supportedPromptValues: z.array(
    ServiceGetListApiSupportedPromptValue$inboundSchema,
  ).optional(),
  idTokenReissuable: z.boolean().optional(),
  credentialJwks: z.string().optional(),
  fapiModes: z.array(ServiceGetListApiFapiMode$inboundSchema).optional(),
  credentialDuration: z.number().int().optional(),
  credentialIssuerMetadata: z.lazy(() =>
    ServiceGetListApiCredentialIssuerMetadata$inboundSchema
  ).optional(),
  idTokenAudType: z.string().optional(),
});

/** @internal */
export type ServiceGetListApiService$Outbound = {
  number?: number | undefined;
  serviceName?: string | undefined;
  issuer?: string | undefined;
  description?: string | undefined;
  apiKey?: number | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  metadata?: Array<ServiceGetListApiMetadatum$Outbound> | undefined;
  createdAt?: number | undefined;
  modifiedAt?: number | undefined;
  authenticationCallbackEndpoint?: string | undefined;
  authenticationCallbackApiKey?: string | undefined;
  authenticationCallbackApiSecret?: string | undefined;
  supportedAcrs?: Array<string> | undefined;
  supportedGrantTypes?: Array<string> | undefined;
  supportedResponseTypes?: Array<string> | undefined;
  supportedAuthorizationDetailsTypes?: Array<string> | undefined;
  supportedServiceProfiles?: Array<string> | undefined;
  errorDescriptionOmitted?: boolean | undefined;
  errorUriOmitted?: boolean | undefined;
  authorizationEndpoint?: string | undefined;
  directAuthorizationEndpointEnabled?: boolean | undefined;
  supportedUiLocales?: Array<string> | undefined;
  supportedDisplays?: Array<string> | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  authorizationResponseDuration?: number | undefined;
  tokenEndpoint?: string | undefined;
  directTokenEndpointEnabled?: boolean | undefined;
  supportedTokenAuthMethods?: Array<string> | undefined;
  missingClientIdAllowed?: boolean | undefined;
  revocationEndpoint?: string | undefined;
  directRevocationEndpointEnabled?: boolean | undefined;
  supportedRevocationAuthMethods?: Array<string> | undefined;
  introspectionEndpoint?: string | undefined;
  directIntrospectionEndpointEnabled?: boolean | undefined;
  supportedIntrospectionAuthMethods?: Array<string> | undefined;
  pushedAuthReqEndpoint?: string | undefined;
  pushedAuthReqDuration?: number | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  traditionalRequestObjectProcessingApplied?: boolean | undefined;
  mutualTlsValidatePkiCertChain?: boolean | undefined;
  trustedRootCertificates?: Array<string> | undefined;
  mtlsEndpointAliases?:
    | Array<ServiceGetListApiMtlsEndpointAlias$Outbound>
    | undefined;
  accessTokenType?: string | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  accessTokenSignAlg?: string | undefined;
  accessTokenSignatureKeyId?: string | undefined;
  refreshTokenDuration?: number | undefined;
  refreshTokenDurationKept?: boolean | undefined;
  refreshTokenDurationReset?: boolean | undefined;
  refreshTokenKept?: boolean | undefined;
  supportedScopes?: Array<ServiceGetListApiSupportedScope$Outbound> | undefined;
  scopeRequired?: boolean | undefined;
  idTokenDuration?: number | undefined;
  allowableClockSkew?: number | undefined;
  supportedClaimTypes?: Array<string> | undefined;
  supportedClaimLocales?: Array<string> | undefined;
  supportedClaims?: Array<string> | undefined;
  claimShortcutRestrictive?: boolean | undefined;
  jwksUri?: string | undefined;
  directJwksEndpointEnabled?: boolean | undefined;
  jwks?: string | undefined;
  idTokenSignatureKeyId?: string | undefined;
  userInfoSignatureKeyId?: string | undefined;
  authorizationSignatureKeyId?: string | undefined;
  userInfoEndpoint?: string | undefined;
  directUserInfoEndpointEnabled?: boolean | undefined;
  dynamicRegistrationSupported?: boolean | undefined;
  registrationEndpoint?: string | undefined;
  registrationManagementEndpoint?: string | undefined;
  policyUri?: string | undefined;
  tosUri?: string | undefined;
  serviceDocumentation?: string | undefined;
  backchannelAuthenticationEndpoint?: string | undefined;
  supportedBackchannelTokenDeliveryModes?: Array<string> | undefined;
  backchannelAuthReqIdDuration?: number | undefined;
  backchannelPollingInterval?: number | undefined;
  backchannelUserCodeParameterSupported?: boolean | undefined;
  backchannelBindingMessageRequiredInFapi?: boolean | undefined;
  deviceAuthorizationEndpoint?: string | undefined;
  deviceVerificationUri?: string | undefined;
  deviceVerificationUriComplete?: string | undefined;
  deviceFlowCodeDuration?: number | undefined;
  deviceFlowPollingInterval?: number | undefined;
  userCodeCharset?: string | undefined;
  userCodeLength?: number | undefined;
  supportedTrustFrameworks?: Array<string> | undefined;
  supportedEvidence?: Array<string> | undefined;
  supportedIdentityDocuments?: Array<string> | undefined;
  supportedVerificationMethods?: Array<string> | undefined;
  supportedVerifiedClaims?: Array<string> | undefined;
  verifiedClaimsValidationSchemaSet?: string | undefined;
  attributes?: Array<ServiceGetListApiAttribute$Outbound> | undefined;
  nbfOptional?: boolean | undefined;
  issSuppressed?: boolean | undefined;
  supportedCustomClientMetadata?: Array<string> | undefined;
  tokenExpirationLinked?: boolean | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  hsmEnabled?: boolean | undefined;
  hsks?: Array<ServiceGetListApiHsk$Outbound> | undefined;
  grantManagementEndpoint?: string | undefined;
  grantManagementActionRequired?: boolean | undefined;
  unauthorizedOnClientConfigSupported?: boolean | undefined;
  dcrScopeUsedAsRequestable?: boolean | undefined;
  endSessionEndpoint?: string | undefined;
  loopbackRedirectionUriVariable?: boolean | undefined;
  requestObjectAudienceChecked?: boolean | undefined;
  accessTokenForExternalAttachmentEmbedded?: boolean | undefined;
  authorityHints?: Array<string> | undefined;
  federationEnabled?: boolean | undefined;
  federationJwks?: string | undefined;
  federationSignatureKeyId?: string | undefined;
  federationConfigurationDuration?: number | undefined;
  federationRegistrationEndpoint?: string | undefined;
  organizationName?: string | undefined;
  predefinedTransformedClaims?: string | undefined;
  refreshTokenIdempotent?: boolean | undefined;
  signedJwksUri?: string | undefined;
  supportedAttachments?: Array<string> | undefined;
  supportedDigestAlgorithms?: Array<string> | undefined;
  supportedDocuments?: Array<string> | undefined;
  supportedDocumentsMethods?: Array<string> | undefined;
  supportedDocumentsValidationMethods?: Array<string> | undefined;
  supportedDocumentsVerificationMethods?: Array<string> | undefined;
  supportedElectronicRecords?: Array<string> | undefined;
  supportedClientRegistrationTypes?: Array<string> | undefined;
  tokenExchangeByIdentifiableClientsOnly?: boolean | undefined;
  tokenExchangeByConfidentialClientsOnly?: boolean | undefined;
  tokenExchangeByPermittedClientsOnly?: boolean | undefined;
  tokenExchangeEncryptedJwtRejected?: boolean | undefined;
  tokenExchangeUnsignedJwtRejected?: boolean | undefined;
  jwtGrantByIdentifiableClientsOnly?: boolean | undefined;
  jwtGrantEncryptedJwtRejected?: boolean | undefined;
  jwtGrantUnsignedJwtRejected?: boolean | undefined;
  dcrDuplicateSoftwareIdBlocked?: boolean | undefined;
  trustAnchors?: Array<ServiceGetListApiTrustAnchor$Outbound> | undefined;
  openidDroppedOnRefreshWithoutOfflineAccess?: boolean | undefined;
  supportedDocumentsCheckMethods?: Array<string> | undefined;
  rsResponseSigned?: boolean | undefined;
  cnonceDuration?: number | undefined;
  dpopNonceRequired?: boolean | undefined;
  verifiableCredentialsEnabled?: boolean | undefined;
  credentialJwksUri?: string | undefined;
  credentialOfferDuration?: number | undefined;
  dpopNonceDuration?: number | undefined;
  preAuthorizedGrantAnonymousAccessSupported?: boolean | undefined;
  credentialTransactionDuration?: number | undefined;
  introspectionSignatureKeyId?: string | undefined;
  resourceSignatureKeyId?: string | undefined;
  userPinLength?: number | undefined;
  supportedPromptValues?: Array<string> | undefined;
  idTokenReissuable?: boolean | undefined;
  credentialJwks?: string | undefined;
  fapiModes?: Array<string> | undefined;
  credentialDuration?: number | undefined;
  credentialIssuerMetadata?:
    | ServiceGetListApiCredentialIssuerMetadata$Outbound
    | undefined;
  idTokenAudType?: string | undefined;
};

/** @internal */
export const ServiceGetListApiService$outboundSchema: z.ZodType<
  ServiceGetListApiService$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiService
> = z.object({
  number: z.number().int().optional(),
  serviceName: z.string().optional(),
  issuer: z.string().optional(),
  description: z.string().optional(),
  apiKey: z.number().int().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  metadata: z.array(z.lazy(() => ServiceGetListApiMetadatum$outboundSchema))
    .optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  authenticationCallbackEndpoint: z.string().optional(),
  authenticationCallbackApiKey: z.string().optional(),
  authenticationCallbackApiSecret: z.string().optional(),
  supportedAcrs: z.array(z.string()).optional(),
  supportedGrantTypes: z.array(
    ServiceGetListApiSupportedGrantType$outboundSchema,
  ).optional(),
  supportedResponseTypes: z.array(
    ServiceGetListApiSupportedResponseType$outboundSchema,
  ).optional(),
  supportedAuthorizationDetailsTypes: z.array(z.string()).optional(),
  supportedServiceProfiles: z.array(
    ServiceGetListApiSupportedServiceProfile$outboundSchema,
  ).optional(),
  errorDescriptionOmitted: z.boolean().optional(),
  errorUriOmitted: z.boolean().optional(),
  authorizationEndpoint: z.string().optional(),
  directAuthorizationEndpointEnabled: z.boolean().optional(),
  supportedUiLocales: z.array(z.string()).optional(),
  supportedDisplays: z.array(ServiceGetListApiSupportedDisplay$outboundSchema)
    .optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  authorizationResponseDuration: z.number().int().optional(),
  tokenEndpoint: z.string().optional(),
  directTokenEndpointEnabled: z.boolean().optional(),
  supportedTokenAuthMethods: z.array(
    ServiceGetListApiSupportedTokenAuthMethod$outboundSchema,
  ).optional(),
  missingClientIdAllowed: z.boolean().optional(),
  revocationEndpoint: z.string().optional(),
  directRevocationEndpointEnabled: z.boolean().optional(),
  supportedRevocationAuthMethods: z.array(
    ServiceGetListApiSupportedRevocationAuthMethod$outboundSchema,
  ).optional(),
  introspectionEndpoint: z.string().optional(),
  directIntrospectionEndpointEnabled: z.boolean().optional(),
  supportedIntrospectionAuthMethods: z.array(
    ServiceGetListApiSupportedIntrospectionAuthMethod$outboundSchema,
  ).optional(),
  pushedAuthReqEndpoint: z.string().optional(),
  pushedAuthReqDuration: z.number().int().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  traditionalRequestObjectProcessingApplied: z.boolean().optional(),
  mutualTlsValidatePkiCertChain: z.boolean().optional(),
  trustedRootCertificates: z.array(z.string()).optional(),
  mtlsEndpointAliases: z.array(
    z.lazy(() => ServiceGetListApiMtlsEndpointAlias$outboundSchema),
  ).optional(),
  accessTokenType: z.string().optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  accessTokenSignAlg: ServiceGetListApiAccessTokenSignAlg$outboundSchema
    .optional(),
  accessTokenSignatureKeyId: z.string().optional(),
  refreshTokenDuration: z.number().int().optional(),
  refreshTokenDurationKept: z.boolean().optional(),
  refreshTokenDurationReset: z.boolean().optional(),
  refreshTokenKept: z.boolean().optional(),
  supportedScopes: z.array(
    z.lazy(() => ServiceGetListApiSupportedScope$outboundSchema),
  ).optional(),
  scopeRequired: z.boolean().optional(),
  idTokenDuration: z.number().int().optional(),
  allowableClockSkew: z.number().int().optional(),
  supportedClaimTypes: z.array(
    ServiceGetListApiSupportedClaimType$outboundSchema,
  ).optional(),
  supportedClaimLocales: z.array(z.string()).optional(),
  supportedClaims: z.array(z.string()).optional(),
  claimShortcutRestrictive: z.boolean().optional(),
  jwksUri: z.string().optional(),
  directJwksEndpointEnabled: z.boolean().optional(),
  jwks: z.string().optional(),
  idTokenSignatureKeyId: z.string().optional(),
  userInfoSignatureKeyId: z.string().optional(),
  authorizationSignatureKeyId: z.string().optional(),
  userInfoEndpoint: z.string().optional(),
  directUserInfoEndpointEnabled: z.boolean().optional(),
  dynamicRegistrationSupported: z.boolean().optional(),
  registrationEndpoint: z.string().optional(),
  registrationManagementEndpoint: z.string().optional(),
  policyUri: z.string().optional(),
  tosUri: z.string().optional(),
  serviceDocumentation: z.string().optional(),
  backchannelAuthenticationEndpoint: z.string().optional(),
  supportedBackchannelTokenDeliveryModes: z.array(
    ServiceGetListApiSupportedBackchannelTokenDeliveryMode$outboundSchema,
  ).optional(),
  backchannelAuthReqIdDuration: z.number().int().optional(),
  backchannelPollingInterval: z.number().int().optional(),
  backchannelUserCodeParameterSupported: z.boolean().optional(),
  backchannelBindingMessageRequiredInFapi: z.boolean().optional(),
  deviceAuthorizationEndpoint: z.string().optional(),
  deviceVerificationUri: z.string().optional(),
  deviceVerificationUriComplete: z.string().optional(),
  deviceFlowCodeDuration: z.number().int().optional(),
  deviceFlowPollingInterval: z.number().int().optional(),
  userCodeCharset: ServiceGetListApiUserCodeCharset$outboundSchema.optional(),
  userCodeLength: z.number().int().optional(),
  supportedTrustFrameworks: z.array(z.string()).optional(),
  supportedEvidence: z.array(z.string()).optional(),
  supportedIdentityDocuments: z.array(z.string()).optional(),
  supportedVerificationMethods: z.array(z.string()).optional(),
  supportedVerifiedClaims: z.array(z.string()).optional(),
  verifiedClaimsValidationSchemaSet:
    ServiceGetListApiVerifiedClaimsValidationSchemaSet$outboundSchema
      .optional(),
  attributes: z.array(z.lazy(() => ServiceGetListApiAttribute$outboundSchema))
    .optional(),
  nbfOptional: z.boolean().optional(),
  issSuppressed: z.boolean().optional(),
  supportedCustomClientMetadata: z.array(z.string()).optional(),
  tokenExpirationLinked: z.boolean().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  hsmEnabled: z.boolean().optional(),
  hsks: z.array(z.lazy(() => ServiceGetListApiHsk$outboundSchema)).optional(),
  grantManagementEndpoint: z.string().optional(),
  grantManagementActionRequired: z.boolean().optional(),
  unauthorizedOnClientConfigSupported: z.boolean().optional(),
  dcrScopeUsedAsRequestable: z.boolean().optional(),
  endSessionEndpoint: z.string().optional(),
  loopbackRedirectionUriVariable: z.boolean().optional(),
  requestObjectAudienceChecked: z.boolean().optional(),
  accessTokenForExternalAttachmentEmbedded: z.boolean().optional(),
  authorityHints: z.array(z.string()).optional(),
  federationEnabled: z.boolean().optional(),
  federationJwks: z.string().optional(),
  federationSignatureKeyId: z.string().optional(),
  federationConfigurationDuration: z.number().int().optional(),
  federationRegistrationEndpoint: z.string().optional(),
  organizationName: z.string().optional(),
  predefinedTransformedClaims: z.string().optional(),
  refreshTokenIdempotent: z.boolean().optional(),
  signedJwksUri: z.string().optional(),
  supportedAttachments: z.array(
    ServiceGetListApiSupportedAttachment$outboundSchema,
  ).optional(),
  supportedDigestAlgorithms: z.array(z.string()).optional(),
  supportedDocuments: z.array(z.string()).optional(),
  supportedDocumentsMethods: z.array(z.string()).optional(),
  supportedDocumentsValidationMethods: z.array(z.string()).optional(),
  supportedDocumentsVerificationMethods: z.array(z.string()).optional(),
  supportedElectronicRecords: z.array(z.string()).optional(),
  supportedClientRegistrationTypes: z.array(
    ServiceGetListApiSupportedClientRegistrationType$outboundSchema,
  ).optional(),
  tokenExchangeByIdentifiableClientsOnly: z.boolean().optional(),
  tokenExchangeByConfidentialClientsOnly: z.boolean().optional(),
  tokenExchangeByPermittedClientsOnly: z.boolean().optional(),
  tokenExchangeEncryptedJwtRejected: z.boolean().optional(),
  tokenExchangeUnsignedJwtRejected: z.boolean().optional(),
  jwtGrantByIdentifiableClientsOnly: z.boolean().optional(),
  jwtGrantEncryptedJwtRejected: z.boolean().optional(),
  jwtGrantUnsignedJwtRejected: z.boolean().optional(),
  dcrDuplicateSoftwareIdBlocked: z.boolean().optional(),
  trustAnchors: z.array(
    z.lazy(() => ServiceGetListApiTrustAnchor$outboundSchema),
  ).optional(),
  openidDroppedOnRefreshWithoutOfflineAccess: z.boolean().optional(),
  supportedDocumentsCheckMethods: z.array(z.string()).optional(),
  rsResponseSigned: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonceRequired: z.boolean().optional(),
  verifiableCredentialsEnabled: z.boolean().optional(),
  credentialJwksUri: z.string().optional(),
  credentialOfferDuration: z.number().int().optional(),
  dpopNonceDuration: z.number().int().optional(),
  preAuthorizedGrantAnonymousAccessSupported: z.boolean().optional(),
  credentialTransactionDuration: z.number().int().optional(),
  introspectionSignatureKeyId: z.string().optional(),
  resourceSignatureKeyId: z.string().optional(),
  userPinLength: z.number().int().optional(),
  supportedPromptValues: z.array(
    ServiceGetListApiSupportedPromptValue$outboundSchema,
  ).optional(),
  idTokenReissuable: z.boolean().optional(),
  credentialJwks: z.string().optional(),
  fapiModes: z.array(ServiceGetListApiFapiMode$outboundSchema).optional(),
  credentialDuration: z.number().int().optional(),
  credentialIssuerMetadata: z.lazy(() =>
    ServiceGetListApiCredentialIssuerMetadata$outboundSchema
  ).optional(),
  idTokenAudType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiService$ {
  /** @deprecated use `ServiceGetListApiService$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiService$inboundSchema;
  /** @deprecated use `ServiceGetListApiService$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiService$outboundSchema;
  /** @deprecated use `ServiceGetListApiService$Outbound` instead. */
  export type Outbound = ServiceGetListApiService$Outbound;
}

export function serviceGetListApiServiceToJSON(
  serviceGetListApiService: ServiceGetListApiService,
): string {
  return JSON.stringify(
    ServiceGetListApiService$outboundSchema.parse(serviceGetListApiService),
  );
}

export function serviceGetListApiServiceFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiService' from JSON`,
  );
}

/** @internal */
export const ServiceGetListApiResponse$inboundSchema: z.ZodType<
  ServiceGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  services: z.array(z.lazy(() => ServiceGetListApiService$inboundSchema))
    .optional(),
});

/** @internal */
export type ServiceGetListApiResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  totalCount?: number | undefined;
  services?: Array<ServiceGetListApiService$Outbound> | undefined;
};

/** @internal */
export const ServiceGetListApiResponse$outboundSchema: z.ZodType<
  ServiceGetListApiResponse$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  services: z.array(z.lazy(() => ServiceGetListApiService$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiResponse$ {
  /** @deprecated use `ServiceGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiResponse$inboundSchema;
  /** @deprecated use `ServiceGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiResponse$outboundSchema;
  /** @deprecated use `ServiceGetListApiResponse$Outbound` instead. */
  export type Outbound = ServiceGetListApiResponse$Outbound;
}

export function serviceGetListApiResponseToJSON(
  serviceGetListApiResponse: ServiceGetListApiResponse,
): string {
  return JSON.stringify(
    ServiceGetListApiResponse$outboundSchema.parse(serviceGetListApiResponse),
  );
}

export function serviceGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetListApiResponse' from JSON`,
  );
}
