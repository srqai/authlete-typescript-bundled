/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BackchannelAuthenticationCompleteApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type BackchannelAuthenticationCompleteApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type BackchannelAuthenticationCompleteApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: BackchannelAuthenticationCompleteApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const BackchannelAuthenticationCompleteApiFormAction = {
  ServerError: "SERVER_ERROR",
  NoAction: "NO_ACTION",
  Notification: "NOTIFICATION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type BackchannelAuthenticationCompleteApiFormAction = ClosedEnum<
  typeof BackchannelAuthenticationCompleteApiFormAction
>;

export const BackchannelAuthenticationCompleteApiFormDeliveryMode = {
  Ping: "PING",
  Poll: "POLL",
  Push: "PUSH",
} as const;
export type BackchannelAuthenticationCompleteApiFormDeliveryMode = ClosedEnum<
  typeof BackchannelAuthenticationCompleteApiFormDeliveryMode
>;

export type BackchannelAuthenticationCompleteApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type BackchannelAuthenticationCompleteApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<BackchannelAuthenticationCompleteApiFormElement> | undefined;
};

export type BackchannelAuthenticationCompleteApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationCompleteApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationCompleteApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: BackchannelAuthenticationCompleteApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the backchannel
   *
   * @remarks
   * authentication request is the client ID alias. `false` if the value is the original
   * numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the backchannel authentication request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  deliveryMode?:
    | BackchannelAuthenticationCompleteApiFormDeliveryMode
    | undefined;
  /**
   * The client notification endpoint to which a notification needs to be sent. This corresponds
   *
   * @remarks
   * to the `client_notification_endpoint` metadata of the client application.
   */
  clientNotificationEndpoint?: string | undefined;
  /**
   * The client notification token which needs to be embedded as a Bearer token in the Authorization
   *
   * @remarks
   * header in the notification. This is the value of the `client_notification_token` request
   * parameter included in the backchannel authentication request.
   */
  clientNotificationToken?: string | undefined;
  /**
   * The newly issued authentication request ID.
   *
   * @remarks
   */
  authReqId?: string | undefined;
  /**
   * The issued access token.
   *
   * @remarks
   */
  accessToken?: string | undefined;
  /**
   * The issued refresh token.
   *
   * @remarks
   */
  refreshToken?: string | undefined;
  /**
   * The issued ID token.
   *
   * @remarks
   */
  idToken?: string | undefined;
  /**
   * The duration of the access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The duration of the refresh token in seconds.
   *
   * @remarks
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The duration of the ID token in seconds.
   *
   * @remarks
   */
  idTokenDuration?: number | undefined;
  /**
   * The issued access token in JWT format.
   *
   * @remarks
   */
  jwtAccessToken?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | BackchannelAuthenticationCompleteApiFormAuthorizationDetails
    | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?:
    | Array<BackchannelAuthenticationCompleteApiFormServiceAttribute>
    | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?:
    | Array<BackchannelAuthenticationCompleteApiFormClientAttribute>
    | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormRequestBody$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormRequestBody$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormRequestBody$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormRequestBody
  > = z.object({
    clientLocked: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormRequestBody$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormRequestBody$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormRequestBody$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequestBody$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormRequestBody$Outbound;
}

export function backchannelAuthenticationCompleteApiFormRequestBodyToJSON(
  backchannelAuthenticationCompleteApiFormRequestBody:
    BackchannelAuthenticationCompleteApiFormRequestBody,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormRequestBody$outboundSchema.parse(
      backchannelAuthenticationCompleteApiFormRequestBody,
    ),
  );
}

export function backchannelAuthenticationCompleteApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormRequest$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    serviceId: z.string(),
    RequestBody: z.lazy(() =>
      BackchannelAuthenticationCompleteApiFormRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: BackchannelAuthenticationCompleteApiFormRequestBody$Outbound;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormRequest$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormRequest$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormRequest
  > = z.object({
    serviceId: z.string(),
    requestBody: z.lazy(() =>
      BackchannelAuthenticationCompleteApiFormRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormRequest$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormRequest$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormRequest$Outbound;
}

export function backchannelAuthenticationCompleteApiFormRequestToJSON(
  backchannelAuthenticationCompleteApiFormRequest:
    BackchannelAuthenticationCompleteApiFormRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormRequest$outboundSchema.parse(
      backchannelAuthenticationCompleteApiFormRequest,
    ),
  );
}

export function backchannelAuthenticationCompleteApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteApiFormAction> = z
    .nativeEnum(BackchannelAuthenticationCompleteApiFormAction);

/** @internal */
export const BackchannelAuthenticationCompleteApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteApiFormAction> =
    BackchannelAuthenticationCompleteApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormAction$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormDeliveryMode$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteApiFormDeliveryMode> =
    z.nativeEnum(BackchannelAuthenticationCompleteApiFormDeliveryMode);

/** @internal */
export const BackchannelAuthenticationCompleteApiFormDeliveryMode$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteApiFormDeliveryMode> =
    BackchannelAuthenticationCompleteApiFormDeliveryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormDeliveryMode$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormDeliveryMode$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormDeliveryMode$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormDeliveryMode$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormDeliveryMode$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormElement$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormElement,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormElement$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormElement$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormElement
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormElement$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormElement$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormElement$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormElement$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormElement$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormElement$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormElement$Outbound;
}

export function backchannelAuthenticationCompleteApiFormElementToJSON(
  backchannelAuthenticationCompleteApiFormElement:
    BackchannelAuthenticationCompleteApiFormElement,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormElement$outboundSchema.parse(
      backchannelAuthenticationCompleteApiFormElement,
    ),
  );
}

export function backchannelAuthenticationCompleteApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormElement,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormElement$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormElement' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() =>
        BackchannelAuthenticationCompleteApiFormElement$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormAuthorizationDetails$Outbound =
  {
    elements?:
      | Array<BackchannelAuthenticationCompleteApiFormElement$Outbound>
      | undefined;
  };

/** @internal */
export const BackchannelAuthenticationCompleteApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() =>
        BackchannelAuthenticationCompleteApiFormElement$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormAuthorizationDetails$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails$Outbound;
}

export function backchannelAuthenticationCompleteApiFormAuthorizationDetailsToJSON(
  backchannelAuthenticationCompleteApiFormAuthorizationDetails:
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormAuthorizationDetails$outboundSchema
      .parse(backchannelAuthenticationCompleteApiFormAuthorizationDetails),
  );
}

export function backchannelAuthenticationCompleteApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormAuthorizationDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormServiceAttribute$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormServiceAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormServiceAttribute$Outbound =
  {
    key?: string | undefined;
    value?: string | undefined;
  };

/** @internal */
export const BackchannelAuthenticationCompleteApiFormServiceAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormServiceAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormServiceAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormServiceAttribute$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormServiceAttribute$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormServiceAttribute$Outbound;
}

export function backchannelAuthenticationCompleteApiFormServiceAttributeToJSON(
  backchannelAuthenticationCompleteApiFormServiceAttribute:
    BackchannelAuthenticationCompleteApiFormServiceAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormServiceAttribute$outboundSchema
      .parse(backchannelAuthenticationCompleteApiFormServiceAttribute),
  );
}

export function backchannelAuthenticationCompleteApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormServiceAttribute$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormClientAttribute$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormClientAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormClientAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormClientAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormClientAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormClientAttribute$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormClientAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormClientAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormClientAttribute$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormClientAttribute$Outbound;
}

export function backchannelAuthenticationCompleteApiFormClientAttributeToJSON(
  backchannelAuthenticationCompleteApiFormClientAttribute:
    BackchannelAuthenticationCompleteApiFormClientAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormClientAttribute$outboundSchema
      .parse(backchannelAuthenticationCompleteApiFormClientAttribute),
  );
}

export function backchannelAuthenticationCompleteApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormClientAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormClientAttribute$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormResponse$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationCompleteApiFormAction$inboundSchema
      .optional(),
    responseContent: z.string().optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasUsed: z.boolean().optional(),
    clientName: z.string().optional(),
    deliveryMode:
      BackchannelAuthenticationCompleteApiFormDeliveryMode$inboundSchema
        .optional(),
    clientNotificationEndpoint: z.string().optional(),
    clientNotificationToken: z.string().optional(),
    authReqId: z.string().optional(),
    accessToken: z.string().optional(),
    refreshToken: z.string().optional(),
    idToken: z.string().optional(),
    accessTokenDuration: z.number().int().optional(),
    refreshTokenDuration: z.number().int().optional(),
    idTokenDuration: z.number().int().optional(),
    jwtAccessToken: z.string().optional(),
    resources: z.array(z.string()).optional(),
    authorizationDetails: z.lazy(() =>
      BackchannelAuthenticationCompleteApiFormAuthorizationDetails$inboundSchema
    ).optional(),
    serviceAttributes: z.array(
      z.lazy(() =>
        BackchannelAuthenticationCompleteApiFormServiceAttribute$inboundSchema
      ),
    ).optional(),
    clientAttributes: z.array(
      z.lazy(() =>
        BackchannelAuthenticationCompleteApiFormClientAttribute$inboundSchema
      ),
    ).optional(),
    grantId: z.string().optional(),
    clientEntityId: z.string().optional(),
    clientEntityIdUsed: z.boolean().optional(),
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  deliveryMode?: string | undefined;
  clientNotificationEndpoint?: string | undefined;
  clientNotificationToken?: string | undefined;
  authReqId?: string | undefined;
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  idToken?: string | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  jwtAccessToken?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | BackchannelAuthenticationCompleteApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<BackchannelAuthenticationCompleteApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<BackchannelAuthenticationCompleteApiFormClientAttribute$Outbound>
    | undefined;
  grantId?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormResponse$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormResponse$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormResponse
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationCompleteApiFormAction$outboundSchema
      .optional(),
    responseContent: z.string().optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasUsed: z.boolean().optional(),
    clientName: z.string().optional(),
    deliveryMode:
      BackchannelAuthenticationCompleteApiFormDeliveryMode$outboundSchema
        .optional(),
    clientNotificationEndpoint: z.string().optional(),
    clientNotificationToken: z.string().optional(),
    authReqId: z.string().optional(),
    accessToken: z.string().optional(),
    refreshToken: z.string().optional(),
    idToken: z.string().optional(),
    accessTokenDuration: z.number().int().optional(),
    refreshTokenDuration: z.number().int().optional(),
    idTokenDuration: z.number().int().optional(),
    jwtAccessToken: z.string().optional(),
    resources: z.array(z.string()).optional(),
    authorizationDetails: z.lazy(() =>
      BackchannelAuthenticationCompleteApiFormAuthorizationDetails$outboundSchema
    ).optional(),
    serviceAttributes: z.array(
      z.lazy(() =>
        BackchannelAuthenticationCompleteApiFormServiceAttribute$outboundSchema
      ),
    ).optional(),
    clientAttributes: z.array(
      z.lazy(() =>
        BackchannelAuthenticationCompleteApiFormClientAttribute$outboundSchema
      ),
    ).optional(),
    grantId: z.string().optional(),
    clientEntityId: z.string().optional(),
    clientEntityIdUsed: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormResponse$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormResponse$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormResponse$Outbound;
}

export function backchannelAuthenticationCompleteApiFormResponseToJSON(
  backchannelAuthenticationCompleteApiFormResponse:
    BackchannelAuthenticationCompleteApiFormResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiFormResponse$outboundSchema.parse(
      backchannelAuthenticationCompleteApiFormResponse,
    ),
  );
}

export function backchannelAuthenticationCompleteApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiFormResponse' from JSON`,
  );
}
