/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type AuthTokenApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthTokenApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthTokenApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidClient: "INVALID_CLIENT",
  BadRequest: "BAD_REQUEST",
  Password: "PASSWORD",
  Ok: "OK",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthTokenApiFormAction = ClosedEnum<typeof AuthTokenApiFormAction>;

export type AuthTokenApiFormProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthTokenApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthTokenApiFormElement> | undefined;
};

export type AuthTokenApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthTokenApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthTokenApiFormRequestedTokenType = {
  UrnIetfParamsOauthTokenTypeJwt: "urn:ietf:params:oauth:token-type:jwt",
  UrnIetfParamsOauthTokenTypeAccessToken:
    "urn:ietf:params:oauth:token-type:access_token",
  UrnIetfParamsOauthTokenTypeRefreshToken:
    "urn:ietf:params:oauth:token-type:refresh_token",
  UrnIetfParamsOauthTokenTypeIdToken:
    "urn:ietf:params:oauth:token-type:id_token",
  UrnIetfParamsOauthTokenTypeSaml1: "urn:ietf:params:oauth:token-type:saml1",
  UrnIetfParamsOauthTokenTypeSaml2: "urn:ietf:params:oauth:token-type:saml2",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthTokenApiFormRequestedTokenType = ClosedEnum<
  typeof AuthTokenApiFormRequestedTokenType
>;

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthTokenApiFormSubjectTokenType = {
  UrnIetfParamsOauthTokenTypeJwt: "urn:ietf:params:oauth:token-type:jwt",
  UrnIetfParamsOauthTokenTypeAccessToken:
    "urn:ietf:params:oauth:token-type:access_token",
  UrnIetfParamsOauthTokenTypeRefreshToken:
    "urn:ietf:params:oauth:token-type:refresh_token",
  UrnIetfParamsOauthTokenTypeIdToken:
    "urn:ietf:params:oauth:token-type:id_token",
  UrnIetfParamsOauthTokenTypeSaml1: "urn:ietf:params:oauth:token-type:saml1",
  UrnIetfParamsOauthTokenTypeSaml2: "urn:ietf:params:oauth:token-type:saml2",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthTokenApiFormSubjectTokenType = ClosedEnum<
  typeof AuthTokenApiFormSubjectTokenType
>;

export type AuthTokenApiFormSubjectTokenInfoProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenApiFormSubjectTokenInfoAuthorizationDetails = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

export type AuthTokenApiFormSubjectTokenInfo = {
  /**
   * The client id.
   */
  clientId?: number | undefined;
  /**
   * The alias of the client.
   */
  clientIdAlias?: string | undefined;
  /**
   * Flag specifying if the alias was used to identify the client
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * the resource owner unique id
   */
  subject?: string | undefined;
  /**
   * The scopes granted on the token
   */
  scopes?: Array<string> | undefined;
  /**
   * time which the token expires.
   */
  expiresAt?: number | undefined;
  /**
   * Extra properties associated with the token
   */
  properties?: Array<AuthTokenApiFormSubjectTokenInfoProperty> | undefined;
  /**
   * The array of the resources of the token.
   */
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenApiFormSubjectTokenInfoAuthorizationDetails
    | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthTokenApiFormActorTokenType = {
  UrnIetfParamsOauthTokenTypeJwt: "urn:ietf:params:oauth:token-type:jwt",
  UrnIetfParamsOauthTokenTypeAccessToken:
    "urn:ietf:params:oauth:token-type:access_token",
  UrnIetfParamsOauthTokenTypeRefreshToken:
    "urn:ietf:params:oauth:token-type:refresh_token",
  UrnIetfParamsOauthTokenTypeIdToken:
    "urn:ietf:params:oauth:token-type:id_token",
  UrnIetfParamsOauthTokenTypeSaml1: "urn:ietf:params:oauth:token-type:saml1",
  UrnIetfParamsOauthTokenTypeSaml2: "urn:ietf:params:oauth:token-type:saml2",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthTokenApiFormActorTokenType = ClosedEnum<
  typeof AuthTokenApiFormActorTokenType
>;

export type AuthTokenApiFormActorTokenInfoProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthTokenApiFormActorTokenInfoAuthorizationDetails = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

export type AuthTokenApiFormActorTokenInfo = {
  /**
   * The client id.
   */
  clientId?: number | undefined;
  /**
   * The alias of the client.
   */
  clientIdAlias?: string | undefined;
  /**
   * Flag specifying if the alias was used to identify the client
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * the resource owner unique id
   */
  subject?: string | undefined;
  /**
   * The scopes granted on the token
   */
  scopes?: Array<string> | undefined;
  /**
   * time which the token expires.
   */
  expiresAt?: number | undefined;
  /**
   * Extra properties associated with the token
   */
  properties?: Array<AuthTokenApiFormActorTokenInfoProperty> | undefined;
  /**
   * The array of the resources of the token.
   */
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenApiFormActorTokenInfoAuthorizationDetails
    | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

export type AuthTokenApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthTokenApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The value of `username` request parameter in the token request.
   *
   * @remarks
   * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
   * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  username?: string | undefined;
  /**
   * The value of `password` request parameter in the token request.
   *
   * @remarks
   * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
   * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  password?: string | undefined;
  /**
   * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
   *
   * @remarks
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  ticket?: string | undefined;
  /**
   * The newly issued access token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued refresh token.
   */
  refreshToken?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued refresh token in seconds.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
   *
   * @remarks
   * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
   */
  idToken?: string | undefined;
  /**
   * The grant type of the token request.
   */
  grantType?: string | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The subject (= resource owner's ID) of the access token.
   *
   * @remarks
   * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
   * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
   * is not associated with any specific end-user.
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   */
  scopes?: Array<string> | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   * This parameter is `null` when no extra property is associated with the issued access token.
   */
  properties?: Array<AuthTokenApiFormProperty> | undefined;
  /**
   * The newly issued access token in JWT format. If the authorization server is configured
   *
   * @remarks
   * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
   * non-null value), a JWT-based access token is issued along with the original random-string
   * one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters in the token request.
   *
   * @remarks
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthTokenApiFormAuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<AuthTokenApiFormServiceAttribute> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<AuthTokenApiFormClientAttribute> | undefined;
  /**
   * The client authentication method that was performed at the token endpoint.
   *
   * @remarks
   */
  clientAuthMethod?: string | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The audiences on the token exchange request
   *
   * @remarks
   */
  audiences?: Array<string> | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  requestedTokenType?: AuthTokenApiFormRequestedTokenType | undefined;
  subjectToken?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  subjectTokenType?: AuthTokenApiFormSubjectTokenType | undefined;
  subjectTokenInfo?: AuthTokenApiFormSubjectTokenInfo | undefined;
  actorToken?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  actorTokenType?: AuthTokenApiFormActorTokenType | undefined;
  actorTokenInfo?: AuthTokenApiFormActorTokenInfo | undefined;
  /**
   * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
   *
   * @remarks
   */
  assertion?: string | undefined;
  /**
   * Indicate whether the previous refresh token that had been kept in the database for a short time was used
   *
   * @remarks
   */
  previousRefreshTokenUsed?: boolean | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * Duration of the `c_nonce` in seconds.
   *
   * @remarks
   */
  cnonceDuration?: number | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
  /**
   * Get the `c_nonce`.
   *
   * @remarks
   */
  cnonce?: string | undefined;
  /**
   * Get the time at which the `c_nonce` expires in milliseconds since
   *
   * @remarks
   * the Unix epoch (1970-01-01).
   */
  cnonceExpiresAt?: number | undefined;
  /**
   * Get the names of the claims that the authorization request (which resulted
   *
   * @remarks
   * in generation of the access token) requested to be embedded in ID tokens.
   */
  requestedIdTokenClaims?: Array<string> | undefined;
  /**
   * Scopes associated with the refresh token.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenApiFormRequestBody$inboundSchema: z.ZodType<
  AuthTokenApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type AuthTokenApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiFormRequestBody$outboundSchema: z.ZodType<
  AuthTokenApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormRequestBody$ {
  /** @deprecated use `AuthTokenApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormRequestBody$inboundSchema;
  /** @deprecated use `AuthTokenApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormRequestBody$outboundSchema;
  /** @deprecated use `AuthTokenApiFormRequestBody$Outbound` instead. */
  export type Outbound = AuthTokenApiFormRequestBody$Outbound;
}

export function authTokenApiFormRequestBodyToJSON(
  authTokenApiFormRequestBody: AuthTokenApiFormRequestBody,
): string {
  return JSON.stringify(
    AuthTokenApiFormRequestBody$outboundSchema.parse(
      authTokenApiFormRequestBody,
    ),
  );
}

export function authTokenApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormRequest$inboundSchema: z.ZodType<
  AuthTokenApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthTokenApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthTokenApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthTokenApiFormRequestBody$Outbound;
};

/** @internal */
export const AuthTokenApiFormRequest$outboundSchema: z.ZodType<
  AuthTokenApiFormRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthTokenApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormRequest$ {
  /** @deprecated use `AuthTokenApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormRequest$inboundSchema;
  /** @deprecated use `AuthTokenApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormRequest$outboundSchema;
  /** @deprecated use `AuthTokenApiFormRequest$Outbound` instead. */
  export type Outbound = AuthTokenApiFormRequest$Outbound;
}

export function authTokenApiFormRequestToJSON(
  authTokenApiFormRequest: AuthTokenApiFormRequest,
): string {
  return JSON.stringify(
    AuthTokenApiFormRequest$outboundSchema.parse(authTokenApiFormRequest),
  );
}

export function authTokenApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormAction
> = z.nativeEnum(AuthTokenApiFormAction);

/** @internal */
export const AuthTokenApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormAction
> = AuthTokenApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormAction$ {
  /** @deprecated use `AuthTokenApiFormAction$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormAction$inboundSchema;
  /** @deprecated use `AuthTokenApiFormAction$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormAction$outboundSchema;
}

/** @internal */
export const AuthTokenApiFormProperty$inboundSchema: z.ZodType<
  AuthTokenApiFormProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenApiFormProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenApiFormProperty$outboundSchema: z.ZodType<
  AuthTokenApiFormProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormProperty$ {
  /** @deprecated use `AuthTokenApiFormProperty$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormProperty$inboundSchema;
  /** @deprecated use `AuthTokenApiFormProperty$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormProperty$outboundSchema;
  /** @deprecated use `AuthTokenApiFormProperty$Outbound` instead. */
  export type Outbound = AuthTokenApiFormProperty$Outbound;
}

export function authTokenApiFormPropertyToJSON(
  authTokenApiFormProperty: AuthTokenApiFormProperty,
): string {
  return JSON.stringify(
    AuthTokenApiFormProperty$outboundSchema.parse(authTokenApiFormProperty),
  );
}

export function authTokenApiFormPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormProperty' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormElement$inboundSchema: z.ZodType<
  AuthTokenApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthTokenApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenApiFormElement$outboundSchema: z.ZodType<
  AuthTokenApiFormElement$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormElement$ {
  /** @deprecated use `AuthTokenApiFormElement$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormElement$inboundSchema;
  /** @deprecated use `AuthTokenApiFormElement$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormElement$outboundSchema;
  /** @deprecated use `AuthTokenApiFormElement$Outbound` instead. */
  export type Outbound = AuthTokenApiFormElement$Outbound;
}

export function authTokenApiFormElementToJSON(
  authTokenApiFormElement: AuthTokenApiFormElement,
): string {
  return JSON.stringify(
    AuthTokenApiFormElement$outboundSchema.parse(authTokenApiFormElement),
  );
}

export function authTokenApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormElement' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormAuthorizationDetails$inboundSchema: z.ZodType<
  AuthTokenApiFormAuthorizationDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  elements: z.array(z.lazy(() => AuthTokenApiFormElement$inboundSchema))
    .optional(),
});

/** @internal */
export type AuthTokenApiFormAuthorizationDetails$Outbound = {
  elements?: Array<AuthTokenApiFormElement$Outbound> | undefined;
};

/** @internal */
export const AuthTokenApiFormAuthorizationDetails$outboundSchema: z.ZodType<
  AuthTokenApiFormAuthorizationDetails$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormAuthorizationDetails
> = z.object({
  elements: z.array(z.lazy(() => AuthTokenApiFormElement$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormAuthorizationDetails$ {
  /** @deprecated use `AuthTokenApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthTokenApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthTokenApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthTokenApiFormAuthorizationDetails$Outbound;
}

export function authTokenApiFormAuthorizationDetailsToJSON(
  authTokenApiFormAuthorizationDetails: AuthTokenApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthTokenApiFormAuthorizationDetails$outboundSchema.parse(
      authTokenApiFormAuthorizationDetails,
    ),
  );
}

export function authTokenApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormAuthorizationDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenApiFormAuthorizationDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormServiceAttribute$inboundSchema: z.ZodType<
  AuthTokenApiFormServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthTokenApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthTokenApiFormServiceAttribute$outboundSchema: z.ZodType<
  AuthTokenApiFormServiceAttribute$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormServiceAttribute$ {
  /** @deprecated use `AuthTokenApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `AuthTokenApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `AuthTokenApiFormServiceAttribute$Outbound` instead. */
  export type Outbound = AuthTokenApiFormServiceAttribute$Outbound;
}

export function authTokenApiFormServiceAttributeToJSON(
  authTokenApiFormServiceAttribute: AuthTokenApiFormServiceAttribute,
): string {
  return JSON.stringify(
    AuthTokenApiFormServiceAttribute$outboundSchema.parse(
      authTokenApiFormServiceAttribute,
    ),
  );
}

export function authTokenApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormServiceAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormServiceAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormClientAttribute$inboundSchema: z.ZodType<
  AuthTokenApiFormClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthTokenApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthTokenApiFormClientAttribute$outboundSchema: z.ZodType<
  AuthTokenApiFormClientAttribute$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormClientAttribute$ {
  /** @deprecated use `AuthTokenApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormClientAttribute$inboundSchema;
  /** @deprecated use `AuthTokenApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormClientAttribute$outboundSchema;
  /** @deprecated use `AuthTokenApiFormClientAttribute$Outbound` instead. */
  export type Outbound = AuthTokenApiFormClientAttribute$Outbound;
}

export function authTokenApiFormClientAttributeToJSON(
  authTokenApiFormClientAttribute: AuthTokenApiFormClientAttribute,
): string {
  return JSON.stringify(
    AuthTokenApiFormClientAttribute$outboundSchema.parse(
      authTokenApiFormClientAttribute,
    ),
  );
}

export function authTokenApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormClientAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormClientAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormRequestedTokenType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormRequestedTokenType
> = z.nativeEnum(AuthTokenApiFormRequestedTokenType);

/** @internal */
export const AuthTokenApiFormRequestedTokenType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormRequestedTokenType
> = AuthTokenApiFormRequestedTokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormRequestedTokenType$ {
  /** @deprecated use `AuthTokenApiFormRequestedTokenType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormRequestedTokenType$inboundSchema;
  /** @deprecated use `AuthTokenApiFormRequestedTokenType$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormRequestedTokenType$outboundSchema;
}

/** @internal */
export const AuthTokenApiFormSubjectTokenType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormSubjectTokenType
> = z.nativeEnum(AuthTokenApiFormSubjectTokenType);

/** @internal */
export const AuthTokenApiFormSubjectTokenType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormSubjectTokenType
> = AuthTokenApiFormSubjectTokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormSubjectTokenType$ {
  /** @deprecated use `AuthTokenApiFormSubjectTokenType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormSubjectTokenType$inboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenType$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormSubjectTokenType$outboundSchema;
}

/** @internal */
export const AuthTokenApiFormSubjectTokenInfoProperty$inboundSchema: z.ZodType<
  AuthTokenApiFormSubjectTokenInfoProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenApiFormSubjectTokenInfoProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenApiFormSubjectTokenInfoProperty$outboundSchema: z.ZodType<
  AuthTokenApiFormSubjectTokenInfoProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormSubjectTokenInfoProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormSubjectTokenInfoProperty$ {
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfoProperty$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenApiFormSubjectTokenInfoProperty$inboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfoProperty$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormSubjectTokenInfoProperty$outboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfoProperty$Outbound` instead. */
  export type Outbound = AuthTokenApiFormSubjectTokenInfoProperty$Outbound;
}

export function authTokenApiFormSubjectTokenInfoPropertyToJSON(
  authTokenApiFormSubjectTokenInfoProperty:
    AuthTokenApiFormSubjectTokenInfoProperty,
): string {
  return JSON.stringify(
    AuthTokenApiFormSubjectTokenInfoProperty$outboundSchema.parse(
      authTokenApiFormSubjectTokenInfoProperty,
    ),
  );
}

export function authTokenApiFormSubjectTokenInfoPropertyFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenApiFormSubjectTokenInfoProperty,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenApiFormSubjectTokenInfoProperty$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenApiFormSubjectTokenInfoProperty' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/** @internal */
export type AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$ {
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$Outbound;
}

export function authTokenApiFormSubjectTokenInfoAuthorizationDetailsToJSON(
  authTokenApiFormSubjectTokenInfoAuthorizationDetails:
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$outboundSchema.parse(
      authTokenApiFormSubjectTokenInfoAuthorizationDetails,
    ),
  );
}

export function authTokenApiFormSubjectTokenInfoAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenApiFormSubjectTokenInfoAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenApiFormSubjectTokenInfoAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormSubjectTokenInfo$inboundSchema: z.ZodType<
  AuthTokenApiFormSubjectTokenInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenApiFormSubjectTokenInfoProperty$inboundSchema),
  ).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$inboundSchema
  ).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type AuthTokenApiFormSubjectTokenInfo$Outbound = {
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  expiresAt?: number | undefined;
  properties?:
    | Array<AuthTokenApiFormSubjectTokenInfoProperty$Outbound>
    | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$Outbound
    | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const AuthTokenApiFormSubjectTokenInfo$outboundSchema: z.ZodType<
  AuthTokenApiFormSubjectTokenInfo$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormSubjectTokenInfo
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenApiFormSubjectTokenInfoProperty$outboundSchema),
  ).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenApiFormSubjectTokenInfoAuthorizationDetails$outboundSchema
  ).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormSubjectTokenInfo$ {
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfo$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormSubjectTokenInfo$inboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfo$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormSubjectTokenInfo$outboundSchema;
  /** @deprecated use `AuthTokenApiFormSubjectTokenInfo$Outbound` instead. */
  export type Outbound = AuthTokenApiFormSubjectTokenInfo$Outbound;
}

export function authTokenApiFormSubjectTokenInfoToJSON(
  authTokenApiFormSubjectTokenInfo: AuthTokenApiFormSubjectTokenInfo,
): string {
  return JSON.stringify(
    AuthTokenApiFormSubjectTokenInfo$outboundSchema.parse(
      authTokenApiFormSubjectTokenInfo,
    ),
  );
}

export function authTokenApiFormSubjectTokenInfoFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormSubjectTokenInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormSubjectTokenInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormSubjectTokenInfo' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormActorTokenType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormActorTokenType
> = z.nativeEnum(AuthTokenApiFormActorTokenType);

/** @internal */
export const AuthTokenApiFormActorTokenType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenApiFormActorTokenType
> = AuthTokenApiFormActorTokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormActorTokenType$ {
  /** @deprecated use `AuthTokenApiFormActorTokenType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormActorTokenType$inboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenType$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormActorTokenType$outboundSchema;
}

/** @internal */
export const AuthTokenApiFormActorTokenInfoProperty$inboundSchema: z.ZodType<
  AuthTokenApiFormActorTokenInfoProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenApiFormActorTokenInfoProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenApiFormActorTokenInfoProperty$outboundSchema: z.ZodType<
  AuthTokenApiFormActorTokenInfoProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormActorTokenInfoProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormActorTokenInfoProperty$ {
  /** @deprecated use `AuthTokenApiFormActorTokenInfoProperty$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenApiFormActorTokenInfoProperty$inboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenInfoProperty$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormActorTokenInfoProperty$outboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenInfoProperty$Outbound` instead. */
  export type Outbound = AuthTokenApiFormActorTokenInfoProperty$Outbound;
}

export function authTokenApiFormActorTokenInfoPropertyToJSON(
  authTokenApiFormActorTokenInfoProperty:
    AuthTokenApiFormActorTokenInfoProperty,
): string {
  return JSON.stringify(
    AuthTokenApiFormActorTokenInfoProperty$outboundSchema.parse(
      authTokenApiFormActorTokenInfoProperty,
    ),
  );
}

export function authTokenApiFormActorTokenInfoPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormActorTokenInfoProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenApiFormActorTokenInfoProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormActorTokenInfoProperty' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormActorTokenInfoAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthTokenApiFormActorTokenInfoAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/** @internal */
export type AuthTokenApiFormActorTokenInfoAuthorizationDetails$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthTokenApiFormActorTokenInfoAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthTokenApiFormActorTokenInfoAuthorizationDetails
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormActorTokenInfoAuthorizationDetails$ {
  /** @deprecated use `AuthTokenApiFormActorTokenInfoAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenInfoAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenInfoAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$Outbound;
}

export function authTokenApiFormActorTokenInfoAuthorizationDetailsToJSON(
  authTokenApiFormActorTokenInfoAuthorizationDetails:
    AuthTokenApiFormActorTokenInfoAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$outboundSchema.parse(
      authTokenApiFormActorTokenInfoAuthorizationDetails,
    ),
  );
}

export function authTokenApiFormActorTokenInfoAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthTokenApiFormActorTokenInfoAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthTokenApiFormActorTokenInfoAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthTokenApiFormActorTokenInfoAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormActorTokenInfo$inboundSchema: z.ZodType<
  AuthTokenApiFormActorTokenInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenApiFormActorTokenInfoProperty$inboundSchema),
  ).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$inboundSchema
  ).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type AuthTokenApiFormActorTokenInfo$Outbound = {
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  expiresAt?: number | undefined;
  properties?:
    | Array<AuthTokenApiFormActorTokenInfoProperty$Outbound>
    | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenApiFormActorTokenInfoAuthorizationDetails$Outbound
    | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const AuthTokenApiFormActorTokenInfo$outboundSchema: z.ZodType<
  AuthTokenApiFormActorTokenInfo$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormActorTokenInfo
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(
    z.lazy(() => AuthTokenApiFormActorTokenInfoProperty$outboundSchema),
  ).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenApiFormActorTokenInfoAuthorizationDetails$outboundSchema
  ).optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormActorTokenInfo$ {
  /** @deprecated use `AuthTokenApiFormActorTokenInfo$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormActorTokenInfo$inboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenInfo$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormActorTokenInfo$outboundSchema;
  /** @deprecated use `AuthTokenApiFormActorTokenInfo$Outbound` instead. */
  export type Outbound = AuthTokenApiFormActorTokenInfo$Outbound;
}

export function authTokenApiFormActorTokenInfoToJSON(
  authTokenApiFormActorTokenInfo: AuthTokenApiFormActorTokenInfo,
): string {
  return JSON.stringify(
    AuthTokenApiFormActorTokenInfo$outboundSchema.parse(
      authTokenApiFormActorTokenInfo,
    ),
  );
}

export function authTokenApiFormActorTokenInfoFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormActorTokenInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormActorTokenInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormActorTokenInfo' from JSON`,
  );
}

/** @internal */
export const AuthTokenApiFormResponse$inboundSchema: z.ZodType<
  AuthTokenApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  ticket: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  grantType: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(z.lazy(() => AuthTokenApiFormProperty$inboundSchema))
    .optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthTokenApiFormServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthTokenApiFormClientAttribute$inboundSchema),
  ).optional(),
  clientAuthMethod: z.string().optional(),
  grantId: z.string().optional(),
  audiences: z.array(z.string()).optional(),
  requestedTokenType: AuthTokenApiFormRequestedTokenType$inboundSchema
    .optional(),
  subjectToken: z.string().optional(),
  subjectTokenType: AuthTokenApiFormSubjectTokenType$inboundSchema.optional(),
  subjectTokenInfo: z.lazy(() => AuthTokenApiFormSubjectTokenInfo$inboundSchema)
    .optional(),
  actorToken: z.string().optional(),
  actorTokenType: AuthTokenApiFormActorTokenType$inboundSchema.optional(),
  actorTokenInfo: z.lazy(() => AuthTokenApiFormActorTokenInfo$inboundSchema)
    .optional(),
  assertion: z.string().optional(),
  previousRefreshTokenUsed: z.boolean().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonce: z.string().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  requestedIdTokenClaims: z.array(z.string()).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuthTokenApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  ticket?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  refreshToken?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idToken?: string | undefined;
  grantType?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<AuthTokenApiFormProperty$Outbound> | undefined;
  jwtAccessToken?: string | undefined;
  resources?: Array<string> | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthTokenApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<AuthTokenApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<AuthTokenApiFormClientAttribute$Outbound>
    | undefined;
  clientAuthMethod?: string | undefined;
  grantId?: string | undefined;
  audiences?: Array<string> | undefined;
  requestedTokenType?: string | undefined;
  subjectToken?: string | undefined;
  subjectTokenType?: string | undefined;
  subjectTokenInfo?: AuthTokenApiFormSubjectTokenInfo$Outbound | undefined;
  actorToken?: string | undefined;
  actorTokenType?: string | undefined;
  actorTokenInfo?: AuthTokenApiFormActorTokenInfo$Outbound | undefined;
  assertion?: string | undefined;
  previousRefreshTokenUsed?: boolean | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  cnonceDuration?: number | undefined;
  dpopNonce?: string | undefined;
  cnonce?: string | undefined;
  cnonceExpiresAt?: number | undefined;
  requestedIdTokenClaims?: Array<string> | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AuthTokenApiFormResponse$outboundSchema: z.ZodType<
  AuthTokenApiFormResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthTokenApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  ticket: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  grantType: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(z.lazy(() => AuthTokenApiFormProperty$outboundSchema))
    .optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthTokenApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthTokenApiFormServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthTokenApiFormClientAttribute$outboundSchema),
  ).optional(),
  clientAuthMethod: z.string().optional(),
  grantId: z.string().optional(),
  audiences: z.array(z.string()).optional(),
  requestedTokenType: AuthTokenApiFormRequestedTokenType$outboundSchema
    .optional(),
  subjectToken: z.string().optional(),
  subjectTokenType: AuthTokenApiFormSubjectTokenType$outboundSchema.optional(),
  subjectTokenInfo: z.lazy(() =>
    AuthTokenApiFormSubjectTokenInfo$outboundSchema
  ).optional(),
  actorToken: z.string().optional(),
  actorTokenType: AuthTokenApiFormActorTokenType$outboundSchema.optional(),
  actorTokenInfo: z.lazy(() => AuthTokenApiFormActorTokenInfo$outboundSchema)
    .optional(),
  assertion: z.string().optional(),
  previousRefreshTokenUsed: z.boolean().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonce: z.string().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  requestedIdTokenClaims: z.array(z.string()).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormResponse$ {
  /** @deprecated use `AuthTokenApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormResponse$inboundSchema;
  /** @deprecated use `AuthTokenApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormResponse$outboundSchema;
  /** @deprecated use `AuthTokenApiFormResponse$Outbound` instead. */
  export type Outbound = AuthTokenApiFormResponse$Outbound;
}

export function authTokenApiFormResponseToJSON(
  authTokenApiFormResponse: AuthTokenApiFormResponse,
): string {
  return JSON.stringify(
    AuthTokenApiFormResponse$outboundSchema.parse(authTokenApiFormResponse),
  );
}

export function authTokenApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenApiFormResponse' from JSON`,
  );
}
