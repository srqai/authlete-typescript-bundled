/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClientGetListApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type ClientGetListApiRequest = {
  /**
   * The developer of client applications. The default value is null. If this parameter is not set
   *
   * @remarks
   * to `null`, client application of the specified developer are returned. Otherwise, all client
   * applications that belong to the service are returned.
   */
  developer?: string | undefined;
  /**
   * Start index (inclusive) of the result set. The default value is 0. Must not be a negative number.
   */
  start?: number | undefined;
  /**
   * End index (exclusive) of the result set. The default value is 5. Must not be a negative number.
   */
  end?: number | undefined;
  /**
   * A service ID.
   */
  serviceId: string;
};

export type ClientGetListApiClientName = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetListApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const ClientGetListApiClientType = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type ClientGetListApiClientType = ClosedEnum<
  typeof ClientGetListApiClientType
>;

/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export const ClientGetListApiApplicationType = {
  Web: "WEB",
  Native: "NATIVE",
} as const;
/**
 * The application type. The value of this property affects the validation steps for a redirect URI.
 *
 * @remarks
 * See the description about `redirectUris` property for more details.
 */
export type ClientGetListApiApplicationType = ClosedEnum<
  typeof ClientGetListApiApplicationType
>;

export type ClientGetListApiLogoUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const ClientGetListApiGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type ClientGetListApiGrantType = ClosedEnum<
  typeof ClientGetListApiGrantType
>;

export const ClientGetListApiResponseType = {
  None: "NONE",
  Code: "CODE",
  Token: "TOKEN",
  IdToken: "ID_TOKEN",
  CodeToken: "CODE_TOKEN",
  CodeIdToken: "CODE_ID_TOKEN",
  IdTokenToken: "ID_TOKEN_TOKEN",
  CodeIdTokenToken: "CODE_ID_TOKEN_TOKEN",
} as const;
export type ClientGetListApiResponseType = ClosedEnum<
  typeof ClientGetListApiResponseType
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetListApiAuthorizationSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetListApiAuthorizationSignAlg = ClosedEnum<
  typeof ClientGetListApiAuthorizationSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetListApiAuthorizationEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetListApiAuthorizationEncryptionAlg = ClosedEnum<
  typeof ClientGetListApiAuthorizationEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetListApiAuthorizationEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetListApiAuthorizationEncryptionEnc = ClosedEnum<
  typeof ClientGetListApiAuthorizationEncryptionEnc
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientGetListApiTokenAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientGetListApiTokenAuthMethod = ClosedEnum<
  typeof ClientGetListApiTokenAuthMethod
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetListApiTokenAuthSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetListApiTokenAuthSignAlg = ClosedEnum<
  typeof ClientGetListApiTokenAuthSignAlg
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetListApiRequestSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetListApiRequestSignAlg = ClosedEnum<
  typeof ClientGetListApiRequestSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetListApiRequestEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetListApiRequestEncryptionAlg = ClosedEnum<
  typeof ClientGetListApiRequestEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetListApiRequestEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetListApiRequestEncryptionEnc = ClosedEnum<
  typeof ClientGetListApiRequestEncryptionEnc
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetListApiIdTokenSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetListApiIdTokenSignAlg = ClosedEnum<
  typeof ClientGetListApiIdTokenSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetListApiIdTokenEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetListApiIdTokenEncryptionAlg = ClosedEnum<
  typeof ClientGetListApiIdTokenEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetListApiIdTokenEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetListApiIdTokenEncryptionEnc = ClosedEnum<
  typeof ClientGetListApiIdTokenEncryptionEnc
>;

/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const ClientGetListApiSubjectType = {
  Public: "PUBLIC",
  Pairwise: "PAIRWISE",
} as const;
/**
 * The subject type that the client application requests. Details about the subject type are described in
 *
 * @remarks
 * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
 *
 * This property corresponds to `subject_type` in
 * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type ClientGetListApiSubjectType = ClosedEnum<
  typeof ClientGetListApiSubjectType
>;

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetListApiUserInfoSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetListApiUserInfoSignAlg = ClosedEnum<
  typeof ClientGetListApiUserInfoSignAlg
>;

/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export const ClientGetListApiUserInfoEncryptionAlg = {
  Rsa15: "RSA1_5",
  RsaOaep: "RSA_OAEP",
  RsaOaep256: "RSA_OAEP_256",
  A128Kw: "A128KW",
  A192Kw: "A192KW",
  A256Kw: "A256KW",
  Dir: "DIR",
  EcdhEs: "ECDH_ES",
  EcdhEsA128Kw: "ECDH_ES_A128KW",
  EcdhEsA192Kw: "ECDH_ES_A192KW",
  EcdhEsA256Kw: "ECDH_ES_A256KW",
  A128Gcmkw: "A128GCMKW",
  A192Gcmkw: "A192GCMKW",
  A256Gcmkw: "A256GCMKW",
  Pbes2Hs256A128Kw: "PBES2_HS256_A128KW",
  Pbes2Hs384A192Kw: "PBES2_HS384_A192KW",
  Pbes2Hs512A256Kw: "PBES2_HS512_A256KW",
} as const;
/**
 * this is the 'alg' header value for encrypted JWT tokens.
 *
 * @remarks
 * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
 * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
 * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
 * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
 *
 * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
 */
export type ClientGetListApiUserInfoEncryptionAlg = ClosedEnum<
  typeof ClientGetListApiUserInfoEncryptionAlg
>;

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const ClientGetListApiUserInfoEncryptionEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type ClientGetListApiUserInfoEncryptionEnc = ClosedEnum<
  typeof ClientGetListApiUserInfoEncryptionEnc
>;

export type ClientGetListApiTosUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetListApiPolicyUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetListApiClientUris = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export const ClientGetListApiBcRequestSignAlg = {
  None: "NONE",
  Hs256: "HS256",
  Hs384: "HS384",
  Hs512: "HS512",
  Rs256: "RS256",
  Rs384: "RS384",
  Rs512: "RS512",
  Es256: "ES256",
  Es384: "ES384",
  Es512: "ES512",
  Ps256: "PS256",
  Ps384: "PS384",
  Ps512: "PS512",
  Es256K: "ES256K",
  EdDSA: "EdDSA",
} as const;
/**
 * The signature algorithm for JWT. This value is represented on 'alg' attribute
 *
 * @remarks
 * of the header of JWT.
 *
 * it's semantics depends upon where is this defined, for instance:
 *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
 *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
 *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
 */
export type ClientGetListApiBcRequestSignAlg = ClosedEnum<
  typeof ClientGetListApiBcRequestSignAlg
>;

export type ClientGetListApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type ClientGetListApiExtension = {
  /**
   * The set of scopes that the client application is allowed to request. This paramter will be one
   *
   * @remarks
   * of the following.
   *
   *   - `null`
   *   - an empty set
   *   - a set with at least one element
   *
   * When the value of this parameter is `null`, it means that the set of scopes that the client
   * application is allowed to request is the set of the scopes that the service supports. When the
   * value of this parameter is an empty set, it means that the client application is not allowed to
   * request any scopes. When the value of this parameter is a set with at least one element, it means
   * that the set is the set of scopes that the client application is allowed to request.
   */
  requestableScopes?: Array<string> | undefined;
  /**
   * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
   *
   * @remarks
   * can define the set of scopes which this client application can request. If `false`, this client
   * application can request any scope which is supported by the authorization server.
   */
  requestableScopesEnabled?: boolean | undefined;
  /**
   * The value of the duration of access tokens per client in seconds. In normal cases, the value of
   *
   * @remarks
   * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
   * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of access tokens issued to the client application.
   *
   * Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
   * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of refresh tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The value of the duration of ID tokens per client in seconds. In normal cases, the value
   *
   * @remarks
   * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
   * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
   * and its value is less than the duration configured by the service, the value is used as the duration
   * of ID tokens issued to the client application.
   *
   * Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
   * too. Authlete chooses the minimum value among the candidates.
   */
  idTokenDuration?: number | undefined;
  /**
   * Get the flag indicating whether the client is explicitly given a
   *
   * @remarks
   * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
   */
  tokenExchangePermitted?: boolean | undefined;
};

/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export const ClientGetListApiClientRegistrationType = {
  Automatic: "AUTOMATIC",
  Explicit: "EXPLICIT",
} as const;
/**
 * Values for the `client_registration_types` RP metadata and the
 *
 * @remarks
 *  `client_registration_types_supported` OP metadata that are defined in
 *  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).
 */
export type ClientGetListApiClientRegistrationType = ClosedEnum<
  typeof ClientGetListApiClientRegistrationType
>;

export const ClientGetListApiFapiMode = {
  Fapi1Advanced: "FAPI1_ADVANCED",
  Fapi1Baseline: "FAPI1_BASELINE",
  Fapi2MessageSigningAuthReq: "FAPI2_MESSAGE_SIGNING_AUTH_REQ",
  Fapi2MessageSigningAuthRes: "FAPI2_MESSAGE_SIGNING_AUTH_RES",
  Fapi2MessageSigningIntrospectionRes:
    "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
  Fapi2Security: "FAPI2_SECURITY",
} as const;
export type ClientGetListApiFapiMode = ClosedEnum<
  typeof ClientGetListApiFapiMode
>;

export const ClientGetListApiResponseMode = {
  Query: "QUERY",
  Fragment: "FRAGMENT",
  FormPost: "FORM_POST",
  Jwt: "JWT",
  QueryJwt: "QUERY_JWT",
  FragmentJwt: "FRAGMENT_JWT",
  FormPostJwt: "FORM_POST_JWT",
} as const;
export type ClientGetListApiResponseMode = ClosedEnum<
  typeof ClientGetListApiResponseMode
>;

export type ClientGetListApiClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The sequential number of the service of the client application. The value of this property is
   *
   * @remarks
   * assigned by Authlete.
   */
  serviceNumber?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<ClientGetListApiClientName> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<ClientGetListApiDescription> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
   *
   * @remarks
   * property is assigned by Authlete.
   *
   * Note that Authlete issues a client secret even to a "public" client application, but the client
   * application should not use the client secret unless it changes its client type to "confidential".
   * That is, a public client application should behave as if it had not been issued a client secret.
   * To be specific, a token request from a public client of Authlete should not come along with a
   * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
   * says as follows.
   *
   * > Confidential clients or other clients issued client credentials MUST authenticate with the
   * authorization server as described in Section 2.3 when making requests to the token endpoint.
   */
  clientSecret?: string | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: ClientGetListApiClientType | undefined;
  /**
   * The application type. The value of this property affects the validation steps for a redirect URI.
   *
   * @remarks
   * See the description about `redirectUris` property for more details.
   */
  applicationType?: ClientGetListApiApplicationType | undefined;
  /**
   * The URL pointing to the logo image of the client application.
   *
   * @remarks
   *
   * This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  logoUri?: string | undefined;
  /**
   * Logo image URLs with language tags. If the client application has different logo images for
   *
   * @remarks
   * different languages, this property can be used to register URLs of the images.
   */
  logoUris?: Array<ClientGetListApiLogoUris> | undefined;
  /**
   * An array of email addresses of people responsible for the client application.
   *
   * @remarks
   *
   * This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
   * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  contacts?: Array<string> | undefined;
  /**
   * The flag to indicate whether this client use TLS client certificate bound access tokens.
   *
   * @remarks
   */
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  /**
   * The flag to indicate whether this client has been registered dynamically.
   *
   * @remarks
   * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  dynamicallyRegistered?: boolean | undefined;
  /**
   * The unique identifier string assigned by the client developer or software publisher used by
   *
   * @remarks
   * registration endpoints to identify the client software to be dynamically registered.
   *
   * This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareId?: string | undefined;
  /**
   * The version identifier string for the client software identified by the software ID.
   *
   * @remarks
   *
   * This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
   * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
   */
  softwareVersion?: string | undefined;
  /**
   * The hash of the registration access token for this client.
   *
   * @remarks
   */
  registrationAccessTokenHash?: string | undefined;
  /**
   * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  createdAt?: number | undefined;
  /**
   * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
   */
  modifiedAt?: number | undefined;
  /**
   * A string array of grant types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  grantTypes?: Array<ClientGetListApiGrantType> | undefined;
  /**
   * A string array of response types which the client application declares that it will restrict itself to using.
   *
   * @remarks
   * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
   * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  responseTypes?: Array<ClientGetListApiResponseType> | undefined;
  /**
   * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
   *
   * @remarks
   * Requirements for a redirect URI are as follows.
   *
   * **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
   *
   * - Must be an absolute URI.
   * - Must not have a fragment component.
   *
   * **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * application_type")
   *
   * - The scheme of the redirect URI used for Implicit Grant by a client application whose application
   * is `web` must be `https`. This is checked at runtime by Authlete.
   * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
   * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
   * - The scheme of the redirect URI used by a client application whose application type is `native`
   * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
   * is `localhost`. This is checked at runtime by Authlete.
   *
   * **Requirements by Authlete**
   *
   * - Must consist of printable ASCII letters only.
   * - Must not exceed 200 letters.
   *
   * Note that Authlete allows the application type to be `null`. In other words, a client application
   * does not have to choose `web` or `native` as its application type.
   * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
   *
   * An authorization request from a client application which has not registered any redirect URI
   * fails unless at least all the following conditions are satisfied.
   *
   * - The client type of the client application is `confidential`.
   * - The value of `response_type` request parameter is `code`.
   * - The authorization request has the `redirect_uri` request parameter.
   * - The value of `scope` request parameter does not contain `openid`.
   *
   * RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
   * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
   * details), but OpenID Connect requires exact match.
   */
  redirectUris?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  authorizationSignAlg?: ClientGetListApiAuthorizationSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  authorizationEncryptionAlg?:
    | ClientGetListApiAuthorizationEncryptionAlg
    | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  authorizationEncryptionEnc?:
    | ClientGetListApiAuthorizationEncryptionEnc
    | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tokenAuthMethod?: ClientGetListApiTokenAuthMethod | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  tokenAuthSignAlg?: ClientGetListApiTokenAuthSignAlg | undefined;
  /**
   * The key ID of a JWK containing a self-signed certificate of this client.
   *
   * @remarks
   */
  selfSignedCertificateKeyId?: string | undefined;
  /**
   * The string representation of the expected subject distinguished name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSubjectDn?: string | undefined;
  /**
   * The string representation of the expected DNS subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanDns?: string | undefined;
  /**
   * The string representation of the expected URI subject alternative name of the certificate this
   *
   * @remarks
   * client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanUri?: string | undefined;
  /**
   * The string representation of the expected IP address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanIp?: string | undefined;
  /**
   * The string representation of the expected email address subject alternative name of the certificate
   *
   * @remarks
   * this client will use in mutual TLS authentication.
   *
   * See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
   * Registration" for details.
   */
  tlsClientAuthSanEmail?: string | undefined;
  /**
   * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
   *
   * @remarks
   * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
   * in "OAuth 2.0 Pushed Authorization Requests".
   */
  parRequired?: boolean | undefined;
  /**
   * The flag to indicate whether authorization requests from this client are always required to
   *
   * @remarks
   * utilize a request object by using either `request` or `request_uri` request parameter.
   *
   * If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
   * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
   * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
   */
  requestObjectRequired?: boolean | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  requestSignAlg?: ClientGetListApiRequestSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  requestEncryptionAlg?: ClientGetListApiRequestEncryptionAlg | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  requestEncryptionEnc?: ClientGetListApiRequestEncryptionEnc | undefined;
  /**
   * An array of URLs each of which points to a request object.
   *
   * @remarks
   *
   * Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
   * This property is used for the pre-registration.
   * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
   */
  requestUris?: Array<string> | undefined;
  /**
   * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
   *
   * @remarks
   *
   * This property corresponds to `default_max_age` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  defaultMaxAge?: number | undefined;
  /**
   * The default ACRs (Authentication Context Class References). This value is used when an authorization
   *
   * @remarks
   * request from the client application has neither `acr_values` request parameter nor `acr` claim
   * in claims request parameter.
   */
  defaultAcrs?: Array<string> | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  idTokenSignAlg?: ClientGetListApiIdTokenSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  idTokenEncryptionAlg?: ClientGetListApiIdTokenEncryptionAlg | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  idTokenEncryptionEnc?: ClientGetListApiIdTokenEncryptionEnc | undefined;
  /**
   * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
   *
   * @remarks
   *
   * This property corresponds to `require_auth_time` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  authTimeRequired?: boolean | undefined;
  /**
   * The subject type that the client application requests. Details about the subject type are described in
   *
   * @remarks
   * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
   *
   * This property corresponds to `subject_type` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  subjectType?: ClientGetListApiSubjectType | undefined;
  /**
   * The value of the sector identifier URI.
   *
   * @remarks
   * This represents the `sector_identifier_uri` client metadata which is defined in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
   */
  sectorIdentifierUri?: string | undefined;
  /**
   * The sector identifier host component as derived from either the `sector_identifier_uri` or the
   *
   * @remarks
   * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
   * are also registered, the value of this property is `null`.
   */
  derivedSectorIdentifier?: string | undefined;
  /**
   * The URL pointing to the JWK Set of the client application.
   *
   * @remarks
   * The content pointed to by the URL is JSON which complies with the format described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
   * and/or signs request objects, it must make available its JWK Set containing public keys for the
   * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
   * Set from the URL as necessary.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwksUri?: string | undefined;
  /**
   * The content of the JWK Set of the client application.
   *
   * @remarks
   * The format is described in
   * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
   * The JWK Set must not include private keys of the client application.
   *
   * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
   * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
   * when `jwksUri` is registered.
   *
   * This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
   * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  jwks?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  userInfoSignAlg?: ClientGetListApiUserInfoSignAlg | undefined;
  /**
   * this is the 'alg' header value for encrypted JWT tokens.
   *
   * @remarks
   * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
   * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
   * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
   * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
   *
   * **Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
   */
  userInfoEncryptionAlg?: ClientGetListApiUserInfoEncryptionAlg | undefined;
  /**
   * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
   *
   * @remarks
   * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
   *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
   *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
   *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
   */
  userInfoEncryptionEnc?: ClientGetListApiUserInfoEncryptionEnc | undefined;
  /**
   * The URL which a third party can use to initiate a login by the client application.
   *
   * @remarks
   *
   * This property corresponds to `initiate_login_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  loginUri?: string | undefined;
  /**
   * The URL pointing to the "Terms Of Service" page.
   *
   * @remarks
   *
   * This property corresponds to `tos_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  tosUri?: string | undefined;
  /**
   * URLs of "Terms Of Service" pages with language tags.
   *
   * @remarks
   *
   * If the client application has different "Terms Of Service" pages for different languages,
   * this property can be used to register the URLs.
   */
  tosUris?: Array<ClientGetListApiTosUris> | undefined;
  /**
   * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
   *
   * @remarks
   *
   * This property corresponds to `policy_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  policyUri?: string | undefined;
  /**
   * URLs of policy pages with language tags.
   *
   * @remarks
   * If the client application has different policy pages for different languages, this property can be used to register the URLs.
   */
  policyUris?: Array<ClientGetListApiPolicyUris> | undefined;
  /**
   * The URL pointing to the home page of the client application.
   *
   * @remarks
   *
   * This property corresponds to `client_uri` in
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientUri?: string | undefined;
  /**
   * Home page URLs with language tags.
   *
   * @remarks
   * If the client application has different home pages for different languages, this property can
   * be used to register the URLs.
   */
  clientUris?: Array<ClientGetListApiClientUris> | undefined;
  /**
   * The backchannel token delivery mode.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_token_delivery_mode` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcDeliveryMode?: string | undefined;
  /**
   * The backchannel client notification endpoint.
   *
   * @remarks
   *
   * This property corresponds to the `backchannel_client_notification_endpoint` metadata.
   * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
   * Backchannel Authentication)".
   */
  bcNotificationEndpoint?: string | undefined;
  /**
   * The signature algorithm for JWT. This value is represented on 'alg' attribute
   *
   * @remarks
   * of the header of JWT.
   *
   * it's semantics depends upon where is this defined, for instance:
   *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
   *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
   *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
   */
  bcRequestSignAlg?: ClientGetListApiBcRequestSignAlg | undefined;
  /**
   * The boolean flag to indicate whether a user code is required when this client makes a backchannel
   *
   * @remarks
   * authentication request.
   *
   * This property corresponds to the `backchannel_user_code_parameter` metadata.
   */
  bcUserCodeRequired?: boolean | undefined;
  /**
   * The attributes of this client.
   *
   * @remarks
   */
  attributes?: Array<ClientGetListApiAttribute> | undefined;
  extension?: ClientGetListApiExtension | undefined;
  /**
   * The authorization details types that this client may use as values of the `type` field in
   *
   * @remarks
   * `authorization_details`.
   *
   * This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
   * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
   *
   * Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
   * to align with the change made by the 5th draft of the RAR specification.
   */
  authorizationDetailsTypes?: Array<string> | undefined;
  /**
   * The custom client metadata in JSON format.
   *
   * @remarks
   *
   * Standard specifications define client metadata as necessary. The following are such examples.
   *
   * * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
   * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
   * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
   * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
   * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
   * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
   * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
   * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
   *
   * Standard client metadata included in Client Registration Request and Client Update Request (cf.
   * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
   * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
   * to corresponding properties of the client application. For example, the value of the `client_name`
   * client metadata in Client Registration/Update Request is set to the clientName property. On the
   * other hand, unrecognized client metadata are discarded.
   *
   * By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
   * of Service, Authlete can recognize them and stores their values into the database. The stored
   * custom client metadata values can be referenced by this property.
   */
  customMetadata?: string | undefined;
  /**
   * The flag indicating whether encryption of request object is required when the request object
   *
   * @remarks
   * is passed through the front channel.
   *
   * This flag does not affect the processing of request objects at the Pushed Authorization Request
   * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
   * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
   *
   * This flag does not indicate whether a request object is always required. There is a different
   * flag, `requestObjectRequired`, for the purpose.
   *
   * Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
   * flag of the service is `true`.
   */
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_alg
   * >
   * > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
   *   since this signals to the OP that a client_secret value needs to be returned from which the
   *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
   *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
   *   is present. If both signing and encryption are requested, the Request Object will be signed
   *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
   *   is that the RP is not declaring whether it might encrypt any Request Objects.
   *
   * The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
   * Request Objects, even when this parameter is present."
   *
   * The property that represents the client metadata is `requestEncryptionAlg`. See the description
   * of `requestEncryptionAlg` for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  /**
   * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
   *
   * @remarks
   * client metadata.
   *
   * The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
   * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
   *
   * > request_object_encryption_enc
   * >
   * > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
   *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
   *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
   *   MUST also be provided.
   *
   * The property that represents the client metadata is `requestEncryptionEnc`. See the description
   * of `requestEncryptionEnc`  for details.
   *
   * Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
   * flag of the service is `true`.
   */
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  /**
   * The digest algorithm that this client requests the server to use
   *
   * @remarks
   * when it computes digest values of <a href=
   * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
   * >external attachments</a>, which may be referenced from within ID tokens
   * or userinfo responses (or any place that can have the `verified_claims` claim).
   *
   * Possible values are listed in the <a href=
   * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
   * >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
   * but the server does not necessarily support all the values there. When
   * this property is omitted, `sha-256` is used as the default algorithm.
   *
   * This property corresponds to the `digest_algorithm` client metadata
   * which was defined by the third implementer's draft of
   * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
   */
  digestAlgorithm?: string | undefined;
  /**
   * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
   *
   * @remarks
   *
   * Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
   *
   * Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
   */
  singleAccessTokenPerSubject?: boolean | undefined;
  /**
   * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
   *
   * @remarks
   *
   * If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
   *
   * See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
   */
  pkceRequired?: boolean | undefined;
  /**
   * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
   *
   * @remarks
   *
   * If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
   * whenever it includes the `code_challenge` request parameter.
   * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
   */
  pkceS256Required?: boolean | undefined;
  /**
   * If the DPoP is required for this client
   *
   * @remarks
   */
  dpopRequired?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "automatic" client registration of OIDC Federation.
   */
  automaticallyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this client was registered by the
   *
   * @remarks
   * "explicit" client registration of OIDC Federation.
   */
  explicitlyRegistered?: boolean | undefined;
  /**
   * The flag indicating whether this service signs responses from the resource server.
   *
   * @remarks
   */
  rsRequestSigned?: boolean | undefined;
  /**
   * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
   *
   * @remarks
   */
  rsSignedRequestKeyId?: string | undefined;
  /**
   * The client registration types that the client has declared it may use.
   *
   * @remarks
   */
  clientRegistrationTypes?:
    | Array<ClientGetListApiClientRegistrationType>
    | undefined;
  /**
   * The human-readable name representing the organization that manages this client. This property corresponds
   *
   * @remarks
   * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
   */
  organizationName?: string | undefined;
  /**
   * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
   *
   * @remarks
   * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
   */
  signedJwksUri?: string | undefined;
  /**
   * the entity ID of this client.
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
   *
   * @remarks
   * the mechanism defined in OpenID Connect Federation 1.0
   */
  trustAnchorId?: string | undefined;
  /**
   * The trust chain that was used when this client was registered or updated by the mechanism defined in
   *
   * @remarks
   * OpenID Connect Federation 1.0
   */
  trustChain?: Array<string> | undefined;
  /**
   * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
   *
   * @remarks
   * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
   */
  trustChainExpiresAt?: number | undefined;
  /**
   * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
   *
   * @remarks
   */
  trustChainUpdatedAt?: number | undefined;
  /**
   * The flag which indicates whether this client is locked.
   *
   * @remarks
   */
  locked?: boolean | undefined;
  /**
   * The URL of the credential offer endpoint at which this client
   *
   * @remarks
   * (wallet) receives a credential offer from the credential issuer.
   */
  credentialOfferEndpoint?: string | undefined;
  /**
   * The FAPI modes for this client.
   *
   * @remarks
   *
   * When the value of this property is not `null`, Authlete always processes requests from this client
   * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
   * is supported by the service, and the FAPI modes for the service are set to `null`.
   *
   * For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
   * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
   * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
   * the service, and the FAPI modes for the service are set to `null`.
   */
  fapiModes?: Array<ClientGetListApiFapiMode> | undefined;
  /**
   * The response modes that this client may use.
   */
  responseModes?: Array<ClientGetListApiResponseMode> | undefined;
  /**
   * True if credential responses to this client must be always encrypted.
   */
  credentialResponseEncryptionRequired?: boolean | undefined;
};

export type ClientGetListApiResponse = {
  /**
   * Start index (inclusive) of the result set of the query.
   *
   * @remarks
   */
  start?: number | undefined;
  /**
   * End index (exclusive) of the result set of the query.
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * Total number of clients that belong to the service. This doesn't mean the number of clients
   *
   * @remarks
   * contained in the response.
   */
  totalCount?: number | undefined;
  /**
   * An array of clients.
   *
   * @remarks
   */
  clients?: Array<ClientGetListApiClient> | undefined;
};

/** @internal */
export const ClientGetListApiRequest$inboundSchema: z.ZodType<
  ClientGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  serviceId: z.string(),
});

/** @internal */
export type ClientGetListApiRequest$Outbound = {
  developer?: string | undefined;
  start?: number | undefined;
  end?: number | undefined;
  serviceId: string;
};

/** @internal */
export const ClientGetListApiRequest$outboundSchema: z.ZodType<
  ClientGetListApiRequest$Outbound,
  z.ZodTypeDef,
  ClientGetListApiRequest
> = z.object({
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  serviceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiRequest$ {
  /** @deprecated use `ClientGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiRequest$inboundSchema;
  /** @deprecated use `ClientGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiRequest$outboundSchema;
  /** @deprecated use `ClientGetListApiRequest$Outbound` instead. */
  export type Outbound = ClientGetListApiRequest$Outbound;
}

export function clientGetListApiRequestToJSON(
  clientGetListApiRequest: ClientGetListApiRequest,
): string {
  return JSON.stringify(
    ClientGetListApiRequest$outboundSchema.parse(clientGetListApiRequest),
  );
}

export function clientGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiClientName$inboundSchema: z.ZodType<
  ClientGetListApiClientName,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiClientName$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiClientName$outboundSchema: z.ZodType<
  ClientGetListApiClientName$Outbound,
  z.ZodTypeDef,
  ClientGetListApiClientName
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiClientName$ {
  /** @deprecated use `ClientGetListApiClientName$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiClientName$inboundSchema;
  /** @deprecated use `ClientGetListApiClientName$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiClientName$outboundSchema;
  /** @deprecated use `ClientGetListApiClientName$Outbound` instead. */
  export type Outbound = ClientGetListApiClientName$Outbound;
}

export function clientGetListApiClientNameToJSON(
  clientGetListApiClientName: ClientGetListApiClientName,
): string {
  return JSON.stringify(
    ClientGetListApiClientName$outboundSchema.parse(clientGetListApiClientName),
  );
}

export function clientGetListApiClientNameFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiClientName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiClientName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiClientName' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiDescription$inboundSchema: z.ZodType<
  ClientGetListApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiDescription$outboundSchema: z.ZodType<
  ClientGetListApiDescription$Outbound,
  z.ZodTypeDef,
  ClientGetListApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiDescription$ {
  /** @deprecated use `ClientGetListApiDescription$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiDescription$inboundSchema;
  /** @deprecated use `ClientGetListApiDescription$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiDescription$outboundSchema;
  /** @deprecated use `ClientGetListApiDescription$Outbound` instead. */
  export type Outbound = ClientGetListApiDescription$Outbound;
}

export function clientGetListApiDescriptionToJSON(
  clientGetListApiDescription: ClientGetListApiDescription,
): string {
  return JSON.stringify(
    ClientGetListApiDescription$outboundSchema.parse(
      clientGetListApiDescription,
    ),
  );
}

export function clientGetListApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiDescription' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiClientType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiClientType
> = z.nativeEnum(ClientGetListApiClientType);

/** @internal */
export const ClientGetListApiClientType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiClientType
> = ClientGetListApiClientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiClientType$ {
  /** @deprecated use `ClientGetListApiClientType$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiClientType$inboundSchema;
  /** @deprecated use `ClientGetListApiClientType$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiClientType$outboundSchema;
}

/** @internal */
export const ClientGetListApiApplicationType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiApplicationType
> = z.nativeEnum(ClientGetListApiApplicationType);

/** @internal */
export const ClientGetListApiApplicationType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiApplicationType
> = ClientGetListApiApplicationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiApplicationType$ {
  /** @deprecated use `ClientGetListApiApplicationType$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiApplicationType$inboundSchema;
  /** @deprecated use `ClientGetListApiApplicationType$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiApplicationType$outboundSchema;
}

/** @internal */
export const ClientGetListApiLogoUris$inboundSchema: z.ZodType<
  ClientGetListApiLogoUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiLogoUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiLogoUris$outboundSchema: z.ZodType<
  ClientGetListApiLogoUris$Outbound,
  z.ZodTypeDef,
  ClientGetListApiLogoUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiLogoUris$ {
  /** @deprecated use `ClientGetListApiLogoUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiLogoUris$inboundSchema;
  /** @deprecated use `ClientGetListApiLogoUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiLogoUris$outboundSchema;
  /** @deprecated use `ClientGetListApiLogoUris$Outbound` instead. */
  export type Outbound = ClientGetListApiLogoUris$Outbound;
}

export function clientGetListApiLogoUrisToJSON(
  clientGetListApiLogoUris: ClientGetListApiLogoUris,
): string {
  return JSON.stringify(
    ClientGetListApiLogoUris$outboundSchema.parse(clientGetListApiLogoUris),
  );
}

export function clientGetListApiLogoUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiLogoUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiLogoUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiLogoUris' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiGrantType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiGrantType
> = z.nativeEnum(ClientGetListApiGrantType);

/** @internal */
export const ClientGetListApiGrantType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiGrantType
> = ClientGetListApiGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiGrantType$ {
  /** @deprecated use `ClientGetListApiGrantType$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiGrantType$inboundSchema;
  /** @deprecated use `ClientGetListApiGrantType$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiGrantType$outboundSchema;
}

/** @internal */
export const ClientGetListApiResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiResponseType
> = z.nativeEnum(ClientGetListApiResponseType);

/** @internal */
export const ClientGetListApiResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiResponseType
> = ClientGetListApiResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiResponseType$ {
  /** @deprecated use `ClientGetListApiResponseType$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiResponseType$inboundSchema;
  /** @deprecated use `ClientGetListApiResponseType$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiResponseType$outboundSchema;
}

/** @internal */
export const ClientGetListApiAuthorizationSignAlg$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiAuthorizationSignAlg> = z.nativeEnum(
    ClientGetListApiAuthorizationSignAlg,
  );

/** @internal */
export const ClientGetListApiAuthorizationSignAlg$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiAuthorizationSignAlg> =
    ClientGetListApiAuthorizationSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiAuthorizationSignAlg$ {
  /** @deprecated use `ClientGetListApiAuthorizationSignAlg$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiAuthorizationSignAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiAuthorizationSignAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiAuthorizationSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiAuthorizationEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiAuthorizationEncryptionAlg> = z
    .nativeEnum(ClientGetListApiAuthorizationEncryptionAlg);

/** @internal */
export const ClientGetListApiAuthorizationEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiAuthorizationEncryptionAlg> =
    ClientGetListApiAuthorizationEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiAuthorizationEncryptionAlg$ {
  /** @deprecated use `ClientGetListApiAuthorizationEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiAuthorizationEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiAuthorizationEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiAuthorizationEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiAuthorizationEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiAuthorizationEncryptionEnc> = z
    .nativeEnum(ClientGetListApiAuthorizationEncryptionEnc);

/** @internal */
export const ClientGetListApiAuthorizationEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiAuthorizationEncryptionEnc> =
    ClientGetListApiAuthorizationEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiAuthorizationEncryptionEnc$ {
  /** @deprecated use `ClientGetListApiAuthorizationEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiAuthorizationEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetListApiAuthorizationEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiAuthorizationEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetListApiTokenAuthMethod$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiTokenAuthMethod
> = z.nativeEnum(ClientGetListApiTokenAuthMethod);

/** @internal */
export const ClientGetListApiTokenAuthMethod$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiTokenAuthMethod
> = ClientGetListApiTokenAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiTokenAuthMethod$ {
  /** @deprecated use `ClientGetListApiTokenAuthMethod$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiTokenAuthMethod$inboundSchema;
  /** @deprecated use `ClientGetListApiTokenAuthMethod$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiTokenAuthMethod$outboundSchema;
}

/** @internal */
export const ClientGetListApiTokenAuthSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiTokenAuthSignAlg
> = z.nativeEnum(ClientGetListApiTokenAuthSignAlg);

/** @internal */
export const ClientGetListApiTokenAuthSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiTokenAuthSignAlg
> = ClientGetListApiTokenAuthSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiTokenAuthSignAlg$ {
  /** @deprecated use `ClientGetListApiTokenAuthSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiTokenAuthSignAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiTokenAuthSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiTokenAuthSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiRequestSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiRequestSignAlg
> = z.nativeEnum(ClientGetListApiRequestSignAlg);

/** @internal */
export const ClientGetListApiRequestSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiRequestSignAlg
> = ClientGetListApiRequestSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiRequestSignAlg$ {
  /** @deprecated use `ClientGetListApiRequestSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiRequestSignAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiRequestSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiRequestSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiRequestEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiRequestEncryptionAlg> = z.nativeEnum(
    ClientGetListApiRequestEncryptionAlg,
  );

/** @internal */
export const ClientGetListApiRequestEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiRequestEncryptionAlg> =
    ClientGetListApiRequestEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiRequestEncryptionAlg$ {
  /** @deprecated use `ClientGetListApiRequestEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiRequestEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiRequestEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiRequestEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiRequestEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiRequestEncryptionEnc> = z.nativeEnum(
    ClientGetListApiRequestEncryptionEnc,
  );

/** @internal */
export const ClientGetListApiRequestEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiRequestEncryptionEnc> =
    ClientGetListApiRequestEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiRequestEncryptionEnc$ {
  /** @deprecated use `ClientGetListApiRequestEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiRequestEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetListApiRequestEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiRequestEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetListApiIdTokenSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiIdTokenSignAlg
> = z.nativeEnum(ClientGetListApiIdTokenSignAlg);

/** @internal */
export const ClientGetListApiIdTokenSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiIdTokenSignAlg
> = ClientGetListApiIdTokenSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiIdTokenSignAlg$ {
  /** @deprecated use `ClientGetListApiIdTokenSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiIdTokenSignAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiIdTokenSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiIdTokenSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiIdTokenEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiIdTokenEncryptionAlg> = z.nativeEnum(
    ClientGetListApiIdTokenEncryptionAlg,
  );

/** @internal */
export const ClientGetListApiIdTokenEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiIdTokenEncryptionAlg> =
    ClientGetListApiIdTokenEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiIdTokenEncryptionAlg$ {
  /** @deprecated use `ClientGetListApiIdTokenEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiIdTokenEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiIdTokenEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiIdTokenEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiIdTokenEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiIdTokenEncryptionEnc> = z.nativeEnum(
    ClientGetListApiIdTokenEncryptionEnc,
  );

/** @internal */
export const ClientGetListApiIdTokenEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiIdTokenEncryptionEnc> =
    ClientGetListApiIdTokenEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiIdTokenEncryptionEnc$ {
  /** @deprecated use `ClientGetListApiIdTokenEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiIdTokenEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetListApiIdTokenEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiIdTokenEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetListApiSubjectType$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiSubjectType
> = z.nativeEnum(ClientGetListApiSubjectType);

/** @internal */
export const ClientGetListApiSubjectType$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiSubjectType
> = ClientGetListApiSubjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiSubjectType$ {
  /** @deprecated use `ClientGetListApiSubjectType$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiSubjectType$inboundSchema;
  /** @deprecated use `ClientGetListApiSubjectType$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiSubjectType$outboundSchema;
}

/** @internal */
export const ClientGetListApiUserInfoSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiUserInfoSignAlg
> = z.nativeEnum(ClientGetListApiUserInfoSignAlg);

/** @internal */
export const ClientGetListApiUserInfoSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiUserInfoSignAlg
> = ClientGetListApiUserInfoSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiUserInfoSignAlg$ {
  /** @deprecated use `ClientGetListApiUserInfoSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiUserInfoSignAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiUserInfoSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiUserInfoSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiUserInfoEncryptionAlg$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiUserInfoEncryptionAlg> = z.nativeEnum(
    ClientGetListApiUserInfoEncryptionAlg,
  );

/** @internal */
export const ClientGetListApiUserInfoEncryptionAlg$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiUserInfoEncryptionAlg> =
    ClientGetListApiUserInfoEncryptionAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiUserInfoEncryptionAlg$ {
  /** @deprecated use `ClientGetListApiUserInfoEncryptionAlg$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiUserInfoEncryptionAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiUserInfoEncryptionAlg$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiUserInfoEncryptionAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiUserInfoEncryptionEnc$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiUserInfoEncryptionEnc> = z.nativeEnum(
    ClientGetListApiUserInfoEncryptionEnc,
  );

/** @internal */
export const ClientGetListApiUserInfoEncryptionEnc$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiUserInfoEncryptionEnc> =
    ClientGetListApiUserInfoEncryptionEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiUserInfoEncryptionEnc$ {
  /** @deprecated use `ClientGetListApiUserInfoEncryptionEnc$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiUserInfoEncryptionEnc$inboundSchema;
  /** @deprecated use `ClientGetListApiUserInfoEncryptionEnc$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiUserInfoEncryptionEnc$outboundSchema;
}

/** @internal */
export const ClientGetListApiTosUris$inboundSchema: z.ZodType<
  ClientGetListApiTosUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiTosUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiTosUris$outboundSchema: z.ZodType<
  ClientGetListApiTosUris$Outbound,
  z.ZodTypeDef,
  ClientGetListApiTosUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiTosUris$ {
  /** @deprecated use `ClientGetListApiTosUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiTosUris$inboundSchema;
  /** @deprecated use `ClientGetListApiTosUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiTosUris$outboundSchema;
  /** @deprecated use `ClientGetListApiTosUris$Outbound` instead. */
  export type Outbound = ClientGetListApiTosUris$Outbound;
}

export function clientGetListApiTosUrisToJSON(
  clientGetListApiTosUris: ClientGetListApiTosUris,
): string {
  return JSON.stringify(
    ClientGetListApiTosUris$outboundSchema.parse(clientGetListApiTosUris),
  );
}

export function clientGetListApiTosUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiTosUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiTosUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiTosUris' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiPolicyUris$inboundSchema: z.ZodType<
  ClientGetListApiPolicyUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiPolicyUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiPolicyUris$outboundSchema: z.ZodType<
  ClientGetListApiPolicyUris$Outbound,
  z.ZodTypeDef,
  ClientGetListApiPolicyUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiPolicyUris$ {
  /** @deprecated use `ClientGetListApiPolicyUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiPolicyUris$inboundSchema;
  /** @deprecated use `ClientGetListApiPolicyUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiPolicyUris$outboundSchema;
  /** @deprecated use `ClientGetListApiPolicyUris$Outbound` instead. */
  export type Outbound = ClientGetListApiPolicyUris$Outbound;
}

export function clientGetListApiPolicyUrisToJSON(
  clientGetListApiPolicyUris: ClientGetListApiPolicyUris,
): string {
  return JSON.stringify(
    ClientGetListApiPolicyUris$outboundSchema.parse(clientGetListApiPolicyUris),
  );
}

export function clientGetListApiPolicyUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiPolicyUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiPolicyUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiPolicyUris' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiClientUris$inboundSchema: z.ZodType<
  ClientGetListApiClientUris,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiClientUris$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiClientUris$outboundSchema: z.ZodType<
  ClientGetListApiClientUris$Outbound,
  z.ZodTypeDef,
  ClientGetListApiClientUris
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiClientUris$ {
  /** @deprecated use `ClientGetListApiClientUris$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiClientUris$inboundSchema;
  /** @deprecated use `ClientGetListApiClientUris$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiClientUris$outboundSchema;
  /** @deprecated use `ClientGetListApiClientUris$Outbound` instead. */
  export type Outbound = ClientGetListApiClientUris$Outbound;
}

export function clientGetListApiClientUrisToJSON(
  clientGetListApiClientUris: ClientGetListApiClientUris,
): string {
  return JSON.stringify(
    ClientGetListApiClientUris$outboundSchema.parse(clientGetListApiClientUris),
  );
}

export function clientGetListApiClientUrisFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiClientUris, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiClientUris$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiClientUris' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiBcRequestSignAlg$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiBcRequestSignAlg
> = z.nativeEnum(ClientGetListApiBcRequestSignAlg);

/** @internal */
export const ClientGetListApiBcRequestSignAlg$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiBcRequestSignAlg
> = ClientGetListApiBcRequestSignAlg$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiBcRequestSignAlg$ {
  /** @deprecated use `ClientGetListApiBcRequestSignAlg$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiBcRequestSignAlg$inboundSchema;
  /** @deprecated use `ClientGetListApiBcRequestSignAlg$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiBcRequestSignAlg$outboundSchema;
}

/** @internal */
export const ClientGetListApiAttribute$inboundSchema: z.ZodType<
  ClientGetListApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type ClientGetListApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ClientGetListApiAttribute$outboundSchema: z.ZodType<
  ClientGetListApiAttribute$Outbound,
  z.ZodTypeDef,
  ClientGetListApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiAttribute$ {
  /** @deprecated use `ClientGetListApiAttribute$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiAttribute$inboundSchema;
  /** @deprecated use `ClientGetListApiAttribute$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiAttribute$outboundSchema;
  /** @deprecated use `ClientGetListApiAttribute$Outbound` instead. */
  export type Outbound = ClientGetListApiAttribute$Outbound;
}

export function clientGetListApiAttributeToJSON(
  clientGetListApiAttribute: ClientGetListApiAttribute,
): string {
  return JSON.stringify(
    ClientGetListApiAttribute$outboundSchema.parse(clientGetListApiAttribute),
  );
}

export function clientGetListApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiAttribute' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiExtension$inboundSchema: z.ZodType<
  ClientGetListApiExtension,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/** @internal */
export type ClientGetListApiExtension$Outbound = {
  requestableScopes?: Array<string> | undefined;
  requestableScopesEnabled?: boolean | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  tokenExchangePermitted?: boolean | undefined;
};

/** @internal */
export const ClientGetListApiExtension$outboundSchema: z.ZodType<
  ClientGetListApiExtension$Outbound,
  z.ZodTypeDef,
  ClientGetListApiExtension
> = z.object({
  requestableScopes: z.array(z.string()).optional(),
  requestableScopesEnabled: z.boolean().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  tokenExchangePermitted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiExtension$ {
  /** @deprecated use `ClientGetListApiExtension$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiExtension$inboundSchema;
  /** @deprecated use `ClientGetListApiExtension$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiExtension$outboundSchema;
  /** @deprecated use `ClientGetListApiExtension$Outbound` instead. */
  export type Outbound = ClientGetListApiExtension$Outbound;
}

export function clientGetListApiExtensionToJSON(
  clientGetListApiExtension: ClientGetListApiExtension,
): string {
  return JSON.stringify(
    ClientGetListApiExtension$outboundSchema.parse(clientGetListApiExtension),
  );
}

export function clientGetListApiExtensionFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiExtension, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiExtension$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiExtension' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiClientRegistrationType$inboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiClientRegistrationType> = z.nativeEnum(
    ClientGetListApiClientRegistrationType,
  );

/** @internal */
export const ClientGetListApiClientRegistrationType$outboundSchema:
  z.ZodNativeEnum<typeof ClientGetListApiClientRegistrationType> =
    ClientGetListApiClientRegistrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiClientRegistrationType$ {
  /** @deprecated use `ClientGetListApiClientRegistrationType$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiClientRegistrationType$inboundSchema;
  /** @deprecated use `ClientGetListApiClientRegistrationType$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiClientRegistrationType$outboundSchema;
}

/** @internal */
export const ClientGetListApiFapiMode$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiFapiMode
> = z.nativeEnum(ClientGetListApiFapiMode);

/** @internal */
export const ClientGetListApiFapiMode$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiFapiMode
> = ClientGetListApiFapiMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiFapiMode$ {
  /** @deprecated use `ClientGetListApiFapiMode$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiFapiMode$inboundSchema;
  /** @deprecated use `ClientGetListApiFapiMode$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiFapiMode$outboundSchema;
}

/** @internal */
export const ClientGetListApiResponseMode$inboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiResponseMode
> = z.nativeEnum(ClientGetListApiResponseMode);

/** @internal */
export const ClientGetListApiResponseMode$outboundSchema: z.ZodNativeEnum<
  typeof ClientGetListApiResponseMode
> = ClientGetListApiResponseMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiResponseMode$ {
  /** @deprecated use `ClientGetListApiResponseMode$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiResponseMode$inboundSchema;
  /** @deprecated use `ClientGetListApiResponseMode$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiResponseMode$outboundSchema;
}

/** @internal */
export const ClientGetListApiClient$inboundSchema: z.ZodType<
  ClientGetListApiClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(z.lazy(() => ClientGetListApiClientName$inboundSchema))
    .optional(),
  description: z.string().optional(),
  descriptions: z.array(z.lazy(() => ClientGetListApiDescription$inboundSchema))
    .optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientGetListApiClientType$inboundSchema.optional(),
  applicationType: ClientGetListApiApplicationType$inboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientGetListApiLogoUris$inboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(ClientGetListApiGrantType$inboundSchema).optional(),
  responseTypes: z.array(ClientGetListApiResponseType$inboundSchema).optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg: ClientGetListApiAuthorizationSignAlg$inboundSchema
    .optional(),
  authorizationEncryptionAlg:
    ClientGetListApiAuthorizationEncryptionAlg$inboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientGetListApiAuthorizationEncryptionEnc$inboundSchema.optional(),
  tokenAuthMethod: ClientGetListApiTokenAuthMethod$inboundSchema.optional(),
  tokenAuthSignAlg: ClientGetListApiTokenAuthSignAlg$inboundSchema.optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientGetListApiRequestSignAlg$inboundSchema.optional(),
  requestEncryptionAlg: ClientGetListApiRequestEncryptionAlg$inboundSchema
    .optional(),
  requestEncryptionEnc: ClientGetListApiRequestEncryptionEnc$inboundSchema
    .optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientGetListApiIdTokenSignAlg$inboundSchema.optional(),
  idTokenEncryptionAlg: ClientGetListApiIdTokenEncryptionAlg$inboundSchema
    .optional(),
  idTokenEncryptionEnc: ClientGetListApiIdTokenEncryptionEnc$inboundSchema
    .optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientGetListApiSubjectType$inboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientGetListApiUserInfoSignAlg$inboundSchema.optional(),
  userInfoEncryptionAlg: ClientGetListApiUserInfoEncryptionAlg$inboundSchema
    .optional(),
  userInfoEncryptionEnc: ClientGetListApiUserInfoEncryptionEnc$inboundSchema
    .optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientGetListApiTosUris$inboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(z.lazy(() => ClientGetListApiPolicyUris$inboundSchema))
    .optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(z.lazy(() => ClientGetListApiClientUris$inboundSchema))
    .optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientGetListApiBcRequestSignAlg$inboundSchema.optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(z.lazy(() => ClientGetListApiAttribute$inboundSchema))
    .optional(),
  extension: z.lazy(() => ClientGetListApiExtension$inboundSchema).optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientGetListApiClientRegistrationType$inboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientGetListApiFapiMode$inboundSchema).optional(),
  responseModes: z.array(ClientGetListApiResponseMode$inboundSchema).optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/** @internal */
export type ClientGetListApiClient$Outbound = {
  number?: number | undefined;
  serviceNumber?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<ClientGetListApiClientName$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<ClientGetListApiDescription$Outbound> | undefined;
  clientId?: number | undefined;
  clientSecret?: string | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
  applicationType?: string | undefined;
  logoUri?: string | undefined;
  logoUris?: Array<ClientGetListApiLogoUris$Outbound> | undefined;
  contacts?: Array<string> | undefined;
  tlsClientCertificateBoundAccessTokens?: boolean | undefined;
  dynamicallyRegistered?: boolean | undefined;
  softwareId?: string | undefined;
  softwareVersion?: string | undefined;
  registrationAccessTokenHash?: string | undefined;
  createdAt?: number | undefined;
  modifiedAt?: number | undefined;
  grantTypes?: Array<string> | undefined;
  responseTypes?: Array<string> | undefined;
  redirectUris?: Array<string> | undefined;
  authorizationSignAlg?: string | undefined;
  authorizationEncryptionAlg?: string | undefined;
  authorizationEncryptionEnc?: string | undefined;
  tokenAuthMethod?: string | undefined;
  tokenAuthSignAlg?: string | undefined;
  selfSignedCertificateKeyId?: string | undefined;
  tlsClientAuthSubjectDn?: string | undefined;
  tlsClientAuthSanDns?: string | undefined;
  tlsClientAuthSanUri?: string | undefined;
  tlsClientAuthSanIp?: string | undefined;
  tlsClientAuthSanEmail?: string | undefined;
  parRequired?: boolean | undefined;
  requestObjectRequired?: boolean | undefined;
  requestSignAlg?: string | undefined;
  requestEncryptionAlg?: string | undefined;
  requestEncryptionEnc?: string | undefined;
  requestUris?: Array<string> | undefined;
  defaultMaxAge?: number | undefined;
  defaultAcrs?: Array<string> | undefined;
  idTokenSignAlg?: string | undefined;
  idTokenEncryptionAlg?: string | undefined;
  idTokenEncryptionEnc?: string | undefined;
  authTimeRequired?: boolean | undefined;
  subjectType?: string | undefined;
  sectorIdentifierUri?: string | undefined;
  derivedSectorIdentifier?: string | undefined;
  jwksUri?: string | undefined;
  jwks?: string | undefined;
  userInfoSignAlg?: string | undefined;
  userInfoEncryptionAlg?: string | undefined;
  userInfoEncryptionEnc?: string | undefined;
  loginUri?: string | undefined;
  tosUri?: string | undefined;
  tosUris?: Array<ClientGetListApiTosUris$Outbound> | undefined;
  policyUri?: string | undefined;
  policyUris?: Array<ClientGetListApiPolicyUris$Outbound> | undefined;
  clientUri?: string | undefined;
  clientUris?: Array<ClientGetListApiClientUris$Outbound> | undefined;
  bcDeliveryMode?: string | undefined;
  bcNotificationEndpoint?: string | undefined;
  bcRequestSignAlg?: string | undefined;
  bcUserCodeRequired?: boolean | undefined;
  attributes?: Array<ClientGetListApiAttribute$Outbound> | undefined;
  extension?: ClientGetListApiExtension$Outbound | undefined;
  authorizationDetailsTypes?: Array<string> | undefined;
  customMetadata?: string | undefined;
  frontChannelRequestObjectEncryptionRequired?: boolean | undefined;
  requestObjectEncryptionAlgMatchRequired?: boolean | undefined;
  requestObjectEncryptionEncMatchRequired?: boolean | undefined;
  digestAlgorithm?: string | undefined;
  singleAccessTokenPerSubject?: boolean | undefined;
  pkceRequired?: boolean | undefined;
  pkceS256Required?: boolean | undefined;
  dpopRequired?: boolean | undefined;
  automaticallyRegistered?: boolean | undefined;
  explicitlyRegistered?: boolean | undefined;
  rsRequestSigned?: boolean | undefined;
  rsSignedRequestKeyId?: string | undefined;
  clientRegistrationTypes?: Array<string> | undefined;
  organizationName?: string | undefined;
  signedJwksUri?: string | undefined;
  entityId?: string | undefined;
  trustAnchorId?: string | undefined;
  trustChain?: Array<string> | undefined;
  trustChainExpiresAt?: number | undefined;
  trustChainUpdatedAt?: number | undefined;
  locked?: boolean | undefined;
  credentialOfferEndpoint?: string | undefined;
  fapiModes?: Array<string> | undefined;
  responseModes?: Array<string> | undefined;
  credentialResponseEncryptionRequired?: boolean | undefined;
};

/** @internal */
export const ClientGetListApiClient$outboundSchema: z.ZodType<
  ClientGetListApiClient$Outbound,
  z.ZodTypeDef,
  ClientGetListApiClient
> = z.object({
  number: z.number().int().optional(),
  serviceNumber: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(z.lazy(() => ClientGetListApiClientName$outboundSchema))
    .optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => ClientGetListApiDescription$outboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientSecret: z.string().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: ClientGetListApiClientType$outboundSchema.optional(),
  applicationType: ClientGetListApiApplicationType$outboundSchema.optional(),
  logoUri: z.string().optional(),
  logoUris: z.array(z.lazy(() => ClientGetListApiLogoUris$outboundSchema))
    .optional(),
  contacts: z.array(z.string()).optional(),
  tlsClientCertificateBoundAccessTokens: z.boolean().optional(),
  dynamicallyRegistered: z.boolean().optional(),
  softwareId: z.string().optional(),
  softwareVersion: z.string().optional(),
  registrationAccessTokenHash: z.string().optional(),
  createdAt: z.number().int().optional(),
  modifiedAt: z.number().int().optional(),
  grantTypes: z.array(ClientGetListApiGrantType$outboundSchema).optional(),
  responseTypes: z.array(ClientGetListApiResponseType$outboundSchema)
    .optional(),
  redirectUris: z.array(z.string()).optional(),
  authorizationSignAlg: ClientGetListApiAuthorizationSignAlg$outboundSchema
    .optional(),
  authorizationEncryptionAlg:
    ClientGetListApiAuthorizationEncryptionAlg$outboundSchema.optional(),
  authorizationEncryptionEnc:
    ClientGetListApiAuthorizationEncryptionEnc$outboundSchema.optional(),
  tokenAuthMethod: ClientGetListApiTokenAuthMethod$outboundSchema.optional(),
  tokenAuthSignAlg: ClientGetListApiTokenAuthSignAlg$outboundSchema.optional(),
  selfSignedCertificateKeyId: z.string().optional(),
  tlsClientAuthSubjectDn: z.string().optional(),
  tlsClientAuthSanDns: z.string().optional(),
  tlsClientAuthSanUri: z.string().optional(),
  tlsClientAuthSanIp: z.string().optional(),
  tlsClientAuthSanEmail: z.string().optional(),
  parRequired: z.boolean().optional(),
  requestObjectRequired: z.boolean().optional(),
  requestSignAlg: ClientGetListApiRequestSignAlg$outboundSchema.optional(),
  requestEncryptionAlg: ClientGetListApiRequestEncryptionAlg$outboundSchema
    .optional(),
  requestEncryptionEnc: ClientGetListApiRequestEncryptionEnc$outboundSchema
    .optional(),
  requestUris: z.array(z.string()).optional(),
  defaultMaxAge: z.number().int().optional(),
  defaultAcrs: z.array(z.string()).optional(),
  idTokenSignAlg: ClientGetListApiIdTokenSignAlg$outboundSchema.optional(),
  idTokenEncryptionAlg: ClientGetListApiIdTokenEncryptionAlg$outboundSchema
    .optional(),
  idTokenEncryptionEnc: ClientGetListApiIdTokenEncryptionEnc$outboundSchema
    .optional(),
  authTimeRequired: z.boolean().optional(),
  subjectType: ClientGetListApiSubjectType$outboundSchema.optional(),
  sectorIdentifierUri: z.string().optional(),
  derivedSectorIdentifier: z.string().optional(),
  jwksUri: z.string().optional(),
  jwks: z.string().optional(),
  userInfoSignAlg: ClientGetListApiUserInfoSignAlg$outboundSchema.optional(),
  userInfoEncryptionAlg: ClientGetListApiUserInfoEncryptionAlg$outboundSchema
    .optional(),
  userInfoEncryptionEnc: ClientGetListApiUserInfoEncryptionEnc$outboundSchema
    .optional(),
  loginUri: z.string().optional(),
  tosUri: z.string().optional(),
  tosUris: z.array(z.lazy(() => ClientGetListApiTosUris$outboundSchema))
    .optional(),
  policyUri: z.string().optional(),
  policyUris: z.array(z.lazy(() => ClientGetListApiPolicyUris$outboundSchema))
    .optional(),
  clientUri: z.string().optional(),
  clientUris: z.array(z.lazy(() => ClientGetListApiClientUris$outboundSchema))
    .optional(),
  bcDeliveryMode: z.string().optional(),
  bcNotificationEndpoint: z.string().optional(),
  bcRequestSignAlg: ClientGetListApiBcRequestSignAlg$outboundSchema.optional(),
  bcUserCodeRequired: z.boolean().optional(),
  attributes: z.array(z.lazy(() => ClientGetListApiAttribute$outboundSchema))
    .optional(),
  extension: z.lazy(() => ClientGetListApiExtension$outboundSchema).optional(),
  authorizationDetailsTypes: z.array(z.string()).optional(),
  customMetadata: z.string().optional(),
  frontChannelRequestObjectEncryptionRequired: z.boolean().optional(),
  requestObjectEncryptionAlgMatchRequired: z.boolean().optional(),
  requestObjectEncryptionEncMatchRequired: z.boolean().optional(),
  digestAlgorithm: z.string().optional(),
  singleAccessTokenPerSubject: z.boolean().optional(),
  pkceRequired: z.boolean().optional(),
  pkceS256Required: z.boolean().optional(),
  dpopRequired: z.boolean().optional(),
  automaticallyRegistered: z.boolean().optional(),
  explicitlyRegistered: z.boolean().optional(),
  rsRequestSigned: z.boolean().optional(),
  rsSignedRequestKeyId: z.string().optional(),
  clientRegistrationTypes: z.array(
    ClientGetListApiClientRegistrationType$outboundSchema,
  ).optional(),
  organizationName: z.string().optional(),
  signedJwksUri: z.string().optional(),
  entityId: z.string().optional(),
  trustAnchorId: z.string().optional(),
  trustChain: z.array(z.string()).optional(),
  trustChainExpiresAt: z.number().int().optional(),
  trustChainUpdatedAt: z.number().int().optional(),
  locked: z.boolean().optional(),
  credentialOfferEndpoint: z.string().optional(),
  fapiModes: z.array(ClientGetListApiFapiMode$outboundSchema).optional(),
  responseModes: z.array(ClientGetListApiResponseMode$outboundSchema)
    .optional(),
  credentialResponseEncryptionRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiClient$ {
  /** @deprecated use `ClientGetListApiClient$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiClient$inboundSchema;
  /** @deprecated use `ClientGetListApiClient$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiClient$outboundSchema;
  /** @deprecated use `ClientGetListApiClient$Outbound` instead. */
  export type Outbound = ClientGetListApiClient$Outbound;
}

export function clientGetListApiClientToJSON(
  clientGetListApiClient: ClientGetListApiClient,
): string {
  return JSON.stringify(
    ClientGetListApiClient$outboundSchema.parse(clientGetListApiClient),
  );
}

export function clientGetListApiClientFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiClient' from JSON`,
  );
}

/** @internal */
export const ClientGetListApiResponse$inboundSchema: z.ZodType<
  ClientGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(z.lazy(() => ClientGetListApiClient$inboundSchema))
    .optional(),
});

/** @internal */
export type ClientGetListApiResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  totalCount?: number | undefined;
  clients?: Array<ClientGetListApiClient$Outbound> | undefined;
};

/** @internal */
export const ClientGetListApiResponse$outboundSchema: z.ZodType<
  ClientGetListApiResponse$Outbound,
  z.ZodTypeDef,
  ClientGetListApiResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(z.lazy(() => ClientGetListApiClient$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiResponse$ {
  /** @deprecated use `ClientGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiResponse$inboundSchema;
  /** @deprecated use `ClientGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiResponse$outboundSchema;
  /** @deprecated use `ClientGetListApiResponse$Outbound` instead. */
  export type Outbound = ClientGetListApiResponse$Outbound;
}

export function clientGetListApiResponseToJSON(
  clientGetListApiResponse: ClientGetListApiResponse,
): string {
  return JSON.stringify(
    ClientGetListApiResponse$outboundSchema.parse(clientGetListApiResponse),
  );
}

export function clientGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListApiResponse' from JSON`,
  );
}
