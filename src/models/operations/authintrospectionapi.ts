/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthIntrospectionApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthIntrospectionApiHeader = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiRequestBody = {
  /**
   * An access token to introspect.
   */
  token: string;
  /**
   * A string array listing names of scopes which the caller (= a protected resource endpoint of the
   *
   * @remarks
   * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
   * the format of `scopes` is a space-separated list of scope names.
   *
   * If this parameter is a non-empty array and if it contains a scope which is not covered by the
   * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
   */
  scopes?: Array<string> | undefined;
  /**
   * A subject (= a user account managed by the service) whom the caller (= a protected resource
   *
   * @remarks
   * endpoint of the service) requires.
   *
   * If this parameter is not `null` and if the value does not match the subject who is associated
   * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
   */
  subject?: string | undefined;
  /**
   * Client certificate in PEM format, used to validate binding against access tokens using the TLS
   *
   * @remarks
   * client certificate confirmation method.
   */
  clientCertificate?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the resource server.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private
   * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
   * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the request from the client to the protected resource endpoint. This field is
   *
   * @remarks
   * used to validate the `DPoP` header.
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htm?: string | undefined;
  /**
   * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  resources?: Array<string> | undefined;
  /**
   * Authentication Context Class Reference values one of which the user authentication performed during the course
   *
   * @remarks
   * of issuing the access token must satisfy.
   */
  acrValues?: Array<string> | undefined;
  /**
   * The maximum authentication age which is the maximum allowable elapsed time since the user authentication
   *
   * @remarks
   * was performed during the course of issuing the access token.
   */
  maxAge?: number | undefined;
  /**
   * HTTP Message Components required to be in the signature. If absent, defaults to [ "@method", "@target-uri", "authorization" ].
   *
   * @remarks
   */
  requiredComponents?: Array<string> | undefined;
  /**
   * The full URL of the userinfo endpoint.
   *
   * @remarks
   */
  uri?: string | undefined;
  /**
   * The HTTP message body of the request, if present.
   *
   * @remarks
   */
  message?: string | undefined;
  /**
   * HTTP headers to be included in processing the signature. If this is a signed request, this must include the
   *
   * @remarks
   * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
   */
  headers?: Array<AuthIntrospectionApiHeader> | undefined;
};

export type AuthIntrospectionApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: AuthIntrospectionApiRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthIntrospectionApiAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthIntrospectionApiAction = ClosedEnum<
  typeof AuthIntrospectionApiAction
>;

export type AuthIntrospectionApiProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AuthIntrospectionApiElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthIntrospectionApiAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthIntrospectionApiElement> | undefined;
};

export type AuthIntrospectionApiServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthIntrospectionApiScopeDetail = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<AuthIntrospectionApiDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<AuthIntrospectionApiAttribute> | undefined;
};

export type AuthIntrospectionApiScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type AuthIntrospectionApiGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type AuthIntrospectionApiGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<AuthIntrospectionApiGrantElement> | undefined;
};

export type AuthIntrospectionApiGrant = {
  scopes?: Array<AuthIntrospectionApiScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | AuthIntrospectionApiGrantAuthorizationDetails
    | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthIntrospectionApiGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthIntrospectionApiGrantType = ClosedEnum<
  typeof AuthIntrospectionApiGrantType
>;

export type AuthIntrospectionApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthIntrospectionApiAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
   *
   * @remarks
   */
  responseContent?: string | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The time at which the access token expires.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  expiresAt?: number | undefined;
  /**
   * The subject who is associated with the access token.
   *
   * @remarks
   * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * `true` if the access token exists.
   *
   * @remarks
   */
  existent?: boolean | undefined;
  /**
   * true` if the access token is usable (= exists and has not expired).
   *
   * @remarks
   */
  usable?: boolean | undefined;
  /**
   * `true` if the access token exists.
   *
   * @remarks
   */
  sufficient?: boolean | undefined;
  /**
   * `true` if the access token can be refreshed using the associated refresh token which had been issued
   *
   * @remarks
   * along with the access token. `false` if the refresh token for the access token has expired or the access
   * token has no associated refresh token.
   */
  refreshable?: boolean | undefined;
  /**
   * The extra properties associated with the access token.
   */
  properties?: Array<AuthIntrospectionApiProperty> | undefined;
  /**
   * The client certificate thumbprint used to validate the access token.
   *
   * @remarks
   */
  certificateThumbprint?: string | undefined;
  /**
   * The target resources. This represents the resources specified by the `resource` request parameters
   *
   * @remarks
   * or by the `resource` property in the request object.
   *
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
   *
   * @remarks
   *
   * In some flows, the initial request and the subsequent token request are sent to different endpoints.
   * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
   * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
   * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
   * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
   * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
   *
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthIntrospectionApiAuthorizationDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<AuthIntrospectionApiServiceAttribute> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<AuthIntrospectionApiClientAttribute> | undefined;
  /**
   * The scopes property of this class is a list of scope names. The property does not hold information
   *
   * @remarks
   * about scope attributes. This scopeDetails property was newly created to convey information about
   * scope attributes.
   */
  scopeDetails?: Array<AuthIntrospectionApiScopeDetail> | undefined;
  /**
   * The value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: AuthIntrospectionApiGrant | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  grantType?: AuthIntrospectionApiGrantType | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication that the authorization server performed
   *
   * @remarks
   * during the course of issuing the access token.
   */
  acr?: string | undefined;
  /**
   * The time when the user authentication was performed during the course of issuing the access token.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The flag indicating whether the token is for credential issuance.
   */
  forCredentialIssuance?: boolean | undefined;
  /**
   * The c_nonce
   */
  cnonce?: string | undefined;
  /**
   * The time at which the `c_nonce` expires.
   */
  cnonceExpiresAt?: number | undefined;
  /**
   * The credentials that can be obtained by presenting the access token.
   */
  issuableCredentials?: string | undefined;
  /**
   * The expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiHeader$inboundSchema: z.ZodType<
  AuthIntrospectionApiHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiHeader$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiHeader$outboundSchema: z.ZodType<
  AuthIntrospectionApiHeader$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiHeader
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiHeader$ {
  /** @deprecated use `AuthIntrospectionApiHeader$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiHeader$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiHeader$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiHeader$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiHeader$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiHeader$Outbound;
}

export function authIntrospectionApiHeaderToJSON(
  authIntrospectionApiHeader: AuthIntrospectionApiHeader,
): string {
  return JSON.stringify(
    AuthIntrospectionApiHeader$outboundSchema.parse(authIntrospectionApiHeader),
  );
}

export function authIntrospectionApiHeaderFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiHeader' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiRequestBody$inboundSchema: z.ZodType<
  AuthIntrospectionApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  resources: z.array(z.string()).optional(),
  acrValues: z.array(z.string()).optional(),
  maxAge: z.number().int().optional(),
  requiredComponents: z.array(z.string()).optional(),
  uri: z.string().optional(),
  message: z.string().optional(),
  headers: z.array(z.lazy(() => AuthIntrospectionApiHeader$inboundSchema))
    .optional(),
});

/** @internal */
export type AuthIntrospectionApiRequestBody$Outbound = {
  token: string;
  scopes?: Array<string> | undefined;
  subject?: string | undefined;
  clientCertificate?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  resources?: Array<string> | undefined;
  acrValues?: Array<string> | undefined;
  maxAge?: number | undefined;
  requiredComponents?: Array<string> | undefined;
  uri?: string | undefined;
  message?: string | undefined;
  headers?: Array<AuthIntrospectionApiHeader$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiRequestBody$outboundSchema: z.ZodType<
  AuthIntrospectionApiRequestBody$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiRequestBody
> = z.object({
  token: z.string(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  resources: z.array(z.string()).optional(),
  acrValues: z.array(z.string()).optional(),
  maxAge: z.number().int().optional(),
  requiredComponents: z.array(z.string()).optional(),
  uri: z.string().optional(),
  message: z.string().optional(),
  headers: z.array(z.lazy(() => AuthIntrospectionApiHeader$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiRequestBody$ {
  /** @deprecated use `AuthIntrospectionApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiRequestBody$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiRequestBody$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiRequestBody$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiRequestBody$Outbound;
}

export function authIntrospectionApiRequestBodyToJSON(
  authIntrospectionApiRequestBody: AuthIntrospectionApiRequestBody,
): string {
  return JSON.stringify(
    AuthIntrospectionApiRequestBody$outboundSchema.parse(
      authIntrospectionApiRequestBody,
    ),
  );
}

export function authIntrospectionApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiRequestBody' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiRequest$inboundSchema: z.ZodType<
  AuthIntrospectionApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => AuthIntrospectionApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AuthIntrospectionApiRequest$Outbound = {
  serviceId: string;
  RequestBody: AuthIntrospectionApiRequestBody$Outbound;
};

/** @internal */
export const AuthIntrospectionApiRequest$outboundSchema: z.ZodType<
  AuthIntrospectionApiRequest$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => AuthIntrospectionApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiRequest$ {
  /** @deprecated use `AuthIntrospectionApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiRequest$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiRequest$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiRequest$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiRequest$Outbound;
}

export function authIntrospectionApiRequestToJSON(
  authIntrospectionApiRequest: AuthIntrospectionApiRequest,
): string {
  return JSON.stringify(
    AuthIntrospectionApiRequest$outboundSchema.parse(
      authIntrospectionApiRequest,
    ),
  );
}

export function authIntrospectionApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiAction
> = z.nativeEnum(AuthIntrospectionApiAction);

/** @internal */
export const AuthIntrospectionApiAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiAction
> = AuthIntrospectionApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiAction$ {
  /** @deprecated use `AuthIntrospectionApiAction$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiAction$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiAction$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiAction$outboundSchema;
}

/** @internal */
export const AuthIntrospectionApiProperty$inboundSchema: z.ZodType<
  AuthIntrospectionApiProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthIntrospectionApiProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthIntrospectionApiProperty$outboundSchema: z.ZodType<
  AuthIntrospectionApiProperty$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiProperty$ {
  /** @deprecated use `AuthIntrospectionApiProperty$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiProperty$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiProperty$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiProperty$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiProperty$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiProperty$Outbound;
}

export function authIntrospectionApiPropertyToJSON(
  authIntrospectionApiProperty: AuthIntrospectionApiProperty,
): string {
  return JSON.stringify(
    AuthIntrospectionApiProperty$outboundSchema.parse(
      authIntrospectionApiProperty,
    ),
  );
}

export function authIntrospectionApiPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiProperty' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiElement$inboundSchema: z.ZodType<
  AuthIntrospectionApiElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiElement$outboundSchema: z.ZodType<
  AuthIntrospectionApiElement$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiElement$ {
  /** @deprecated use `AuthIntrospectionApiElement$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiElement$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiElement$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiElement$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiElement$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiElement$Outbound;
}

export function authIntrospectionApiElementToJSON(
  authIntrospectionApiElement: AuthIntrospectionApiElement,
): string {
  return JSON.stringify(
    AuthIntrospectionApiElement$outboundSchema.parse(
      authIntrospectionApiElement,
    ),
  );
}

export function authIntrospectionApiElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiElement' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiAuthorizationDetails$inboundSchema: z.ZodType<
  AuthIntrospectionApiAuthorizationDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  elements: z.array(z.lazy(() => AuthIntrospectionApiElement$inboundSchema))
    .optional(),
});

/** @internal */
export type AuthIntrospectionApiAuthorizationDetails$Outbound = {
  elements?: Array<AuthIntrospectionApiElement$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiAuthorizationDetails$outboundSchema: z.ZodType<
  AuthIntrospectionApiAuthorizationDetails$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiAuthorizationDetails
> = z.object({
  elements: z.array(z.lazy(() => AuthIntrospectionApiElement$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiAuthorizationDetails$ {
  /** @deprecated use `AuthIntrospectionApiAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiAuthorizationDetails$Outbound;
}

export function authIntrospectionApiAuthorizationDetailsToJSON(
  authIntrospectionApiAuthorizationDetails:
    AuthIntrospectionApiAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthIntrospectionApiAuthorizationDetails$outboundSchema.parse(
      authIntrospectionApiAuthorizationDetails,
    ),
  );
}

export function authIntrospectionApiAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionApiAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionApiAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiServiceAttribute$inboundSchema: z.ZodType<
  AuthIntrospectionApiServiceAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiServiceAttribute$outboundSchema: z.ZodType<
  AuthIntrospectionApiServiceAttribute$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiServiceAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiServiceAttribute$ {
  /** @deprecated use `AuthIntrospectionApiServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiServiceAttribute$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiServiceAttribute$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiServiceAttribute$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiServiceAttribute$Outbound;
}

export function authIntrospectionApiServiceAttributeToJSON(
  authIntrospectionApiServiceAttribute: AuthIntrospectionApiServiceAttribute,
): string {
  return JSON.stringify(
    AuthIntrospectionApiServiceAttribute$outboundSchema.parse(
      authIntrospectionApiServiceAttribute,
    ),
  );
}

export function authIntrospectionApiServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiServiceAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiServiceAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiServiceAttribute' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiClientAttribute$inboundSchema: z.ZodType<
  AuthIntrospectionApiClientAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiClientAttribute$outboundSchema: z.ZodType<
  AuthIntrospectionApiClientAttribute$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiClientAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiClientAttribute$ {
  /** @deprecated use `AuthIntrospectionApiClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiClientAttribute$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiClientAttribute$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiClientAttribute$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiClientAttribute$Outbound;
}

export function authIntrospectionApiClientAttributeToJSON(
  authIntrospectionApiClientAttribute: AuthIntrospectionApiClientAttribute,
): string {
  return JSON.stringify(
    AuthIntrospectionApiClientAttribute$outboundSchema.parse(
      authIntrospectionApiClientAttribute,
    ),
  );
}

export function authIntrospectionApiClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiClientAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiClientAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiClientAttribute' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiDescription$inboundSchema: z.ZodType<
  AuthIntrospectionApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiDescription$outboundSchema: z.ZodType<
  AuthIntrospectionApiDescription$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiDescription$ {
  /** @deprecated use `AuthIntrospectionApiDescription$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiDescription$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiDescription$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiDescription$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiDescription$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiDescription$Outbound;
}

export function authIntrospectionApiDescriptionToJSON(
  authIntrospectionApiDescription: AuthIntrospectionApiDescription,
): string {
  return JSON.stringify(
    AuthIntrospectionApiDescription$outboundSchema.parse(
      authIntrospectionApiDescription,
    ),
  );
}

export function authIntrospectionApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiDescription' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiAttribute$inboundSchema: z.ZodType<
  AuthIntrospectionApiAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiAttribute$outboundSchema: z.ZodType<
  AuthIntrospectionApiAttribute$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiAttribute
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiAttribute$ {
  /** @deprecated use `AuthIntrospectionApiAttribute$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiAttribute$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiAttribute$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiAttribute$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiAttribute$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiAttribute$Outbound;
}

export function authIntrospectionApiAttributeToJSON(
  authIntrospectionApiAttribute: AuthIntrospectionApiAttribute,
): string {
  return JSON.stringify(
    AuthIntrospectionApiAttribute$outboundSchema.parse(
      authIntrospectionApiAttribute,
    ),
  );
}

export function authIntrospectionApiAttributeFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiAttribute' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiScopeDetail$inboundSchema: z.ZodType<
  AuthIntrospectionApiScopeDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthIntrospectionApiDescription$inboundSchema),
  ).optional(),
  attributes: z.array(z.lazy(() => AuthIntrospectionApiAttribute$inboundSchema))
    .optional(),
});

/** @internal */
export type AuthIntrospectionApiScopeDetail$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?: Array<AuthIntrospectionApiDescription$Outbound> | undefined;
  attributes?: Array<AuthIntrospectionApiAttribute$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiScopeDetail$outboundSchema: z.ZodType<
  AuthIntrospectionApiScopeDetail$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiScopeDetail
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthIntrospectionApiDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => AuthIntrospectionApiAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiScopeDetail$ {
  /** @deprecated use `AuthIntrospectionApiScopeDetail$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiScopeDetail$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiScopeDetail$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiScopeDetail$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiScopeDetail$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiScopeDetail$Outbound;
}

export function authIntrospectionApiScopeDetailToJSON(
  authIntrospectionApiScopeDetail: AuthIntrospectionApiScopeDetail,
): string {
  return JSON.stringify(
    AuthIntrospectionApiScopeDetail$outboundSchema.parse(
      authIntrospectionApiScopeDetail,
    ),
  );
}

export function authIntrospectionApiScopeDetailFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiScopeDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiScopeDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiScopeDetail' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiScope$inboundSchema: z.ZodType<
  AuthIntrospectionApiScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/** @internal */
export type AuthIntrospectionApiScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const AuthIntrospectionApiScope$outboundSchema: z.ZodType<
  AuthIntrospectionApiScope$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiScope
> = z.object({
  scope: z.string().optional(),
  resource: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiScope$ {
  /** @deprecated use `AuthIntrospectionApiScope$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiScope$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiScope$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiScope$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiScope$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiScope$Outbound;
}

export function authIntrospectionApiScopeToJSON(
  authIntrospectionApiScope: AuthIntrospectionApiScope,
): string {
  return JSON.stringify(
    AuthIntrospectionApiScope$outboundSchema.parse(authIntrospectionApiScope),
  );
}

export function authIntrospectionApiScopeFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiScope' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiGrantElement$inboundSchema: z.ZodType<
  AuthIntrospectionApiGrantElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiGrantElement$outboundSchema: z.ZodType<
  AuthIntrospectionApiGrantElement$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiGrantElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiGrantElement$ {
  /** @deprecated use `AuthIntrospectionApiGrantElement$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiGrantElement$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrantElement$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiGrantElement$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrantElement$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiGrantElement$Outbound;
}

export function authIntrospectionApiGrantElementToJSON(
  authIntrospectionApiGrantElement: AuthIntrospectionApiGrantElement,
): string {
  return JSON.stringify(
    AuthIntrospectionApiGrantElement$outboundSchema.parse(
      authIntrospectionApiGrantElement,
    ),
  );
}

export function authIntrospectionApiGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiGrantElement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiGrantElement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiGrantElement' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    AuthIntrospectionApiGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthIntrospectionApiGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type AuthIntrospectionApiGrantAuthorizationDetails$Outbound = {
  elements?: Array<AuthIntrospectionApiGrantElement$Outbound> | undefined;
};

/** @internal */
export const AuthIntrospectionApiGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    AuthIntrospectionApiGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionApiGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => AuthIntrospectionApiGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiGrantAuthorizationDetails$ {
  /** @deprecated use `AuthIntrospectionApiGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiGrantAuthorizationDetails$Outbound;
}

export function authIntrospectionApiGrantAuthorizationDetailsToJSON(
  authIntrospectionApiGrantAuthorizationDetails:
    AuthIntrospectionApiGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    AuthIntrospectionApiGrantAuthorizationDetails$outboundSchema.parse(
      authIntrospectionApiGrantAuthorizationDetails,
    ),
  );
}

export function authIntrospectionApiGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  AuthIntrospectionApiGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionApiGrantAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AuthIntrospectionApiGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiGrant$inboundSchema: z.ZodType<
  AuthIntrospectionApiGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.lazy(() => AuthIntrospectionApiScope$inboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type AuthIntrospectionApiGrant$Outbound = {
  scopes?: Array<AuthIntrospectionApiScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | AuthIntrospectionApiGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const AuthIntrospectionApiGrant$outboundSchema: z.ZodType<
  AuthIntrospectionApiGrant$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiGrant
> = z.object({
  scopes: z.array(z.lazy(() => AuthIntrospectionApiScope$outboundSchema))
    .optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiGrant$ {
  /** @deprecated use `AuthIntrospectionApiGrant$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiGrant$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrant$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiGrant$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrant$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiGrant$Outbound;
}

export function authIntrospectionApiGrantToJSON(
  authIntrospectionApiGrant: AuthIntrospectionApiGrant,
): string {
  return JSON.stringify(
    AuthIntrospectionApiGrant$outboundSchema.parse(authIntrospectionApiGrant),
  );
}

export function authIntrospectionApiGrantFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiGrant' from JSON`,
  );
}

/** @internal */
export const AuthIntrospectionApiGrantType$inboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiGrantType
> = z.nativeEnum(AuthIntrospectionApiGrantType);

/** @internal */
export const AuthIntrospectionApiGrantType$outboundSchema: z.ZodNativeEnum<
  typeof AuthIntrospectionApiGrantType
> = AuthIntrospectionApiGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiGrantType$ {
  /** @deprecated use `AuthIntrospectionApiGrantType$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiGrantType$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiGrantType$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiGrantType$outboundSchema;
}

/** @internal */
export const AuthIntrospectionApiResponse$inboundSchema: z.ZodType<
  AuthIntrospectionApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionApiAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  expiresAt: z.number().int().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  existent: z.boolean().optional(),
  usable: z.boolean().optional(),
  sufficient: z.boolean().optional(),
  refreshable: z.boolean().optional(),
  properties: z.array(z.lazy(() => AuthIntrospectionApiProperty$inboundSchema))
    .optional(),
  certificateThumbprint: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiServiceAttribute$inboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiClientAttribute$inboundSchema),
  ).optional(),
  scopeDetails: z.array(
    z.lazy(() => AuthIntrospectionApiScopeDetail$inboundSchema),
  ).optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthIntrospectionApiGrant$inboundSchema).optional(),
  forExternalAttachment: z.boolean().optional(),
  consentedClaims: z.array(z.string()).optional(),
  grantType: AuthIntrospectionApiGrantType$inboundSchema.optional(),
  acr: z.string().optional(),
  authTime: z.number().int().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  forCredentialIssuance: z.boolean().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  issuableCredentials: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type AuthIntrospectionApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  expiresAt?: number | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  existent?: boolean | undefined;
  usable?: boolean | undefined;
  sufficient?: boolean | undefined;
  refreshable?: boolean | undefined;
  properties?: Array<AuthIntrospectionApiProperty$Outbound> | undefined;
  certificateThumbprint?: string | undefined;
  resources?: Array<string> | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?:
    | AuthIntrospectionApiAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<AuthIntrospectionApiServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<AuthIntrospectionApiClientAttribute$Outbound>
    | undefined;
  scopeDetails?: Array<AuthIntrospectionApiScopeDetail$Outbound> | undefined;
  grantId?: string | undefined;
  grant?: AuthIntrospectionApiGrant$Outbound | undefined;
  forExternalAttachment?: boolean | undefined;
  consentedClaims?: Array<string> | undefined;
  grantType?: string | undefined;
  acr?: string | undefined;
  authTime?: number | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  forCredentialIssuance?: boolean | undefined;
  cnonce?: string | undefined;
  cnonceExpiresAt?: number | undefined;
  issuableCredentials?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiResponse$outboundSchema: z.ZodType<
  AuthIntrospectionApiResponse$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthIntrospectionApiAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  expiresAt: z.number().int().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  existent: z.boolean().optional(),
  usable: z.boolean().optional(),
  sufficient: z.boolean().optional(),
  refreshable: z.boolean().optional(),
  properties: z.array(z.lazy(() => AuthIntrospectionApiProperty$outboundSchema))
    .optional(),
  certificateThumbprint: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    AuthIntrospectionApiAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiServiceAttribute$outboundSchema),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => AuthIntrospectionApiClientAttribute$outboundSchema),
  ).optional(),
  scopeDetails: z.array(
    z.lazy(() => AuthIntrospectionApiScopeDetail$outboundSchema),
  ).optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => AuthIntrospectionApiGrant$outboundSchema).optional(),
  forExternalAttachment: z.boolean().optional(),
  consentedClaims: z.array(z.string()).optional(),
  grantType: AuthIntrospectionApiGrantType$outboundSchema.optional(),
  acr: z.string().optional(),
  authTime: z.number().int().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  forCredentialIssuance: z.boolean().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  issuableCredentials: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiResponse$ {
  /** @deprecated use `AuthIntrospectionApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiResponse$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiResponse$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiResponse$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiResponse$Outbound;
}

export function authIntrospectionApiResponseToJSON(
  authIntrospectionApiResponse: AuthIntrospectionApiResponse,
): string {
  return JSON.stringify(
    AuthIntrospectionApiResponse$outboundSchema.parse(
      authIntrospectionApiResponse,
    ),
  );
}

export function authIntrospectionApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiResponse' from JSON`,
  );
}
