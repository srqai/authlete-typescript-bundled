/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const JoseVerifyApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type JoseVerifyApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type JoseVerifyApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody?: JoseVerifyApiFormRequestBody | undefined;
};

export type JoseVerifyApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The result of the verification on the JOSE object.
   *
   * @remarks
   */
  valid?: boolean | undefined;
  /**
   * The result of the signature verification.
   *
   * @remarks
   */
  signatureValid?: boolean | undefined;
  /**
   * The list of missing claims.
   *
   * @remarks
   */
  missingClaims?: Array<string> | undefined;
  /**
   * The list of invalid claims.
   *
   * @remarks
   */
  invalidClaims?: Array<string> | undefined;
  /**
   * The list of error messages.
   *
   * @remarks
   */
  errorDescriptions?: Array<string> | undefined;
};

/** @internal */
export const JoseVerifyApiFormRequestBody$inboundSchema: z.ZodType<
  JoseVerifyApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type JoseVerifyApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiFormRequestBody$outboundSchema: z.ZodType<
  JoseVerifyApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormRequestBody$ {
  /** @deprecated use `JoseVerifyApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiFormRequestBody$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiFormRequestBody$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormRequestBody$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormRequestBody$Outbound;
}

export function joseVerifyApiFormRequestBodyToJSON(
  joseVerifyApiFormRequestBody: JoseVerifyApiFormRequestBody,
): string {
  return JSON.stringify(
    JoseVerifyApiFormRequestBody$outboundSchema.parse(
      joseVerifyApiFormRequestBody,
    ),
  );
}

export function joseVerifyApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const JoseVerifyApiFormRequest$inboundSchema: z.ZodType<
  JoseVerifyApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => JoseVerifyApiFormRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type JoseVerifyApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody?: JoseVerifyApiFormRequestBody$Outbound | undefined;
};

/** @internal */
export const JoseVerifyApiFormRequest$outboundSchema: z.ZodType<
  JoseVerifyApiFormRequest$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => JoseVerifyApiFormRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormRequest$ {
  /** @deprecated use `JoseVerifyApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiFormRequest$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiFormRequest$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormRequest$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormRequest$Outbound;
}

export function joseVerifyApiFormRequestToJSON(
  joseVerifyApiFormRequest: JoseVerifyApiFormRequest,
): string {
  return JSON.stringify(
    JoseVerifyApiFormRequest$outboundSchema.parse(joseVerifyApiFormRequest),
  );
}

export function joseVerifyApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiFormRequest' from JSON`,
  );
}

/** @internal */
export const JoseVerifyApiFormResponse$inboundSchema: z.ZodType<
  JoseVerifyApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  valid: z.boolean().optional(),
  signatureValid: z.boolean().optional(),
  missingClaims: z.array(z.string()).optional(),
  invalidClaims: z.array(z.string()).optional(),
  errorDescriptions: z.array(z.string()).optional(),
});

/** @internal */
export type JoseVerifyApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  valid?: boolean | undefined;
  signatureValid?: boolean | undefined;
  missingClaims?: Array<string> | undefined;
  invalidClaims?: Array<string> | undefined;
  errorDescriptions?: Array<string> | undefined;
};

/** @internal */
export const JoseVerifyApiFormResponse$outboundSchema: z.ZodType<
  JoseVerifyApiFormResponse$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  valid: z.boolean().optional(),
  signatureValid: z.boolean().optional(),
  missingClaims: z.array(z.string()).optional(),
  invalidClaims: z.array(z.string()).optional(),
  errorDescriptions: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormResponse$ {
  /** @deprecated use `JoseVerifyApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiFormResponse$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiFormResponse$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormResponse$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormResponse$Outbound;
}

export function joseVerifyApiFormResponseToJSON(
  joseVerifyApiFormResponse: JoseVerifyApiFormResponse,
): string {
  return JSON.stringify(
    JoseVerifyApiFormResponse$outboundSchema.parse(joseVerifyApiFormResponse),
  );
}

export function joseVerifyApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiFormResponse' from JSON`,
  );
}
