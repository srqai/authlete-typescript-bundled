/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciOfferInfoApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciOfferInfoApiRequestBody = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
};

export type VciOfferInfoApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciOfferInfoApiRequestBody;
};

/**
 * The result of the `/vci/offer/info` API call.
 */
export const VciOfferInfoApiAction = {
  Ok: "OK",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  CallerError: "CALLER_ERROR",
  AuthleteError: "AUTHLETE_ERROR",
} as const;
/**
 * The result of the `/vci/offer/info` API call.
 */
export type VciOfferInfoApiAction = ClosedEnum<typeof VciOfferInfoApiAction>;

export type VciOfferInfoApiProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type VciOfferInfoApiInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The credential offer in the JSON format.
   */
  credentialOffer?: string | undefined;
  /**
   * The identifier of the credential issuer.
   */
  credentialIssuer?: string | undefined;
  /**
   * The value of the `credentials` object in the JSON format.
   */
  credentials?: string | undefined;
  /**
   * The flag indicating whether the `authorization_code` object is
   *
   * @remarks
   * included in the `grants` object.
   */
  authorizationCodeGrantIncluded?: boolean | undefined;
  /**
   * The flag indicating whether the `issuer_state` property is
   *
   * @remarks
   * included in the `authorization_code` object in the `grants`
   * object.
   */
  issuerStateIncluded?: boolean | undefined;
  /**
   * The value of the `issuer_state` property in the
   *
   * @remarks
   * `authorization_code` object in the `grants` object.
   */
  issuerState?: string | undefined;
  /**
   * The flag indicating whether the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object is
   * included in the `grants` object.
   */
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  /**
   * The value of the `pre-authorized_code` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  preAuthorizedCode?: string | undefined;
  /**
   * The value of the `user_pin_required` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  userPinRequired?: boolean | undefined;
  /**
   * The value of the user PIN associated with the credential offer.
   */
  userPin?: string | undefined;
  /**
   * The subject associated with the credential offer.
   */
  subject?: string | undefined;
  /**
   * The time at which the credential offer will expire.
   */
  expiresAt?: number | undefined;
  /**
   * The general-purpose arbitrary string.
   */
  context?: string | undefined;
  /**
   * Extra properties to associate with the credential offer.
   */
  properties?: Array<VciOfferInfoApiProperty> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT
   *
   * @remarks
   * access token.
   */
  jwtAtClaims?: string | undefined;
  /**
   * The time at which the user authentication was performed during
   *
   * @remarks
   * the course of issuing the credential offer.
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication
   *
   * @remarks
   * performed during the course of issuing the credential offer.
   */
  acr?: string | undefined;
};

export type VciOfferInfoApiResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The result of the `/vci/offer/info` API call.
   */
  action?: VciOfferInfoApiAction | undefined;
  info?: VciOfferInfoApiInfo | undefined;
};

/** @internal */
export const VciOfferInfoApiRequestBody$inboundSchema: z.ZodType<
  VciOfferInfoApiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
});

/** @internal */
export type VciOfferInfoApiRequestBody$Outbound = {
  identifier?: string | undefined;
};

/** @internal */
export const VciOfferInfoApiRequestBody$outboundSchema: z.ZodType<
  VciOfferInfoApiRequestBody$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiRequestBody
> = z.object({
  identifier: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiRequestBody$ {
  /** @deprecated use `VciOfferInfoApiRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiRequestBody$inboundSchema;
  /** @deprecated use `VciOfferInfoApiRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiRequestBody$outboundSchema;
  /** @deprecated use `VciOfferInfoApiRequestBody$Outbound` instead. */
  export type Outbound = VciOfferInfoApiRequestBody$Outbound;
}

export function vciOfferInfoApiRequestBodyToJSON(
  vciOfferInfoApiRequestBody: VciOfferInfoApiRequestBody,
): string {
  return JSON.stringify(
    VciOfferInfoApiRequestBody$outboundSchema.parse(vciOfferInfoApiRequestBody),
  );
}

export function vciOfferInfoApiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiRequestBody' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiRequest$inboundSchema: z.ZodType<
  VciOfferInfoApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciOfferInfoApiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciOfferInfoApiRequest$Outbound = {
  serviceId: string;
  RequestBody: VciOfferInfoApiRequestBody$Outbound;
};

/** @internal */
export const VciOfferInfoApiRequest$outboundSchema: z.ZodType<
  VciOfferInfoApiRequest$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciOfferInfoApiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiRequest$ {
  /** @deprecated use `VciOfferInfoApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiRequest$inboundSchema;
  /** @deprecated use `VciOfferInfoApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiRequest$outboundSchema;
  /** @deprecated use `VciOfferInfoApiRequest$Outbound` instead. */
  export type Outbound = VciOfferInfoApiRequest$Outbound;
}

export function vciOfferInfoApiRequestToJSON(
  vciOfferInfoApiRequest: VciOfferInfoApiRequest,
): string {
  return JSON.stringify(
    VciOfferInfoApiRequest$outboundSchema.parse(vciOfferInfoApiRequest),
  );
}

export function vciOfferInfoApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiRequest' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiAction$inboundSchema: z.ZodNativeEnum<
  typeof VciOfferInfoApiAction
> = z.nativeEnum(VciOfferInfoApiAction);

/** @internal */
export const VciOfferInfoApiAction$outboundSchema: z.ZodNativeEnum<
  typeof VciOfferInfoApiAction
> = VciOfferInfoApiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiAction$ {
  /** @deprecated use `VciOfferInfoApiAction$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiAction$inboundSchema;
  /** @deprecated use `VciOfferInfoApiAction$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiAction$outboundSchema;
}

/** @internal */
export const VciOfferInfoApiProperty$inboundSchema: z.ZodType<
  VciOfferInfoApiProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type VciOfferInfoApiProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const VciOfferInfoApiProperty$outboundSchema: z.ZodType<
  VciOfferInfoApiProperty$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiProperty$ {
  /** @deprecated use `VciOfferInfoApiProperty$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiProperty$inboundSchema;
  /** @deprecated use `VciOfferInfoApiProperty$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiProperty$outboundSchema;
  /** @deprecated use `VciOfferInfoApiProperty$Outbound` instead. */
  export type Outbound = VciOfferInfoApiProperty$Outbound;
}

export function vciOfferInfoApiPropertyToJSON(
  vciOfferInfoApiProperty: VciOfferInfoApiProperty,
): string {
  return JSON.stringify(
    VciOfferInfoApiProperty$outboundSchema.parse(vciOfferInfoApiProperty),
  );
}

export function vciOfferInfoApiPropertyFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiProperty' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiInfo$inboundSchema: z.ZodType<
  VciOfferInfoApiInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  credentials: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  userPinRequired: z.boolean().optional(),
  userPin: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(z.lazy(() => VciOfferInfoApiProperty$inboundSchema))
    .optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
});

/** @internal */
export type VciOfferInfoApiInfo$Outbound = {
  identifier?: string | undefined;
  credentialOffer?: string | undefined;
  credentialIssuer?: string | undefined;
  credentials?: string | undefined;
  authorizationCodeGrantIncluded?: boolean | undefined;
  issuerStateIncluded?: boolean | undefined;
  issuerState?: string | undefined;
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  preAuthorizedCode?: string | undefined;
  userPinRequired?: boolean | undefined;
  userPin?: string | undefined;
  subject?: string | undefined;
  expiresAt?: number | undefined;
  context?: string | undefined;
  properties?: Array<VciOfferInfoApiProperty$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
};

/** @internal */
export const VciOfferInfoApiInfo$outboundSchema: z.ZodType<
  VciOfferInfoApiInfo$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiInfo
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  credentials: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  userPinRequired: z.boolean().optional(),
  userPin: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(z.lazy(() => VciOfferInfoApiProperty$outboundSchema))
    .optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiInfo$ {
  /** @deprecated use `VciOfferInfoApiInfo$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiInfo$inboundSchema;
  /** @deprecated use `VciOfferInfoApiInfo$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiInfo$outboundSchema;
  /** @deprecated use `VciOfferInfoApiInfo$Outbound` instead. */
  export type Outbound = VciOfferInfoApiInfo$Outbound;
}

export function vciOfferInfoApiInfoToJSON(
  vciOfferInfoApiInfo: VciOfferInfoApiInfo,
): string {
  return JSON.stringify(
    VciOfferInfoApiInfo$outboundSchema.parse(vciOfferInfoApiInfo),
  );
}

export function vciOfferInfoApiInfoFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiInfo' from JSON`,
  );
}

/** @internal */
export const VciOfferInfoApiResponse$inboundSchema: z.ZodType<
  VciOfferInfoApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciOfferInfoApiAction$inboundSchema.optional(),
  info: z.lazy(() => VciOfferInfoApiInfo$inboundSchema).optional(),
});

/** @internal */
export type VciOfferInfoApiResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  info?: VciOfferInfoApiInfo$Outbound | undefined;
};

/** @internal */
export const VciOfferInfoApiResponse$outboundSchema: z.ZodType<
  VciOfferInfoApiResponse$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciOfferInfoApiAction$outboundSchema.optional(),
  info: z.lazy(() => VciOfferInfoApiInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiResponse$ {
  /** @deprecated use `VciOfferInfoApiResponse$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiResponse$inboundSchema;
  /** @deprecated use `VciOfferInfoApiResponse$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiResponse$outboundSchema;
  /** @deprecated use `VciOfferInfoApiResponse$Outbound` instead. */
  export type Outbound = VciOfferInfoApiResponse$Outbound;
}

export function vciOfferInfoApiResponseToJSON(
  vciOfferInfoApiResponse: VciOfferInfoApiResponse,
): string {
  return JSON.stringify(
    VciOfferInfoApiResponse$outboundSchema.parse(vciOfferInfoApiResponse),
  );
}

export function vciOfferInfoApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiResponse' from JSON`,
  );
}
