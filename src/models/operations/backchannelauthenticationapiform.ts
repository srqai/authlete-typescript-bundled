/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BackchannelAuthenticationApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type BackchannelAuthenticationApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type BackchannelAuthenticationApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: BackchannelAuthenticationApiFormRequestBody;
};

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationApiFormAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  UserIdentification: "USER_IDENTIFICATION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationApiFormAction = ClosedEnum<
  typeof BackchannelAuthenticationApiFormAction
>;

export type BackchannelAuthenticationApiFormDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiFormAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiFormScope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<BackchannelAuthenticationApiFormDescription> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<BackchannelAuthenticationApiFormAttribute> | undefined;
};

export type BackchannelAuthenticationApiFormElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type BackchannelAuthenticationApiFormAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<BackchannelAuthenticationApiFormElement> | undefined;
};

export type BackchannelAuthenticationApiFormServiceAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiFormClientAttribute = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type BackchannelAuthenticationApiFormDynamicScope = {
  /**
   * The scope name.
   */
  name?: string | undefined;
  /**
   * The scope value.
   */
  value?: string | undefined;
};

export const BackchannelAuthenticationApiFormDeliveryMode = {
  Ping: "PING",
  Poll: "POLL",
  Push: "PUSH",
} as const;
export type BackchannelAuthenticationApiFormDeliveryMode = ClosedEnum<
  typeof BackchannelAuthenticationApiFormDeliveryMode
>;

/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export const BackchannelAuthenticationApiFormGmAction = {
  Create: "CREATE",
  Query: "QUERY",
  Replace: "REPLACE",
  Revoke: "REVOKE",
  Merge: "MERGE",
} as const;
/**
 * The grant management action of the device authorization request.
 *
 * @remarks
 *
 * The `grant_management_action` request parameter is defined in
 * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
 */
export type BackchannelAuthenticationApiFormGmAction = ClosedEnum<
  typeof BackchannelAuthenticationApiFormGmAction
>;

export type BackchannelAuthenticationApiFormGrantScope = {
  /**
   * Space-delimited scopes.
   *
   * @remarks
   */
  scope?: string | undefined;
  /**
   * List of resource indicators.
   *
   * @remarks
   */
  resource?: Array<string> | undefined;
};

export type BackchannelAuthenticationApiFormGrantElement = {
  /**
   * The type of this element.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
   * This field MAY define which other elements are allowed in the request. This element is REQUIRED."_
   *
   * This property is always NOT `null`.
   */
  type: string;
  /**
   * The resources and/or resource servers. This property may be `null`.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
   * the resource or resource server. This is typically composed of URIs."_
   *
   * This property may be `null`.
   */
  locations?: Array<string> | undefined;
  /**
   * The actions.
   *
   * @remarks
   *
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
   * to be taken at the resource. The values of the strings are determined by the API being protected."_
   *
   * This property may be `null`.
   */
  actions?: Array<string> | undefined;
  /**
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
   *
   * @remarks
   * from the resource."_
   *
   * This property may be `null`.
   */
  dataTypes?: Array<string> | undefined;
  /**
   * The identifier of a specific resource.
   *
   * @remarks
   * From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_
   *
   * This property may be `null`.
   */
  identifier?: string | undefined;
  /**
   * The types or levels of privilege.
   *
   * @remarks
   * From "OAuth 2.0 Rich Authorization Requests": _"An array of strings representing the types or
   * levels of privilege being requested at the resource."_
   *
   * This property may be `null`.
   */
  privileges?: Array<string> | undefined;
  /**
   * The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
   *
   * @remarks
   * The content and semantics are specific to the deployment and the use case implemented.
   */
  otherFields?: string | undefined;
};

/**
 * The authorization details. This represents the value of the `authorization_details`
 *
 * @remarks
 * request parameter in the preceding device authorization request which is defined in
 * "OAuth 2.0 Rich Authorization Requests".
 */
export type BackchannelAuthenticationApiFormGrantAuthorizationDetails = {
  /**
   * Elements of this authorization details.
   *
   * @remarks
   */
  elements?: Array<BackchannelAuthenticationApiFormGrantElement> | undefined;
};

export type BackchannelAuthenticationApiFormGrant = {
  scopes?: Array<BackchannelAuthenticationApiFormGrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | BackchannelAuthenticationApiFormGrantAuthorizationDetails
    | undefined;
};

export type BackchannelAuthenticationApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationApiFormAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the backchannel
   *
   * @remarks
   * authentication request is the client ID alias. `false` if the value is the original
   * numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the backchannel authentication request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The scopes requested by the backchannel authentication request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `scope` request parameter in the backchannel
   * authentication request. However, because unregistered scopes are dropped on Authlete side,
   * if the `scope` request parameter contains unknown scopes, the list returned by this
   * property becomes different from the value of the `scope` request parameter.
   *
   * Note that `description` property and `descriptions` property of each `scope` object
   * in the array contained in this property is always null even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<BackchannelAuthenticationApiFormScope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   */
  claimNames?: Array<string> | undefined;
  /**
   * The client notification token included in the backchannel authentication request.
   *
   * @remarks
   */
  clientNotificationToken?: string | undefined;
  /**
   * The list of ACR values requested by the backchannel authentication request.
   *
   * @remarks
   *
   * Basically, this property holds the value of the `acr_values` request parameter in the
   * backchannel authentication request. However, because unsupported ACR values are dropped
   * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
   * the list returned by this property becomes different from the value of the `acr_values`
   * request parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The type of the hint for end-user identification which was included in the backchannel authentication request.
   *
   * @remarks
   */
  hintType?: string | undefined;
  /**
   * The value of the hint for end-user identification.
   *
   * @remarks
   */
  hint?: string | undefined;
  /**
   * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
   *
   * @remarks
   */
  sub?: string | undefined;
  /**
   * The binding message included in the backchannel authentication request.
   *
   * @remarks
   */
  bindingMessage?: string | undefined;
  /**
   * The binding message included in the backchannel authentication request.
   *
   * @remarks
   */
  userCode?: string | undefined;
  /**
   * The flag which indicates whether a user code is required.
   *
   * @remarks
   *
   * `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
   * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
   * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
   * are `true`.
   */
  userCodeRequired?: boolean | undefined;
  /**
   * The requested expiry for the authentication request ID (`auth_req_id`).
   *
   * @remarks
   */
  requestedExpiry?: number | undefined;
  /**
   * The request context of the backchannel authentication request.
   *
   * @remarks
   *
   * It is the value of the request_context claim in the signed authentication request and
   * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
   */
  requestContext?: string | undefined;
  /**
   * The warnings raised during processing the backchannel authentication request.
   *
   * @remarks
   */
  warnings?: Array<string> | undefined;
  /**
   * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
   *
   * @remarks
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  ticket?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?:
    | BackchannelAuthenticationApiFormAuthorizationDetails
    | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?:
    | Array<BackchannelAuthenticationApiFormServiceAttribute>
    | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?:
    | Array<BackchannelAuthenticationApiFormClientAttribute>
    | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?:
    | Array<BackchannelAuthenticationApiFormDynamicScope>
    | undefined;
  deliveryMode?: BackchannelAuthenticationApiFormDeliveryMode | undefined;
  /**
   * The client authentication method that was performed.
   *
   * @remarks
   */
  clientAuthMethod?: string | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: BackchannelAuthenticationApiFormGmAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: BackchannelAuthenticationApiFormGrant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormRequestBody$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiFormRequestBody$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormRequestBody$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormRequestBody
  > = z.object({
    clientLocked: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormRequestBody$ {
  /** @deprecated use `BackchannelAuthenticationApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormRequestBody$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormRequestBody$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormRequestBody$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormRequestBody$Outbound;
}

export function backchannelAuthenticationApiFormRequestBodyToJSON(
  backchannelAuthenticationApiFormRequestBody:
    BackchannelAuthenticationApiFormRequestBody,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormRequestBody$outboundSchema.parse(
      backchannelAuthenticationApiFormRequestBody,
    ),
  );
}

export function backchannelAuthenticationApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() =>
    BackchannelAuthenticationApiFormRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BackchannelAuthenticationApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: BackchannelAuthenticationApiFormRequestBody$Outbound;
};

/** @internal */
export const BackchannelAuthenticationApiFormRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() =>
    BackchannelAuthenticationApiFormRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormRequest$ {
  /** @deprecated use `BackchannelAuthenticationApiFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormRequest$Outbound;
}

export function backchannelAuthenticationApiFormRequestToJSON(
  backchannelAuthenticationApiFormRequest:
    BackchannelAuthenticationApiFormRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormRequest$outboundSchema.parse(
      backchannelAuthenticationApiFormRequest,
    ),
  );
}

export function backchannelAuthenticationApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormRequest' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormAction> = z.nativeEnum(
    BackchannelAuthenticationApiFormAction,
  );

/** @internal */
export const BackchannelAuthenticationApiFormAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormAction> =
    BackchannelAuthenticationApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormAction$ {
  /** @deprecated use `BackchannelAuthenticationApiFormAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiFormDescription$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormDescription,
    z.ZodTypeDef,
    unknown
  > = z.object({
    tag: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormDescription$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormDescription$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormDescription
  > = z.object({
    tag: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormDescription$ {
  /** @deprecated use `BackchannelAuthenticationApiFormDescription$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormDescription$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormDescription$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormDescription$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormDescription$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormDescription$Outbound;
}

export function backchannelAuthenticationApiFormDescriptionToJSON(
  backchannelAuthenticationApiFormDescription:
    BackchannelAuthenticationApiFormDescription,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormDescription$outboundSchema.parse(
      backchannelAuthenticationApiFormDescription,
    ),
  );
}

export function backchannelAuthenticationApiFormDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormDescription,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormDescription$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormDescription' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormAttribute$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiFormAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormAttribute$ {
  /** @deprecated use `BackchannelAuthenticationApiFormAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormAttribute$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormAttribute$Outbound;
}

export function backchannelAuthenticationApiFormAttributeToJSON(
  backchannelAuthenticationApiFormAttribute:
    BackchannelAuthenticationApiFormAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormAttribute$outboundSchema.parse(
      backchannelAuthenticationApiFormAttribute,
    ),
  );
}

export function backchannelAuthenticationApiFormAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormScope$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormDescription$inboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormAttribute$inboundSchema),
  ).optional(),
});

/** @internal */
export type BackchannelAuthenticationApiFormScope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?:
    | Array<BackchannelAuthenticationApiFormDescription$Outbound>
    | undefined;
  attributes?:
    | Array<BackchannelAuthenticationApiFormAttribute$Outbound>
    | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormScope$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormScope$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormScope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormDescription$outboundSchema),
  ).optional(),
  attributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormAttribute$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormScope$ {
  /** @deprecated use `BackchannelAuthenticationApiFormScope$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormScope$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormScope$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormScope$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormScope$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormScope$Outbound;
}

export function backchannelAuthenticationApiFormScopeToJSON(
  backchannelAuthenticationApiFormScope: BackchannelAuthenticationApiFormScope,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormScope$outboundSchema.parse(
      backchannelAuthenticationApiFormScope,
    ),
  );
}

export function backchannelAuthenticationApiFormScopeFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiFormScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiFormScope' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormElement$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormElement,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiFormElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormElement$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormElement$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormElement
> = z.object({
  type: z.string(),
  locations: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  dataTypes: z.array(z.string()).optional(),
  identifier: z.string().optional(),
  privileges: z.array(z.string()).optional(),
  otherFields: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormElement$ {
  /** @deprecated use `BackchannelAuthenticationApiFormElement$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormElement$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormElement$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormElement$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormElement$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormElement$Outbound;
}

export function backchannelAuthenticationApiFormElementToJSON(
  backchannelAuthenticationApiFormElement:
    BackchannelAuthenticationApiFormElement,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormElement$outboundSchema.parse(
      backchannelAuthenticationApiFormElement,
    ),
  );
}

export function backchannelAuthenticationApiFormElementFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormElement,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormElement$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormElement' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormAuthorizationDetails$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiFormElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormAuthorizationDetails$Outbound = {
  elements?:
    | Array<BackchannelAuthenticationApiFormElement$Outbound>
    | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormAuthorizationDetails$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiFormElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormAuthorizationDetails$ {
  /** @deprecated use `BackchannelAuthenticationApiFormAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormAuthorizationDetails$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormAuthorizationDetails$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormAuthorizationDetails$Outbound;
}

export function backchannelAuthenticationApiFormAuthorizationDetailsToJSON(
  backchannelAuthenticationApiFormAuthorizationDetails:
    BackchannelAuthenticationApiFormAuthorizationDetails,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormAuthorizationDetails$outboundSchema.parse(
      backchannelAuthenticationApiFormAuthorizationDetails,
    ),
  );
}

export function backchannelAuthenticationApiFormAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormAuthorizationDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormServiceAttribute$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormServiceAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormServiceAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormServiceAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormServiceAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormServiceAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormServiceAttribute$ {
  /** @deprecated use `BackchannelAuthenticationApiFormServiceAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormServiceAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormServiceAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormServiceAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormServiceAttribute$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormServiceAttribute$Outbound;
}

export function backchannelAuthenticationApiFormServiceAttributeToJSON(
  backchannelAuthenticationApiFormServiceAttribute:
    BackchannelAuthenticationApiFormServiceAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormServiceAttribute$outboundSchema.parse(
      backchannelAuthenticationApiFormServiceAttribute,
    ),
  );
}

export function backchannelAuthenticationApiFormServiceAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormServiceAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormServiceAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormServiceAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormClientAttribute$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormClientAttribute,
    z.ZodTypeDef,
    unknown
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormClientAttribute$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormClientAttribute$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormClientAttribute$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormClientAttribute
  > = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormClientAttribute$ {
  /** @deprecated use `BackchannelAuthenticationApiFormClientAttribute$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormClientAttribute$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormClientAttribute$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormClientAttribute$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormClientAttribute$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormClientAttribute$Outbound;
}

export function backchannelAuthenticationApiFormClientAttributeToJSON(
  backchannelAuthenticationApiFormClientAttribute:
    BackchannelAuthenticationApiFormClientAttribute,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormClientAttribute$outboundSchema.parse(
      backchannelAuthenticationApiFormClientAttribute,
    ),
  );
}

export function backchannelAuthenticationApiFormClientAttributeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormClientAttribute,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormClientAttribute$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormClientAttribute' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormDynamicScope$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormDynamicScope,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormDynamicScope$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormDynamicScope$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormDynamicScope$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormDynamicScope
  > = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormDynamicScope$ {
  /** @deprecated use `BackchannelAuthenticationApiFormDynamicScope$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormDynamicScope$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormDynamicScope$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormDynamicScope$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormDynamicScope$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormDynamicScope$Outbound;
}

export function backchannelAuthenticationApiFormDynamicScopeToJSON(
  backchannelAuthenticationApiFormDynamicScope:
    BackchannelAuthenticationApiFormDynamicScope,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormDynamicScope$outboundSchema.parse(
      backchannelAuthenticationApiFormDynamicScope,
    ),
  );
}

export function backchannelAuthenticationApiFormDynamicScopeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormDynamicScope,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormDynamicScope$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormDynamicScope' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormDeliveryMode$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormDeliveryMode> = z
    .nativeEnum(BackchannelAuthenticationApiFormDeliveryMode);

/** @internal */
export const BackchannelAuthenticationApiFormDeliveryMode$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormDeliveryMode> =
    BackchannelAuthenticationApiFormDeliveryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormDeliveryMode$ {
  /** @deprecated use `BackchannelAuthenticationApiFormDeliveryMode$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormDeliveryMode$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormDeliveryMode$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormDeliveryMode$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiFormGmAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormGmAction> = z
    .nativeEnum(BackchannelAuthenticationApiFormGmAction);

/** @internal */
export const BackchannelAuthenticationApiFormGmAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationApiFormGmAction> =
    BackchannelAuthenticationApiFormGmAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormGmAction$ {
  /** @deprecated use `BackchannelAuthenticationApiFormGmAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormGmAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGmAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormGmAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationApiFormGrantScope$inboundSchema:
  z.ZodType<BackchannelAuthenticationApiFormGrantScope, z.ZodTypeDef, unknown> =
    z.object({
      scope: z.string().optional(),
      resource: z.array(z.string()).optional(),
    });

/** @internal */
export type BackchannelAuthenticationApiFormGrantScope$Outbound = {
  scope?: string | undefined;
  resource?: Array<string> | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormGrantScope$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormGrantScope$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormGrantScope
  > = z.object({
    scope: z.string().optional(),
    resource: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormGrantScope$ {
  /** @deprecated use `BackchannelAuthenticationApiFormGrantScope$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormGrantScope$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrantScope$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormGrantScope$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrantScope$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormGrantScope$Outbound;
}

export function backchannelAuthenticationApiFormGrantScopeToJSON(
  backchannelAuthenticationApiFormGrantScope:
    BackchannelAuthenticationApiFormGrantScope,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormGrantScope$outboundSchema.parse(
      backchannelAuthenticationApiFormGrantScope,
    ),
  );
}

export function backchannelAuthenticationApiFormGrantScopeFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormGrantScope,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormGrantScope$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormGrantScope' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormGrantElement$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormGrantElement,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormGrantElement$Outbound = {
  type: string;
  locations?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  dataTypes?: Array<string> | undefined;
  identifier?: string | undefined;
  privileges?: Array<string> | undefined;
  otherFields?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormGrantElement$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormGrantElement$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormGrantElement
  > = z.object({
    type: z.string(),
    locations: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dataTypes: z.array(z.string()).optional(),
    identifier: z.string().optional(),
    privileges: z.array(z.string()).optional(),
    otherFields: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormGrantElement$ {
  /** @deprecated use `BackchannelAuthenticationApiFormGrantElement$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormGrantElement$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrantElement$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormGrantElement$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrantElement$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormGrantElement$Outbound;
}

export function backchannelAuthenticationApiFormGrantElementToJSON(
  backchannelAuthenticationApiFormGrantElement:
    BackchannelAuthenticationApiFormGrantElement,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormGrantElement$outboundSchema.parse(
      backchannelAuthenticationApiFormGrantElement,
    ),
  );
}

export function backchannelAuthenticationApiFormGrantElementFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormGrantElement,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormGrantElement$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormGrantElement' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormGrantAuthorizationDetails$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormGrantAuthorizationDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiFormGrantElement$inboundSchema),
    ).optional(),
  });

/** @internal */
export type BackchannelAuthenticationApiFormGrantAuthorizationDetails$Outbound =
  {
    elements?:
      | Array<BackchannelAuthenticationApiFormGrantElement$Outbound>
      | undefined;
  };

/** @internal */
export const BackchannelAuthenticationApiFormGrantAuthorizationDetails$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormGrantAuthorizationDetails
  > = z.object({
    elements: z.array(
      z.lazy(() => BackchannelAuthenticationApiFormGrantElement$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormGrantAuthorizationDetails$ {
  /** @deprecated use `BackchannelAuthenticationApiFormGrantAuthorizationDetails$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrantAuthorizationDetails$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrantAuthorizationDetails$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$Outbound;
}

export function backchannelAuthenticationApiFormGrantAuthorizationDetailsToJSON(
  backchannelAuthenticationApiFormGrantAuthorizationDetails:
    BackchannelAuthenticationApiFormGrantAuthorizationDetails,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$outboundSchema
      .parse(backchannelAuthenticationApiFormGrantAuthorizationDetails),
  );
}

export function backchannelAuthenticationApiFormGrantAuthorizationDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormGrantAuthorizationDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormGrantAuthorizationDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiFormGrantAuthorizationDetails' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormGrant$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormGrant,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormGrantScope$inboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$inboundSchema
  ).optional(),
});

/** @internal */
export type BackchannelAuthenticationApiFormGrant$Outbound = {
  scopes?:
    | Array<BackchannelAuthenticationApiFormGrantScope$Outbound>
    | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?:
    | BackchannelAuthenticationApiFormGrantAuthorizationDetails$Outbound
    | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormGrant$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormGrant$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormGrant
> = z.object({
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormGrantScope$outboundSchema),
  ).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiFormGrantAuthorizationDetails$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormGrant$ {
  /** @deprecated use `BackchannelAuthenticationApiFormGrant$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormGrant$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrant$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormGrant$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormGrant$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormGrant$Outbound;
}

export function backchannelAuthenticationApiFormGrantToJSON(
  backchannelAuthenticationApiFormGrant: BackchannelAuthenticationApiFormGrant,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormGrant$outboundSchema.parse(
      backchannelAuthenticationApiFormGrant,
    ),
  );
}

export function backchannelAuthenticationApiFormGrantFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiFormGrant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormGrant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiFormGrant' from JSON`,
  );
}

/** @internal */
export const BackchannelAuthenticationApiFormResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormScope$inboundSchema),
  ).optional(),
  claimNames: z.array(z.string()).optional(),
  clientNotificationToken: z.string().optional(),
  acrs: z.array(z.string()).optional(),
  hintType: z.string().optional(),
  hint: z.string().optional(),
  sub: z.string().optional(),
  bindingMessage: z.string().optional(),
  userCode: z.string().optional(),
  userCodeRequired: z.boolean().optional(),
  requestedExpiry: z.number().int().optional(),
  requestContext: z.string().optional(),
  warnings: z.array(z.string()).optional(),
  ticket: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiFormAuthorizationDetails$inboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() =>
      BackchannelAuthenticationApiFormServiceAttribute$inboundSchema
    ),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormClientAttribute$inboundSchema),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormDynamicScope$inboundSchema),
  ).optional(),
  deliveryMode: BackchannelAuthenticationApiFormDeliveryMode$inboundSchema
    .optional(),
  clientAuthMethod: z.string().optional(),
  gmAction: BackchannelAuthenticationApiFormGmAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => BackchannelAuthenticationApiFormGrant$inboundSchema)
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type BackchannelAuthenticationApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  scopes?: Array<BackchannelAuthenticationApiFormScope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  clientNotificationToken?: string | undefined;
  acrs?: Array<string> | undefined;
  hintType?: string | undefined;
  hint?: string | undefined;
  sub?: string | undefined;
  bindingMessage?: string | undefined;
  userCode?: string | undefined;
  userCodeRequired?: boolean | undefined;
  requestedExpiry?: number | undefined;
  requestContext?: string | undefined;
  warnings?: Array<string> | undefined;
  ticket?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?:
    | BackchannelAuthenticationApiFormAuthorizationDetails$Outbound
    | undefined;
  serviceAttributes?:
    | Array<BackchannelAuthenticationApiFormServiceAttribute$Outbound>
    | undefined;
  clientAttributes?:
    | Array<BackchannelAuthenticationApiFormClientAttribute$Outbound>
    | undefined;
  dynamicScopes?:
    | Array<BackchannelAuthenticationApiFormDynamicScope$Outbound>
    | undefined;
  deliveryMode?: string | undefined;
  clientAuthMethod?: string | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: BackchannelAuthenticationApiFormGrant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormResponse$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiFormResponse$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormScope$outboundSchema),
  ).optional(),
  claimNames: z.array(z.string()).optional(),
  clientNotificationToken: z.string().optional(),
  acrs: z.array(z.string()).optional(),
  hintType: z.string().optional(),
  hint: z.string().optional(),
  sub: z.string().optional(),
  bindingMessage: z.string().optional(),
  userCode: z.string().optional(),
  userCodeRequired: z.boolean().optional(),
  requestedExpiry: z.number().int().optional(),
  requestContext: z.string().optional(),
  warnings: z.array(z.string()).optional(),
  ticket: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: z.lazy(() =>
    BackchannelAuthenticationApiFormAuthorizationDetails$outboundSchema
  ).optional(),
  serviceAttributes: z.array(
    z.lazy(() =>
      BackchannelAuthenticationApiFormServiceAttribute$outboundSchema
    ),
  ).optional(),
  clientAttributes: z.array(
    z.lazy(() =>
      BackchannelAuthenticationApiFormClientAttribute$outboundSchema
    ),
  ).optional(),
  dynamicScopes: z.array(
    z.lazy(() => BackchannelAuthenticationApiFormDynamicScope$outboundSchema),
  ).optional(),
  deliveryMode: BackchannelAuthenticationApiFormDeliveryMode$outboundSchema
    .optional(),
  clientAuthMethod: z.string().optional(),
  gmAction: BackchannelAuthenticationApiFormGmAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: z.lazy(() => BackchannelAuthenticationApiFormGrant$outboundSchema)
    .optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormResponse$ {
  /** @deprecated use `BackchannelAuthenticationApiFormResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiFormResponse$Outbound;
}

export function backchannelAuthenticationApiFormResponseToJSON(
  backchannelAuthenticationApiFormResponse:
    BackchannelAuthenticationApiFormResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiFormResponse$outboundSchema.parse(
      backchannelAuthenticationApiFormResponse,
    ),
  );
}

export function backchannelAuthenticationApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationApiFormResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiFormResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationApiFormResponse' from JSON`,
  );
}
