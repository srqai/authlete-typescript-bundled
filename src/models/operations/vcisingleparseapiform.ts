/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciSingleParseApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciSingleParseApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type VciSingleParseApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciSingleParseApiFormRequestBody;
};

/**
 * The next action that the credential endpoint should take.
 */
export const VciSingleParseApiFormAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the credential endpoint should take.
 */
export type VciSingleParseApiFormAction = ClosedEnum<
  typeof VciSingleParseApiFormAction
>;

export type VciSingleParseApiFormInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The value of the format parameter in the credential request.
   */
  format?: string | undefined;
  /**
   * The binding key specified by the proof in the credential request.
   */
  bindingKey?: string | undefined;
  /**
   * The details about the credential request.
   */
  details?: string | undefined;
};

export type VciSingleParseApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the credential endpoint should take.
   */
  action?: VciSingleParseApiFormAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  info?: VciSingleParseApiFormInfo | undefined;
};

/** @internal */
export const VciSingleParseApiFormRequestBody$inboundSchema: z.ZodType<
  VciSingleParseApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type VciSingleParseApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiFormRequestBody$outboundSchema: z.ZodType<
  VciSingleParseApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormRequestBody$ {
  /** @deprecated use `VciSingleParseApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormRequestBody$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormRequestBody$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormRequestBody$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormRequestBody$Outbound;
}

export function vciSingleParseApiFormRequestBodyToJSON(
  vciSingleParseApiFormRequestBody: VciSingleParseApiFormRequestBody,
): string {
  return JSON.stringify(
    VciSingleParseApiFormRequestBody$outboundSchema.parse(
      vciSingleParseApiFormRequestBody,
    ),
  );
}

export function vciSingleParseApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const VciSingleParseApiFormRequest$inboundSchema: z.ZodType<
  VciSingleParseApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciSingleParseApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciSingleParseApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: VciSingleParseApiFormRequestBody$Outbound;
};

/** @internal */
export const VciSingleParseApiFormRequest$outboundSchema: z.ZodType<
  VciSingleParseApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciSingleParseApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormRequest$ {
  /** @deprecated use `VciSingleParseApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormRequest$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormRequest$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormRequest$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormRequest$Outbound;
}

export function vciSingleParseApiFormRequestToJSON(
  vciSingleParseApiFormRequest: VciSingleParseApiFormRequest,
): string {
  return JSON.stringify(
    VciSingleParseApiFormRequest$outboundSchema.parse(
      vciSingleParseApiFormRequest,
    ),
  );
}

export function vciSingleParseApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciSingleParseApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciSingleParseApiFormAction
> = z.nativeEnum(VciSingleParseApiFormAction);

/** @internal */
export const VciSingleParseApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciSingleParseApiFormAction
> = VciSingleParseApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormAction$ {
  /** @deprecated use `VciSingleParseApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormAction$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormAction$outboundSchema;
}

/** @internal */
export const VciSingleParseApiFormInfo$inboundSchema: z.ZodType<
  VciSingleParseApiFormInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  format: z.string().optional(),
  bindingKey: z.string().optional(),
  details: z.string().optional(),
});

/** @internal */
export type VciSingleParseApiFormInfo$Outbound = {
  identifier?: string | undefined;
  format?: string | undefined;
  bindingKey?: string | undefined;
  details?: string | undefined;
};

/** @internal */
export const VciSingleParseApiFormInfo$outboundSchema: z.ZodType<
  VciSingleParseApiFormInfo$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormInfo
> = z.object({
  identifier: z.string().optional(),
  format: z.string().optional(),
  bindingKey: z.string().optional(),
  details: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormInfo$ {
  /** @deprecated use `VciSingleParseApiFormInfo$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormInfo$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormInfo$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormInfo$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormInfo$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormInfo$Outbound;
}

export function vciSingleParseApiFormInfoToJSON(
  vciSingleParseApiFormInfo: VciSingleParseApiFormInfo,
): string {
  return JSON.stringify(
    VciSingleParseApiFormInfo$outboundSchema.parse(vciSingleParseApiFormInfo),
  );
}

export function vciSingleParseApiFormInfoFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiFormInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiFormInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiFormInfo' from JSON`,
  );
}

/** @internal */
export const VciSingleParseApiFormResponse$inboundSchema: z.ZodType<
  VciSingleParseApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleParseApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.lazy(() => VciSingleParseApiFormInfo$inboundSchema).optional(),
});

/** @internal */
export type VciSingleParseApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: VciSingleParseApiFormInfo$Outbound | undefined;
};

/** @internal */
export const VciSingleParseApiFormResponse$outboundSchema: z.ZodType<
  VciSingleParseApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleParseApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.lazy(() => VciSingleParseApiFormInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormResponse$ {
  /** @deprecated use `VciSingleParseApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiFormResponse$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiFormResponse$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormResponse$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormResponse$Outbound;
}

export function vciSingleParseApiFormResponseToJSON(
  vciSingleParseApiFormResponse: VciSingleParseApiFormResponse,
): string {
  return JSON.stringify(
    VciSingleParseApiFormResponse$outboundSchema.parse(
      vciSingleParseApiFormResponse,
    ),
  );
}

export function vciSingleParseApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseApiFormResponse' from JSON`,
  );
}
