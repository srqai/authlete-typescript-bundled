/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AuthTokenGetListApiServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type AuthTokenGetListApiRequest = {
  /**
   * Client Identifier (client ID or client ID alias).
   *
   * @remarks
   */
  clientIdentifier?: string | undefined;
  /**
   * Unique user ID.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * Start index of search results (inclusive). The default value is 0.
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive). The default value is 5.
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * A service ID.
   */
  serviceId: string;
};

export type AuthTokenGetListApiClientName = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

export type AuthTokenGetListApiDescription = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export const AuthTokenGetListApiClientType = {
  Public: "PUBLIC",
  Confidential: "CONFIDENTIAL",
} as const;
/**
 * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
 *
 * @remarks
 * for details.
 */
export type AuthTokenGetListApiClientType = ClosedEnum<
  typeof AuthTokenGetListApiClientType
>;

export type AuthTokenGetListApiClient = {
  /**
   * The sequential number of the client. The value of this property is assigned by Authlete.
   *
   * @remarks
   */
  number?: number | undefined;
  /**
   * The name of the client application. This property corresponds to `client_name` in
   *
   * @remarks
   * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientName?: string | undefined;
  /**
   * Client names with language tags. If the client application has different names for different
   *
   * @remarks
   * languages, this property can be used to register the names.
   */
  clientNames?: Array<AuthTokenGetListApiClientName> | undefined;
  /**
   * The description about the client application.
   */
  description?: string | undefined;
  /**
   * Descriptions about the client application with language tags. If the client application has different
   *
   * @remarks
   * descriptions for different languages, this property can be used to register the descriptions.
   */
  descriptions?: Array<AuthTokenGetListApiDescription> | undefined;
  /**
   * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
   */
  clientId?: number | undefined;
  /**
   * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
   *
   * @remarks
   * default, this is a string version of the `clientId` property.
   */
  clientIdAlias?: string | undefined;
  /**
   * Deprecated. Always set to `true`.
   */
  clientIdAliasEnabled?: boolean | undefined;
  /**
   * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
   *
   * @remarks
   * for details.
   */
  clientType?: AuthTokenGetListApiClientType | undefined;
};

/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export const AuthTokenGetListApiGrantType = {
  AuthorizationCode: "AUTHORIZATION_CODE",
  Implicit: "IMPLICIT",
  Password: "PASSWORD",
  ClientCredentials: "CLIENT_CREDENTIALS",
  RefreshToken: "REFRESH_TOKEN",
  Ciba: "CIBA",
  DeviceCode: "DEVICE_CODE",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The grant type of the access token when the access token was created.
 *
 * @remarks
 */
export type AuthTokenGetListApiGrantType = ClosedEnum<
  typeof AuthTokenGetListApiGrantType
>;

export type AuthTokenGetListApiProperty = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

export type AccessToken = {
  /**
   * The hash of the access token.
   */
  accessTokenHash?: string | undefined;
  /**
   * The timestamp at which the access token will expire.
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The hash of the refresh token.
   */
  refreshTokenHash?: string | undefined;
  /**
   * The timestamp at which the refresh token will expire.
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The timestamp at which the access token was first created.
   *
   * @remarks
   */
  createdAt?: number | undefined;
  /**
   * The timestamp at which the access token was last refreshed using the refresh token.
   *
   * @remarks
   */
  lastRefreshedAt?: number | undefined;
  /**
   * The ID of the client associated with the access token.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The subject (= unique user ID) associated with the access token.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  grantType?: AuthTokenGetListApiGrantType | undefined;
  /**
   * The scopes associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<AuthTokenGetListApiProperty> | undefined;
};

export type AuthTokenGetListApiResponse = {
  /**
   * Start index of search results (inclusive).
   *
   * @remarks
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive).
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * Unique ID of a client developer.
   *
   * @remarks
   */
  totalCount?: number | undefined;
  client?: AuthTokenGetListApiClient | undefined;
  /**
   * Unique user ID of an end-user.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * An array of access tokens.
   *
   * @remarks
   */
  accessTokens?: Array<AccessToken> | undefined;
};

/** @internal */
export const AuthTokenGetListApiRequest$inboundSchema: z.ZodType<
  AuthTokenGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  serviceId: z.string(),
});

/** @internal */
export type AuthTokenGetListApiRequest$Outbound = {
  clientIdentifier?: string | undefined;
  subject?: string | undefined;
  start?: number | undefined;
  end?: number | undefined;
  serviceId: string;
};

/** @internal */
export const AuthTokenGetListApiRequest$outboundSchema: z.ZodType<
  AuthTokenGetListApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiRequest
> = z.object({
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  serviceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiRequest$ {
  /** @deprecated use `AuthTokenGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiRequest$Outbound;
}

export function authTokenGetListApiRequestToJSON(
  authTokenGetListApiRequest: AuthTokenGetListApiRequest,
): string {
  return JSON.stringify(
    AuthTokenGetListApiRequest$outboundSchema.parse(authTokenGetListApiRequest),
  );
}

export function authTokenGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiRequest' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiClientName$inboundSchema: z.ZodType<
  AuthTokenGetListApiClientName,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthTokenGetListApiClientName$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthTokenGetListApiClientName$outboundSchema: z.ZodType<
  AuthTokenGetListApiClientName$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiClientName
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiClientName$ {
  /** @deprecated use `AuthTokenGetListApiClientName$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiClientName$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiClientName$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiClientName$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiClientName$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiClientName$Outbound;
}

export function authTokenGetListApiClientNameToJSON(
  authTokenGetListApiClientName: AuthTokenGetListApiClientName,
): string {
  return JSON.stringify(
    AuthTokenGetListApiClientName$outboundSchema.parse(
      authTokenGetListApiClientName,
    ),
  );
}

export function authTokenGetListApiClientNameFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiClientName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiClientName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiClientName' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiDescription$inboundSchema: z.ZodType<
  AuthTokenGetListApiDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type AuthTokenGetListApiDescription$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const AuthTokenGetListApiDescription$outboundSchema: z.ZodType<
  AuthTokenGetListApiDescription$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiDescription
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiDescription$ {
  /** @deprecated use `AuthTokenGetListApiDescription$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiDescription$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiDescription$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiDescription$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiDescription$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiDescription$Outbound;
}

export function authTokenGetListApiDescriptionToJSON(
  authTokenGetListApiDescription: AuthTokenGetListApiDescription,
): string {
  return JSON.stringify(
    AuthTokenGetListApiDescription$outboundSchema.parse(
      authTokenGetListApiDescription,
    ),
  );
}

export function authTokenGetListApiDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiDescription' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiClientType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenGetListApiClientType
> = z.nativeEnum(AuthTokenGetListApiClientType);

/** @internal */
export const AuthTokenGetListApiClientType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenGetListApiClientType
> = AuthTokenGetListApiClientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiClientType$ {
  /** @deprecated use `AuthTokenGetListApiClientType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiClientType$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiClientType$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiClientType$outboundSchema;
}

/** @internal */
export const AuthTokenGetListApiClient$inboundSchema: z.ZodType<
  AuthTokenGetListApiClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => AuthTokenGetListApiClientName$inboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthTokenGetListApiDescription$inboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: AuthTokenGetListApiClientType$inboundSchema.optional(),
});

/** @internal */
export type AuthTokenGetListApiClient$Outbound = {
  number?: number | undefined;
  clientName?: string | undefined;
  clientNames?: Array<AuthTokenGetListApiClientName$Outbound> | undefined;
  description?: string | undefined;
  descriptions?: Array<AuthTokenGetListApiDescription$Outbound> | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasEnabled?: boolean | undefined;
  clientType?: string | undefined;
};

/** @internal */
export const AuthTokenGetListApiClient$outboundSchema: z.ZodType<
  AuthTokenGetListApiClient$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiClient
> = z.object({
  number: z.number().int().optional(),
  clientName: z.string().optional(),
  clientNames: z.array(
    z.lazy(() => AuthTokenGetListApiClientName$outboundSchema),
  ).optional(),
  description: z.string().optional(),
  descriptions: z.array(
    z.lazy(() => AuthTokenGetListApiDescription$outboundSchema),
  ).optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasEnabled: z.boolean().optional(),
  clientType: AuthTokenGetListApiClientType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiClient$ {
  /** @deprecated use `AuthTokenGetListApiClient$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiClient$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiClient$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiClient$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiClient$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiClient$Outbound;
}

export function authTokenGetListApiClientToJSON(
  authTokenGetListApiClient: AuthTokenGetListApiClient,
): string {
  return JSON.stringify(
    AuthTokenGetListApiClient$outboundSchema.parse(authTokenGetListApiClient),
  );
}

export function authTokenGetListApiClientFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiClient' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiGrantType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenGetListApiGrantType
> = z.nativeEnum(AuthTokenGetListApiGrantType);

/** @internal */
export const AuthTokenGetListApiGrantType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenGetListApiGrantType
> = AuthTokenGetListApiGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiGrantType$ {
  /** @deprecated use `AuthTokenGetListApiGrantType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiGrantType$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiGrantType$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiGrantType$outboundSchema;
}

/** @internal */
export const AuthTokenGetListApiProperty$inboundSchema: z.ZodType<
  AuthTokenGetListApiProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type AuthTokenGetListApiProperty$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const AuthTokenGetListApiProperty$outboundSchema: z.ZodType<
  AuthTokenGetListApiProperty$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiProperty
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiProperty$ {
  /** @deprecated use `AuthTokenGetListApiProperty$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiProperty$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiProperty$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiProperty$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiProperty$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiProperty$Outbound;
}

export function authTokenGetListApiPropertyToJSON(
  authTokenGetListApiProperty: AuthTokenGetListApiProperty,
): string {
  return JSON.stringify(
    AuthTokenGetListApiProperty$outboundSchema.parse(
      authTokenGetListApiProperty,
    ),
  );
}

export function authTokenGetListApiPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiProperty' from JSON`,
  );
}

/** @internal */
export const AccessToken$inboundSchema: z.ZodType<
  AccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessTokenHash: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  refreshTokenHash: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  createdAt: z.number().int().optional(),
  lastRefreshedAt: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  grantType: AuthTokenGetListApiGrantType$inboundSchema.optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(z.lazy(() => AuthTokenGetListApiProperty$inboundSchema))
    .optional(),
});

/** @internal */
export type AccessToken$Outbound = {
  accessTokenHash?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  refreshTokenHash?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  createdAt?: number | undefined;
  lastRefreshedAt?: number | undefined;
  clientId?: number | undefined;
  subject?: string | undefined;
  grantType?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<AuthTokenGetListApiProperty$Outbound> | undefined;
};

/** @internal */
export const AccessToken$outboundSchema: z.ZodType<
  AccessToken$Outbound,
  z.ZodTypeDef,
  AccessToken
> = z.object({
  accessTokenHash: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  refreshTokenHash: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  createdAt: z.number().int().optional(),
  lastRefreshedAt: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  grantType: AuthTokenGetListApiGrantType$outboundSchema.optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(z.lazy(() => AuthTokenGetListApiProperty$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessToken$ {
  /** @deprecated use `AccessToken$inboundSchema` instead. */
  export const inboundSchema = AccessToken$inboundSchema;
  /** @deprecated use `AccessToken$outboundSchema` instead. */
  export const outboundSchema = AccessToken$outboundSchema;
  /** @deprecated use `AccessToken$Outbound` instead. */
  export type Outbound = AccessToken$Outbound;
}

export function accessTokenToJSON(accessToken: AccessToken): string {
  return JSON.stringify(AccessToken$outboundSchema.parse(accessToken));
}

export function accessTokenFromJSON(
  jsonString: string,
): SafeParseResult<AccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessToken' from JSON`,
  );
}

/** @internal */
export const AuthTokenGetListApiResponse$inboundSchema: z.ZodType<
  AuthTokenGetListApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  client: z.lazy(() => AuthTokenGetListApiClient$inboundSchema).optional(),
  subject: z.string().optional(),
  accessTokens: z.array(z.lazy(() => AccessToken$inboundSchema)).optional(),
});

/** @internal */
export type AuthTokenGetListApiResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  totalCount?: number | undefined;
  client?: AuthTokenGetListApiClient$Outbound | undefined;
  subject?: string | undefined;
  accessTokens?: Array<AccessToken$Outbound> | undefined;
};

/** @internal */
export const AuthTokenGetListApiResponse$outboundSchema: z.ZodType<
  AuthTokenGetListApiResponse$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  client: z.lazy(() => AuthTokenGetListApiClient$outboundSchema).optional(),
  subject: z.string().optional(),
  accessTokens: z.array(z.lazy(() => AccessToken$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiResponse$ {
  /** @deprecated use `AuthTokenGetListApiResponse$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiResponse$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiResponse$outboundSchema` instead. */
  export const outboundSchema = AuthTokenGetListApiResponse$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiResponse$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiResponse$Outbound;
}

export function authTokenGetListApiResponseToJSON(
  authTokenGetListApiResponse: AuthTokenGetListApiResponse,
): string {
  return JSON.stringify(
    AuthTokenGetListApiResponse$outboundSchema.parse(
      authTokenGetListApiResponse,
    ),
  );
}

export function authTokenGetListApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenGetListApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenGetListApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenGetListApiResponse' from JSON`,
  );
}
