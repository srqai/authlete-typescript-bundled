/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VciJwksApiFormServerList = [
  /**
   * ðŸ‡ºðŸ‡¸ US Cluster
   */
  "https://us.authlete.com",
  /**
   * ðŸ‡¯ðŸ‡µ Japan Cluster
   */
  "https://jp.authlete.com",
  /**
   * ðŸ‡ªðŸ‡º Europe Cluster
   */
  "https://eu.authlete.com",
  /**
   * ðŸ‡§ðŸ‡· Brazil Cluster
   */
  "https://br.authlete.com",
] as const;

export type VciJwksApiFormRequestBody = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export type VciJwksApiFormRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  requestBody: VciJwksApiFormRequestBody;
};

/**
 * The next action that the implementation of the JWK Set document
 *
 * @remarks
 * endpoint of the credential issuer should take after getting a
 * response from Authlete's `/vci/jwks` API.
 */
export const VciJwksApiFormAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the JWK Set document
 *
 * @remarks
 * endpoint of the credential issuer should take after getting a
 * response from Authlete's `/vci/jwks` API.
 */
export type VciJwksApiFormAction = ClosedEnum<typeof VciJwksApiFormAction>;

export type VciJwksApiFormResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the JWK Set document
   *
   * @remarks
   * endpoint of the credential issuer should take after getting a
   * response from Authlete's `/vci/jwks` API.
   */
  action?: VciJwksApiFormAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwksApiFormRequestBody$inboundSchema: z.ZodType<
  VciJwksApiFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type VciJwksApiFormRequestBody$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiFormRequestBody$outboundSchema: z.ZodType<
  VciJwksApiFormRequestBody$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormRequestBody
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormRequestBody$ {
  /** @deprecated use `VciJwksApiFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormRequestBody$inboundSchema;
  /** @deprecated use `VciJwksApiFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormRequestBody$outboundSchema;
  /** @deprecated use `VciJwksApiFormRequestBody$Outbound` instead. */
  export type Outbound = VciJwksApiFormRequestBody$Outbound;
}

export function vciJwksApiFormRequestBodyToJSON(
  vciJwksApiFormRequestBody: VciJwksApiFormRequestBody,
): string {
  return JSON.stringify(
    VciJwksApiFormRequestBody$outboundSchema.parse(vciJwksApiFormRequestBody),
  );
}

export function vciJwksApiFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksApiFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksApiFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksApiFormRequestBody' from JSON`,
  );
}

/** @internal */
export const VciJwksApiFormRequest$inboundSchema: z.ZodType<
  VciJwksApiFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  RequestBody: z.lazy(() => VciJwksApiFormRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VciJwksApiFormRequest$Outbound = {
  serviceId: string;
  RequestBody: VciJwksApiFormRequestBody$Outbound;
};

/** @internal */
export const VciJwksApiFormRequest$outboundSchema: z.ZodType<
  VciJwksApiFormRequest$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormRequest
> = z.object({
  serviceId: z.string(),
  requestBody: z.lazy(() => VciJwksApiFormRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormRequest$ {
  /** @deprecated use `VciJwksApiFormRequest$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormRequest$inboundSchema;
  /** @deprecated use `VciJwksApiFormRequest$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormRequest$outboundSchema;
  /** @deprecated use `VciJwksApiFormRequest$Outbound` instead. */
  export type Outbound = VciJwksApiFormRequest$Outbound;
}

export function vciJwksApiFormRequestToJSON(
  vciJwksApiFormRequest: VciJwksApiFormRequest,
): string {
  return JSON.stringify(
    VciJwksApiFormRequest$outboundSchema.parse(vciJwksApiFormRequest),
  );
}

export function vciJwksApiFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksApiFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksApiFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksApiFormRequest' from JSON`,
  );
}

/** @internal */
export const VciJwksApiFormAction$inboundSchema: z.ZodNativeEnum<
  typeof VciJwksApiFormAction
> = z.nativeEnum(VciJwksApiFormAction);

/** @internal */
export const VciJwksApiFormAction$outboundSchema: z.ZodNativeEnum<
  typeof VciJwksApiFormAction
> = VciJwksApiFormAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormAction$ {
  /** @deprecated use `VciJwksApiFormAction$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormAction$inboundSchema;
  /** @deprecated use `VciJwksApiFormAction$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormAction$outboundSchema;
}

/** @internal */
export const VciJwksApiFormResponse$inboundSchema: z.ZodType<
  VciJwksApiFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwksApiFormAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciJwksApiFormResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwksApiFormResponse$outboundSchema: z.ZodType<
  VciJwksApiFormResponse$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwksApiFormAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormResponse$ {
  /** @deprecated use `VciJwksApiFormResponse$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormResponse$inboundSchema;
  /** @deprecated use `VciJwksApiFormResponse$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormResponse$outboundSchema;
  /** @deprecated use `VciJwksApiFormResponse$Outbound` instead. */
  export type Outbound = VciJwksApiFormResponse$Outbound;
}

export function vciJwksApiFormResponseToJSON(
  vciJwksApiFormResponse: VciJwksApiFormResponse,
): string {
  return JSON.stringify(
    VciJwksApiFormResponse$outboundSchema.parse(vciJwksApiFormResponse),
  );
}

export function vciJwksApiFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksApiFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksApiFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksApiFormResponse' from JSON`,
  );
}
