/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceUpdateApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceUpdateApiInternalServerErrorData;

  constructor(
    err: ServiceUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceUpdateApiInternalServerError";
  }
}

export type ServiceUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceUpdateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceUpdateApiForbiddenErrorData;

  constructor(
    err: ServiceUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceUpdateApiForbiddenError";
  }
}

export type ServiceUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceUpdateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceUpdateApiUnauthorizedErrorData;

  constructor(
    err: ServiceUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceUpdateApiUnauthorizedError";
  }
}

export type ServiceUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceUpdateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceUpdateApiBadRequestErrorData;

  constructor(
    err: ServiceUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceUpdateApiBadRequestError";
  }
}

/** @internal */
export const ServiceUpdateApiInternalServerError$inboundSchema: z.ZodType<
  ServiceUpdateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceUpdateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceUpdateApiInternalServerError$outboundSchema: z.ZodType<
  ServiceUpdateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ServiceUpdateApiInternalServerError
> = z.instanceof(ServiceUpdateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUpdateApiInternalServerError$ {
  /** @deprecated use `ServiceUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceUpdateApiForbiddenError$inboundSchema: z.ZodType<
  ServiceUpdateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceUpdateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceUpdateApiForbiddenError$outboundSchema: z.ZodType<
  ServiceUpdateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceUpdateApiForbiddenError
> = z.instanceof(ServiceUpdateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUpdateApiForbiddenError$ {
  /** @deprecated use `ServiceUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ServiceUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ServiceUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceUpdateApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceUpdateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceUpdateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceUpdateApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceUpdateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceUpdateApiUnauthorizedError
> = z.instanceof(ServiceUpdateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUpdateApiUnauthorizedError$ {
  /** @deprecated use `ServiceUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ServiceUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceUpdateApiBadRequestError$inboundSchema: z.ZodType<
  ServiceUpdateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceUpdateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceUpdateApiBadRequestError$outboundSchema: z.ZodType<
  ServiceUpdateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceUpdateApiBadRequestError
> = z.instanceof(ServiceUpdateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUpdateApiBadRequestError$ {
  /** @deprecated use `ServiceUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ServiceUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ServiceUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceUpdateApiBadRequestError$Outbound;
}
