/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type InfoApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class InfoApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: InfoApiInternalServerErrorData;

  constructor(
    err: InfoApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "InfoApiInternalServerError";
  }
}

export type InfoApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class InfoApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: InfoApiForbiddenErrorData;

  constructor(
    err: InfoApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "InfoApiForbiddenError";
  }
}

export type InfoApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class InfoApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: InfoApiUnauthorizedErrorData;

  constructor(
    err: InfoApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "InfoApiUnauthorizedError";
  }
}

export type InfoApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class InfoApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: InfoApiBadRequestErrorData;

  constructor(
    err: InfoApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "InfoApiBadRequestError";
  }
}

/** @internal */
export const InfoApiInternalServerError$inboundSchema: z.ZodType<
  InfoApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InfoApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InfoApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const InfoApiInternalServerError$outboundSchema: z.ZodType<
  InfoApiInternalServerError$Outbound,
  z.ZodTypeDef,
  InfoApiInternalServerError
> = z.instanceof(InfoApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfoApiInternalServerError$ {
  /** @deprecated use `InfoApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = InfoApiInternalServerError$inboundSchema;
  /** @deprecated use `InfoApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = InfoApiInternalServerError$outboundSchema;
  /** @deprecated use `InfoApiInternalServerError$Outbound` instead. */
  export type Outbound = InfoApiInternalServerError$Outbound;
}

/** @internal */
export const InfoApiForbiddenError$inboundSchema: z.ZodType<
  InfoApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InfoApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InfoApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const InfoApiForbiddenError$outboundSchema: z.ZodType<
  InfoApiForbiddenError$Outbound,
  z.ZodTypeDef,
  InfoApiForbiddenError
> = z.instanceof(InfoApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfoApiForbiddenError$ {
  /** @deprecated use `InfoApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = InfoApiForbiddenError$inboundSchema;
  /** @deprecated use `InfoApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = InfoApiForbiddenError$outboundSchema;
  /** @deprecated use `InfoApiForbiddenError$Outbound` instead. */
  export type Outbound = InfoApiForbiddenError$Outbound;
}

/** @internal */
export const InfoApiUnauthorizedError$inboundSchema: z.ZodType<
  InfoApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InfoApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InfoApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const InfoApiUnauthorizedError$outboundSchema: z.ZodType<
  InfoApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  InfoApiUnauthorizedError
> = z.instanceof(InfoApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfoApiUnauthorizedError$ {
  /** @deprecated use `InfoApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = InfoApiUnauthorizedError$inboundSchema;
  /** @deprecated use `InfoApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = InfoApiUnauthorizedError$outboundSchema;
  /** @deprecated use `InfoApiUnauthorizedError$Outbound` instead. */
  export type Outbound = InfoApiUnauthorizedError$Outbound;
}

/** @internal */
export const InfoApiBadRequestError$inboundSchema: z.ZodType<
  InfoApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InfoApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InfoApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const InfoApiBadRequestError$outboundSchema: z.ZodType<
  InfoApiBadRequestError$Outbound,
  z.ZodTypeDef,
  InfoApiBadRequestError
> = z.instanceof(InfoApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfoApiBadRequestError$ {
  /** @deprecated use `InfoApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = InfoApiBadRequestError$inboundSchema;
  /** @deprecated use `InfoApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = InfoApiBadRequestError$outboundSchema;
  /** @deprecated use `InfoApiBadRequestError$Outbound` instead. */
  export type Outbound = InfoApiBadRequestError$Outbound;
}
