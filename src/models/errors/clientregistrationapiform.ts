/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiFormInternalServerErrorData;

  constructor(
    err: ClientRegistrationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationApiFormInternalServerError";
  }
}

export type ClientRegistrationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiFormForbiddenErrorData;

  constructor(
    err: ClientRegistrationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationApiFormForbiddenError";
  }
}

export type ClientRegistrationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiFormUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationApiFormUnauthorizedError";
  }
}

export type ClientRegistrationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiFormBadRequestErrorData;

  constructor(
    err: ClientRegistrationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationApiFormBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationApiFormInternalServerError$inboundSchema:
  z.ZodType<
    ClientRegistrationApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationApiFormInternalServerError$outboundSchema:
  z.ZodType<
    ClientRegistrationApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationApiFormInternalServerError
  > = z.instanceof(ClientRegistrationApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormInternalServerError$ {
  /** @deprecated use `ClientRegistrationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiFormInternalServerError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiFormInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationApiFormForbiddenError$inboundSchema: z.ZodType<
  ClientRegistrationApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationApiFormForbiddenError$outboundSchema: z.ZodType<
  ClientRegistrationApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiFormForbiddenError
> = z.instanceof(ClientRegistrationApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormForbiddenError$ {
  /** @deprecated use `ClientRegistrationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiFormForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiFormForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationApiFormUnauthorizedError$inboundSchema:
  z.ZodType<ClientRegistrationApiFormUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientRegistrationApiFormUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientRegistrationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientRegistrationApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationApiFormUnauthorizedError
  > = z.instanceof(ClientRegistrationApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationApiFormBadRequestError$inboundSchema: z.ZodType<
  ClientRegistrationApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationApiFormBadRequestError$outboundSchema: z.ZodType<
  ClientRegistrationApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiFormBadRequestError
> = z.instanceof(ClientRegistrationApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiFormBadRequestError$ {
  /** @deprecated use `ClientRegistrationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiFormBadRequestError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiFormBadRequestError$Outbound;
}
