/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenRevokeApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenRevokeApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiFormInternalServerErrorData;

  constructor(
    err: AuthTokenRevokeApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenRevokeApiFormInternalServerError";
  }
}

export type AuthTokenRevokeApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenRevokeApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiFormForbiddenErrorData;

  constructor(
    err: AuthTokenRevokeApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenRevokeApiFormForbiddenError";
  }
}

export type AuthTokenRevokeApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenRevokeApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiFormUnauthorizedErrorData;

  constructor(
    err: AuthTokenRevokeApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenRevokeApiFormUnauthorizedError";
  }
}

export type AuthTokenRevokeApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenRevokeApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiFormBadRequestErrorData;

  constructor(
    err: AuthTokenRevokeApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenRevokeApiFormBadRequestError";
  }
}

/** @internal */
export const AuthTokenRevokeApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenRevokeApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthTokenRevokeApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthTokenRevokeApiFormInternalServerError
  > = z.instanceof(AuthTokenRevokeApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiFormInternalServerError$ {
  /** @deprecated use `AuthTokenRevokeApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenRevokeApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenRevokeApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenRevokeApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiFormForbiddenError
> = z.instanceof(AuthTokenRevokeApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiFormForbiddenError$ {
  /** @deprecated use `AuthTokenRevokeApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenRevokeApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenRevokeApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenRevokeApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiFormUnauthorizedError
> = z.instanceof(AuthTokenRevokeApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiFormUnauthorizedError$ {
  /** @deprecated use `AuthTokenRevokeApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenRevokeApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenRevokeApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenRevokeApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiFormBadRequestError
> = z.instanceof(AuthTokenRevokeApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiFormBadRequestError$ {
  /** @deprecated use `AuthTokenRevokeApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenRevokeApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiFormBadRequestError$Outbound;
}
