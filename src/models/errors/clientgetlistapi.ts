/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientGetListApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGetListApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGetListApiInternalServerErrorData;

  constructor(
    err: ClientGetListApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGetListApiInternalServerError";
  }
}

export type ClientGetListApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGetListApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGetListApiForbiddenErrorData;

  constructor(
    err: ClientGetListApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGetListApiForbiddenError";
  }
}

export type ClientGetListApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGetListApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGetListApiUnauthorizedErrorData;

  constructor(
    err: ClientGetListApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGetListApiUnauthorizedError";
  }
}

export type ClientGetListApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientGetListApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientGetListApiBadRequestErrorData;

  constructor(
    err: ClientGetListApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientGetListApiBadRequestError";
  }
}

/** @internal */
export const ClientGetListApiInternalServerError$inboundSchema: z.ZodType<
  ClientGetListApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetListApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetListApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGetListApiInternalServerError$outboundSchema: z.ZodType<
  ClientGetListApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientGetListApiInternalServerError
> = z.instanceof(ClientGetListApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiInternalServerError$ {
  /** @deprecated use `ClientGetListApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGetListApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientGetListApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientGetListApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientGetListApiInternalServerError$Outbound;
}

/** @internal */
export const ClientGetListApiForbiddenError$inboundSchema: z.ZodType<
  ClientGetListApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetListApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetListApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGetListApiForbiddenError$outboundSchema: z.ZodType<
  ClientGetListApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientGetListApiForbiddenError
> = z.instanceof(ClientGetListApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiForbiddenError$ {
  /** @deprecated use `ClientGetListApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientGetListApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientGetListApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientGetListApiForbiddenError$Outbound;
}

/** @internal */
export const ClientGetListApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientGetListApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetListApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetListApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGetListApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientGetListApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientGetListApiUnauthorizedError
> = z.instanceof(ClientGetListApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiUnauthorizedError$ {
  /** @deprecated use `ClientGetListApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientGetListApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGetListApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientGetListApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientGetListApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientGetListApiBadRequestError$inboundSchema: z.ZodType<
  ClientGetListApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetListApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetListApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientGetListApiBadRequestError$outboundSchema: z.ZodType<
  ClientGetListApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientGetListApiBadRequestError
> = z.instanceof(ClientGetListApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListApiBadRequestError$ {
  /** @deprecated use `ClientGetListApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ClientGetListApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientGetListApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ClientGetListApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientGetListApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientGetListApiBadRequestError$Outbound;
}
