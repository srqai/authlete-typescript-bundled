/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type DeviceAuthorizationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceAuthorizationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiInternalServerErrorData;

  constructor(
    err: DeviceAuthorizationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceAuthorizationApiInternalServerError";
  }
}

export type DeviceAuthorizationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceAuthorizationApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiForbiddenErrorData;

  constructor(
    err: DeviceAuthorizationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceAuthorizationApiForbiddenError";
  }
}

export type DeviceAuthorizationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceAuthorizationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiUnauthorizedErrorData;

  constructor(
    err: DeviceAuthorizationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceAuthorizationApiUnauthorizedError";
  }
}

export type DeviceAuthorizationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class DeviceAuthorizationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiBadRequestErrorData;

  constructor(
    err: DeviceAuthorizationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "DeviceAuthorizationApiBadRequestError";
  }
}

/** @internal */
export const DeviceAuthorizationApiInternalServerError$inboundSchema: z.ZodType<
  DeviceAuthorizationApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceAuthorizationApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceAuthorizationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiInternalServerError$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiInternalServerError$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiInternalServerError
  > = z.instanceof(DeviceAuthorizationApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiInternalServerError$ {
  /** @deprecated use `DeviceAuthorizationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiInternalServerError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiInternalServerError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiInternalServerError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiInternalServerError$Outbound;
}

/** @internal */
export const DeviceAuthorizationApiForbiddenError$inboundSchema: z.ZodType<
  DeviceAuthorizationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceAuthorizationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceAuthorizationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiForbiddenError$outboundSchema: z.ZodType<
  DeviceAuthorizationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiForbiddenError
> = z.instanceof(DeviceAuthorizationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiForbiddenError$ {
  /** @deprecated use `DeviceAuthorizationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiForbiddenError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiForbiddenError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiForbiddenError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiForbiddenError$Outbound;
}

/** @internal */
export const DeviceAuthorizationApiUnauthorizedError$inboundSchema: z.ZodType<
  DeviceAuthorizationApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceAuthorizationApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceAuthorizationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiUnauthorizedError$outboundSchema: z.ZodType<
  DeviceAuthorizationApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiUnauthorizedError
> = z.instanceof(DeviceAuthorizationApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiUnauthorizedError$ {
  /** @deprecated use `DeviceAuthorizationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiUnauthorizedError$Outbound;
}

/** @internal */
export const DeviceAuthorizationApiBadRequestError$inboundSchema: z.ZodType<
  DeviceAuthorizationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceAuthorizationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceAuthorizationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiBadRequestError$outboundSchema: z.ZodType<
  DeviceAuthorizationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiBadRequestError
> = z.instanceof(DeviceAuthorizationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiBadRequestError$ {
  /** @deprecated use `DeviceAuthorizationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiBadRequestError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiBadRequestError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiBadRequestError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiBadRequestError$Outbound;
}
