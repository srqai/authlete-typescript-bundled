/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientAuthorizationGetListApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationGetListApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationGetListApiInternalServerErrorData;

  constructor(
    err: ClientAuthorizationGetListApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationGetListApiInternalServerError";
  }
}

export type ClientAuthorizationGetListApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationGetListApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationGetListApiForbiddenErrorData;

  constructor(
    err: ClientAuthorizationGetListApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationGetListApiForbiddenError";
  }
}

export type ClientAuthorizationGetListApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationGetListApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationGetListApiUnauthorizedErrorData;

  constructor(
    err: ClientAuthorizationGetListApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationGetListApiUnauthorizedError";
  }
}

export type ClientAuthorizationGetListApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientAuthorizationGetListApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationGetListApiBadRequestErrorData;

  constructor(
    err: ClientAuthorizationGetListApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientAuthorizationGetListApiBadRequestError";
  }
}

/** @internal */
export const ClientAuthorizationGetListApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationGetListApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationGetListApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationGetListApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationGetListApiInternalServerError
  > = z.instanceof(ClientAuthorizationGetListApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiInternalServerError$ {
  /** @deprecated use `ClientAuthorizationGetListApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationGetListApiInternalServerError$Outbound;
}

/** @internal */
export const ClientAuthorizationGetListApiForbiddenError$inboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationGetListApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationGetListApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationGetListApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationGetListApiForbiddenError
  > = z.instanceof(ClientAuthorizationGetListApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiForbiddenError$ {
  /** @deprecated use `ClientAuthorizationGetListApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiForbiddenError$Outbound;
}

/** @internal */
export const ClientAuthorizationGetListApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationGetListApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationGetListApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationGetListApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationGetListApiUnauthorizedError
  > = z.instanceof(ClientAuthorizationGetListApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiUnauthorizedError$ {
  /** @deprecated use `ClientAuthorizationGetListApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationGetListApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientAuthorizationGetListApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationGetListApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationGetListApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientAuthorizationGetListApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationGetListApiBadRequestError
  > = z.instanceof(ClientAuthorizationGetListApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiBadRequestError$ {
  /** @deprecated use `ClientAuthorizationGetListApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiBadRequestError$Outbound;
}
