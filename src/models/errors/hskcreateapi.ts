/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type HskCreateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskCreateApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiInternalServerErrorData;

  constructor(
    err: HskCreateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskCreateApiInternalServerError";
  }
}

export type HskCreateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskCreateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiForbiddenErrorData;

  constructor(
    err: HskCreateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskCreateApiForbiddenError";
  }
}

export type HskCreateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskCreateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiUnauthorizedErrorData;

  constructor(
    err: HskCreateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskCreateApiUnauthorizedError";
  }
}

export type HskCreateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class HskCreateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiBadRequestErrorData;

  constructor(
    err: HskCreateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "HskCreateApiBadRequestError";
  }
}

/** @internal */
export const HskCreateApiInternalServerError$inboundSchema: z.ZodType<
  HskCreateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiInternalServerError$outboundSchema: z.ZodType<
  HskCreateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  HskCreateApiInternalServerError
> = z.instanceof(HskCreateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiInternalServerError$ {
  /** @deprecated use `HskCreateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiInternalServerError$inboundSchema;
  /** @deprecated use `HskCreateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiInternalServerError$outboundSchema;
  /** @deprecated use `HskCreateApiInternalServerError$Outbound` instead. */
  export type Outbound = HskCreateApiInternalServerError$Outbound;
}

/** @internal */
export const HskCreateApiForbiddenError$inboundSchema: z.ZodType<
  HskCreateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiForbiddenError$outboundSchema: z.ZodType<
  HskCreateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  HskCreateApiForbiddenError
> = z.instanceof(HskCreateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiForbiddenError$ {
  /** @deprecated use `HskCreateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiForbiddenError$inboundSchema;
  /** @deprecated use `HskCreateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiForbiddenError$outboundSchema;
  /** @deprecated use `HskCreateApiForbiddenError$Outbound` instead. */
  export type Outbound = HskCreateApiForbiddenError$Outbound;
}

/** @internal */
export const HskCreateApiUnauthorizedError$inboundSchema: z.ZodType<
  HskCreateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiUnauthorizedError$outboundSchema: z.ZodType<
  HskCreateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  HskCreateApiUnauthorizedError
> = z.instanceof(HskCreateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiUnauthorizedError$ {
  /** @deprecated use `HskCreateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `HskCreateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `HskCreateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = HskCreateApiUnauthorizedError$Outbound;
}

/** @internal */
export const HskCreateApiBadRequestError$inboundSchema: z.ZodType<
  HskCreateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const HskCreateApiBadRequestError$outboundSchema: z.ZodType<
  HskCreateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  HskCreateApiBadRequestError
> = z.instanceof(HskCreateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiBadRequestError$ {
  /** @deprecated use `HskCreateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiBadRequestError$inboundSchema;
  /** @deprecated use `HskCreateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiBadRequestError$outboundSchema;
  /** @deprecated use `HskCreateApiBadRequestError$Outbound` instead. */
  export type Outbound = HskCreateApiBadRequestError$Outbound;
}
