/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type PushedAuthReqApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PushedAuthReqApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiInternalServerErrorData;

  constructor(
    err: PushedAuthReqApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PushedAuthReqApiInternalServerError";
  }
}

export type PushedAuthReqApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PushedAuthReqApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiForbiddenErrorData;

  constructor(
    err: PushedAuthReqApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PushedAuthReqApiForbiddenError";
  }
}

export type PushedAuthReqApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PushedAuthReqApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiUnauthorizedErrorData;

  constructor(
    err: PushedAuthReqApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PushedAuthReqApiUnauthorizedError";
  }
}

export type PushedAuthReqApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class PushedAuthReqApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiBadRequestErrorData;

  constructor(
    err: PushedAuthReqApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "PushedAuthReqApiBadRequestError";
  }
}

/** @internal */
export const PushedAuthReqApiInternalServerError$inboundSchema: z.ZodType<
  PushedAuthReqApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const PushedAuthReqApiInternalServerError$outboundSchema: z.ZodType<
  PushedAuthReqApiInternalServerError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiInternalServerError
> = z.instanceof(PushedAuthReqApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiInternalServerError$ {
  /** @deprecated use `PushedAuthReqApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    PushedAuthReqApiInternalServerError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiInternalServerError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiInternalServerError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiInternalServerError$Outbound;
}

/** @internal */
export const PushedAuthReqApiForbiddenError$inboundSchema: z.ZodType<
  PushedAuthReqApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const PushedAuthReqApiForbiddenError$outboundSchema: z.ZodType<
  PushedAuthReqApiForbiddenError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiForbiddenError
> = z.instanceof(PushedAuthReqApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiForbiddenError$ {
  /** @deprecated use `PushedAuthReqApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiForbiddenError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiForbiddenError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiForbiddenError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiForbiddenError$Outbound;
}

/** @internal */
export const PushedAuthReqApiUnauthorizedError$inboundSchema: z.ZodType<
  PushedAuthReqApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const PushedAuthReqApiUnauthorizedError$outboundSchema: z.ZodType<
  PushedAuthReqApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiUnauthorizedError
> = z.instanceof(PushedAuthReqApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiUnauthorizedError$ {
  /** @deprecated use `PushedAuthReqApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiUnauthorizedError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiUnauthorizedError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiUnauthorizedError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiUnauthorizedError$Outbound;
}

/** @internal */
export const PushedAuthReqApiBadRequestError$inboundSchema: z.ZodType<
  PushedAuthReqApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiBadRequestError$outboundSchema: z.ZodType<
  PushedAuthReqApiBadRequestError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiBadRequestError
> = z.instanceof(PushedAuthReqApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiBadRequestError$ {
  /** @deprecated use `PushedAuthReqApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiBadRequestError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = PushedAuthReqApiBadRequestError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiBadRequestError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiBadRequestError$Outbound;
}
