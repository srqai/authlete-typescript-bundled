/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciOfferInfoApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferInfoApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiFormInternalServerErrorData;

  constructor(
    err: VciOfferInfoApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferInfoApiFormInternalServerError";
  }
}

export type VciOfferInfoApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferInfoApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiFormForbiddenErrorData;

  constructor(
    err: VciOfferInfoApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferInfoApiFormForbiddenError";
  }
}

export type VciOfferInfoApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferInfoApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiFormUnauthorizedErrorData;

  constructor(
    err: VciOfferInfoApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferInfoApiFormUnauthorizedError";
  }
}

export type VciOfferInfoApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciOfferInfoApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiFormBadRequestErrorData;

  constructor(
    err: VciOfferInfoApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciOfferInfoApiFormBadRequestError";
  }
}

/** @internal */
export const VciOfferInfoApiFormInternalServerError$inboundSchema: z.ZodType<
  VciOfferInfoApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiFormInternalServerError$outboundSchema: z.ZodType<
  VciOfferInfoApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormInternalServerError
> = z.instanceof(VciOfferInfoApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormInternalServerError$ {
  /** @deprecated use `VciOfferInfoApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferInfoApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferInfoApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciOfferInfoApiFormForbiddenError$inboundSchema: z.ZodType<
  VciOfferInfoApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiFormForbiddenError$outboundSchema: z.ZodType<
  VciOfferInfoApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormForbiddenError
> = z.instanceof(VciOfferInfoApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormForbiddenError$ {
  /** @deprecated use `VciOfferInfoApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferInfoApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciOfferInfoApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciOfferInfoApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciOfferInfoApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormUnauthorizedError
> = z.instanceof(VciOfferInfoApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormUnauthorizedError$ {
  /** @deprecated use `VciOfferInfoApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferInfoApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferInfoApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciOfferInfoApiFormBadRequestError$inboundSchema: z.ZodType<
  VciOfferInfoApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciOfferInfoApiFormBadRequestError$outboundSchema: z.ZodType<
  VciOfferInfoApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiFormBadRequestError
> = z.instanceof(VciOfferInfoApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiFormBadRequestError$ {
  /** @deprecated use `VciOfferInfoApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferInfoApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiFormBadRequestError$Outbound;
}
