/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$:
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerErrorData;

  constructor(
    err:
      PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name =
      "PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError";
  }
}

export type PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name =
      "PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError";
  }
}

export type PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name =
      "PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError";
  }
}

export type PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestErrorData =
  {
    /**
     * The code which represents the result of the API call.
     */
    resultCode?: string | undefined;
    /**
     * A short message which explains the result of the API call.
     */
    resultMessage?: string | undefined;
  };

export class PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name =
      "PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError";
  }
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError
  > = z.instanceof(
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormInternalServerError$Outbound;
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError
  > = z.instanceof(
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormForbiddenError$Outbound;
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError
  > = z.instanceof(
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormUnauthorizedError$Outbound;
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$Outbound =
  {
    resultCode?: string | undefined;
    resultMessage?: string | undefined;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError
  > = z.instanceof(
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateFormBadRequestError$Outbound;
}
