/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientAuthorizationUpdateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationUpdateApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiFormInternalServerErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationUpdateApiFormInternalServerError";
  }
}

export type ClientAuthorizationUpdateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationUpdateApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiFormForbiddenErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationUpdateApiFormForbiddenError";
  }
}

export type ClientAuthorizationUpdateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationUpdateApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiFormUnauthorizedErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationUpdateApiFormUnauthorizedError";
  }
}

export type ClientAuthorizationUpdateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientAuthorizationUpdateApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiFormBadRequestErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientAuthorizationUpdateApiFormBadRequestError";
  }
}

/** @internal */
export const ClientAuthorizationUpdateApiFormInternalServerError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormInternalServerError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiFormInternalServerError
  > = z.instanceof(ClientAuthorizationUpdateApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiFormInternalServerError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationUpdateApiFormInternalServerError$Outbound;
}

/** @internal */
export const ClientAuthorizationUpdateApiFormForbiddenError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormForbiddenError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiFormForbiddenError
  > = z.instanceof(ClientAuthorizationUpdateApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiFormForbiddenError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormForbiddenError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationUpdateApiFormForbiddenError$Outbound;
}

/** @internal */
export const ClientAuthorizationUpdateApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiFormUnauthorizedError
  > = z.instanceof(ClientAuthorizationUpdateApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiFormUnauthorizedError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationUpdateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const ClientAuthorizationUpdateApiFormBadRequestError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiFormBadRequestError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiFormBadRequestError
  > = z.instanceof(ClientAuthorizationUpdateApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiFormBadRequestError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationUpdateApiFormBadRequestError$Outbound;
}
