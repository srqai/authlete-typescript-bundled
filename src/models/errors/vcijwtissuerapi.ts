/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciJwtissuerApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwtissuerApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiInternalServerErrorData;

  constructor(
    err: VciJwtissuerApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwtissuerApiInternalServerError";
  }
}

export type VciJwtissuerApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwtissuerApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiForbiddenErrorData;

  constructor(
    err: VciJwtissuerApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwtissuerApiForbiddenError";
  }
}

export type VciJwtissuerApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwtissuerApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiUnauthorizedErrorData;

  constructor(
    err: VciJwtissuerApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwtissuerApiUnauthorizedError";
  }
}

export type VciJwtissuerApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciJwtissuerApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiBadRequestErrorData;

  constructor(
    err: VciJwtissuerApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciJwtissuerApiBadRequestError";
  }
}

/** @internal */
export const VciJwtissuerApiInternalServerError$inboundSchema: z.ZodType<
  VciJwtissuerApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwtissuerApiInternalServerError$outboundSchema: z.ZodType<
  VciJwtissuerApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiInternalServerError
> = z.instanceof(VciJwtissuerApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiInternalServerError$ {
  /** @deprecated use `VciJwtissuerApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiInternalServerError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciJwtissuerApiInternalServerError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiInternalServerError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiInternalServerError$Outbound;
}

/** @internal */
export const VciJwtissuerApiForbiddenError$inboundSchema: z.ZodType<
  VciJwtissuerApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwtissuerApiForbiddenError$outboundSchema: z.ZodType<
  VciJwtissuerApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiForbiddenError
> = z.instanceof(VciJwtissuerApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiForbiddenError$ {
  /** @deprecated use `VciJwtissuerApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiForbiddenError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiForbiddenError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiForbiddenError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiForbiddenError$Outbound;
}

/** @internal */
export const VciJwtissuerApiUnauthorizedError$inboundSchema: z.ZodType<
  VciJwtissuerApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwtissuerApiUnauthorizedError$outboundSchema: z.ZodType<
  VciJwtissuerApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiUnauthorizedError
> = z.instanceof(VciJwtissuerApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiUnauthorizedError$ {
  /** @deprecated use `VciJwtissuerApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciJwtissuerApiBadRequestError$inboundSchema: z.ZodType<
  VciJwtissuerApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciJwtissuerApiBadRequestError$outboundSchema: z.ZodType<
  VciJwtissuerApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiBadRequestError
> = z.instanceof(VciJwtissuerApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiBadRequestError$ {
  /** @deprecated use `VciJwtissuerApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiBadRequestError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerApiBadRequestError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiBadRequestError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiBadRequestError$Outbound;
}
