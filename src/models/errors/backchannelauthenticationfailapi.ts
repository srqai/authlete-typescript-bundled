/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationFailApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationFailApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationFailApiInternalServerError";
  }
}

export type BackchannelAuthenticationFailApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationFailApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationFailApiForbiddenError";
  }
}

export type BackchannelAuthenticationFailApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationFailApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationFailApiUnauthorizedError";
  }
}

export type BackchannelAuthenticationFailApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationFailApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationFailApiBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationFailApiInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationFailApiInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiInternalServerError
  > = z.instanceof(BackchannelAuthenticationFailApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationFailApiForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationFailApiForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiForbiddenError
  > = z.instanceof(BackchannelAuthenticationFailApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationFailApiUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationFailApiUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationFailApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationFailApiBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiBadRequestError
  > = z.instanceof(BackchannelAuthenticationFailApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiBadRequestError$Outbound;
}
