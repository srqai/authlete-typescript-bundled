/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGetApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGetApiInternalServerErrorData;

  constructor(
    err: ClientGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGetApiInternalServerError";
  }
}

export type ClientGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGetApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGetApiForbiddenErrorData;

  constructor(
    err: ClientGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGetApiForbiddenError";
  }
}

export type ClientGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGetApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGetApiUnauthorizedErrorData;

  constructor(
    err: ClientGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGetApiUnauthorizedError";
  }
}

export type ClientGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientGetApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientGetApiBadRequestErrorData;

  constructor(
    err: ClientGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientGetApiBadRequestError";
  }
}

/** @internal */
export const ClientGetApiInternalServerError$inboundSchema: z.ZodType<
  ClientGetApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGetApiInternalServerError$outboundSchema: z.ZodType<
  ClientGetApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientGetApiInternalServerError
> = z.instanceof(ClientGetApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiInternalServerError$ {
  /** @deprecated use `ClientGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientGetApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientGetApiInternalServerError$Outbound;
}

/** @internal */
export const ClientGetApiForbiddenError$inboundSchema: z.ZodType<
  ClientGetApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGetApiForbiddenError$outboundSchema: z.ZodType<
  ClientGetApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientGetApiForbiddenError
> = z.instanceof(ClientGetApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiForbiddenError$ {
  /** @deprecated use `ClientGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientGetApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientGetApiForbiddenError$Outbound;
}

/** @internal */
export const ClientGetApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientGetApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGetApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientGetApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientGetApiUnauthorizedError
> = z.instanceof(ClientGetApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiUnauthorizedError$ {
  /** @deprecated use `ClientGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientGetApiBadRequestError$inboundSchema: z.ZodType<
  ClientGetApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGetApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientGetApiBadRequestError$outboundSchema: z.ZodType<
  ClientGetApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientGetApiBadRequestError
> = z.instanceof(ClientGetApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetApiBadRequestError$ {
  /** @deprecated use `ClientGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ClientGetApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ClientGetApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientGetApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientGetApiBadRequestError$Outbound;
}
