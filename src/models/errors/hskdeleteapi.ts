/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type HskDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskDeleteApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskDeleteApiInternalServerErrorData;

  constructor(
    err: HskDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskDeleteApiInternalServerError";
  }
}

export type HskDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskDeleteApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskDeleteApiForbiddenErrorData;

  constructor(
    err: HskDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskDeleteApiForbiddenError";
  }
}

export type HskDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskDeleteApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskDeleteApiUnauthorizedErrorData;

  constructor(
    err: HskDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskDeleteApiUnauthorizedError";
  }
}

export type HskDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class HskDeleteApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HskDeleteApiBadRequestErrorData;

  constructor(
    err: HskDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "HskDeleteApiBadRequestError";
  }
}

/** @internal */
export const HskDeleteApiInternalServerError$inboundSchema: z.ZodType<
  HskDeleteApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskDeleteApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskDeleteApiInternalServerError$outboundSchema: z.ZodType<
  HskDeleteApiInternalServerError$Outbound,
  z.ZodTypeDef,
  HskDeleteApiInternalServerError
> = z.instanceof(HskDeleteApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskDeleteApiInternalServerError$ {
  /** @deprecated use `HskDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = HskDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `HskDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = HskDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `HskDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound = HskDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const HskDeleteApiForbiddenError$inboundSchema: z.ZodType<
  HskDeleteApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskDeleteApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskDeleteApiForbiddenError$outboundSchema: z.ZodType<
  HskDeleteApiForbiddenError$Outbound,
  z.ZodTypeDef,
  HskDeleteApiForbiddenError
> = z.instanceof(HskDeleteApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskDeleteApiForbiddenError$ {
  /** @deprecated use `HskDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = HskDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `HskDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = HskDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `HskDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = HskDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const HskDeleteApiUnauthorizedError$inboundSchema: z.ZodType<
  HskDeleteApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskDeleteApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskDeleteApiUnauthorizedError$outboundSchema: z.ZodType<
  HskDeleteApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  HskDeleteApiUnauthorizedError
> = z.instanceof(HskDeleteApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskDeleteApiUnauthorizedError$ {
  /** @deprecated use `HskDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = HskDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `HskDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = HskDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `HskDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = HskDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const HskDeleteApiBadRequestError$inboundSchema: z.ZodType<
  HskDeleteApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskDeleteApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const HskDeleteApiBadRequestError$outboundSchema: z.ZodType<
  HskDeleteApiBadRequestError$Outbound,
  z.ZodTypeDef,
  HskDeleteApiBadRequestError
> = z.instanceof(HskDeleteApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskDeleteApiBadRequestError$ {
  /** @deprecated use `HskDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = HskDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `HskDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = HskDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `HskDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = HskDeleteApiBadRequestError$Outbound;
}
