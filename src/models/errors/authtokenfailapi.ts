/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenFailApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenFailApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiInternalServerErrorData;

  constructor(
    err: AuthTokenFailApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenFailApiInternalServerError";
  }
}

export type AuthTokenFailApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenFailApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiForbiddenErrorData;

  constructor(
    err: AuthTokenFailApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenFailApiForbiddenError";
  }
}

export type AuthTokenFailApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenFailApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenFailApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenFailApiUnauthorizedError";
  }
}

export type AuthTokenFailApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenFailApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiBadRequestErrorData;

  constructor(
    err: AuthTokenFailApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenFailApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenFailApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenFailApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenFailApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiInternalServerError
> = z.instanceof(AuthTokenFailApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiInternalServerError$ {
  /** @deprecated use `AuthTokenFailApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenFailApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenFailApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenFailApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenFailApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenFailApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiForbiddenError
> = z.instanceof(AuthTokenFailApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiForbiddenError$ {
  /** @deprecated use `AuthTokenFailApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenFailApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenFailApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenFailApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiUnauthorizedError
> = z.instanceof(AuthTokenFailApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenFailApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenFailApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenFailApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenFailApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenFailApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenFailApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiBadRequestError
> = z.instanceof(AuthTokenFailApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiBadRequestError$ {
  /** @deprecated use `AuthTokenFailApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenFailApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiBadRequestError$Outbound;
}
