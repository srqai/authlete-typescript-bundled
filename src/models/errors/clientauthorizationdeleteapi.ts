/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientAuthorizationDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationDeleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationDeleteApiInternalServerErrorData;

  constructor(
    err: ClientAuthorizationDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationDeleteApiInternalServerError";
  }
}

export type ClientAuthorizationDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationDeleteApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationDeleteApiForbiddenErrorData;

  constructor(
    err: ClientAuthorizationDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationDeleteApiForbiddenError";
  }
}

export type ClientAuthorizationDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationDeleteApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationDeleteApiUnauthorizedErrorData;

  constructor(
    err: ClientAuthorizationDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationDeleteApiUnauthorizedError";
  }
}

export type ClientAuthorizationDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientAuthorizationDeleteApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationDeleteApiBadRequestErrorData;

  constructor(
    err: ClientAuthorizationDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientAuthorizationDeleteApiBadRequestError";
  }
}

/** @internal */
export const ClientAuthorizationDeleteApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationDeleteApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationDeleteApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationDeleteApiInternalServerError
  > = z.instanceof(ClientAuthorizationDeleteApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationDeleteApiInternalServerError$ {
  /** @deprecated use `ClientAuthorizationDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const ClientAuthorizationDeleteApiForbiddenError$inboundSchema:
  z.ZodType<ClientAuthorizationDeleteApiForbiddenError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientAuthorizationDeleteApiForbiddenError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientAuthorizationDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationDeleteApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationDeleteApiForbiddenError
  > = z.instanceof(ClientAuthorizationDeleteApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationDeleteApiForbiddenError$ {
  /** @deprecated use `ClientAuthorizationDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientAuthorizationDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const ClientAuthorizationDeleteApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationDeleteApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationDeleteApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationDeleteApiUnauthorizedError
  > = z.instanceof(ClientAuthorizationDeleteApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationDeleteApiUnauthorizedError$ {
  /** @deprecated use `ClientAuthorizationDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientAuthorizationDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientAuthorizationDeleteApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationDeleteApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationDeleteApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientAuthorizationDeleteApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationDeleteApiBadRequestError
  > = z.instanceof(ClientAuthorizationDeleteApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationDeleteApiBadRequestError$ {
  /** @deprecated use `ClientAuthorizationDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientAuthorizationDeleteApiBadRequestError$Outbound;
}
