/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceCreateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceCreateApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceCreateApiInternalServerErrorData;

  constructor(
    err: ServiceCreateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceCreateApiInternalServerError";
  }
}

export type ServiceCreateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceCreateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceCreateApiForbiddenErrorData;

  constructor(
    err: ServiceCreateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceCreateApiForbiddenError";
  }
}

export type ServiceCreateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceCreateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceCreateApiUnauthorizedErrorData;

  constructor(
    err: ServiceCreateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceCreateApiUnauthorizedError";
  }
}

export type ServiceCreateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceCreateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceCreateApiBadRequestErrorData;

  constructor(
    err: ServiceCreateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceCreateApiBadRequestError";
  }
}

/** @internal */
export const ServiceCreateApiInternalServerError$inboundSchema: z.ZodType<
  ServiceCreateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceCreateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceCreateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceCreateApiInternalServerError$outboundSchema: z.ZodType<
  ServiceCreateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ServiceCreateApiInternalServerError
> = z.instanceof(ServiceCreateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCreateApiInternalServerError$ {
  /** @deprecated use `ServiceCreateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceCreateApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceCreateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceCreateApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceCreateApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceCreateApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceCreateApiForbiddenError$inboundSchema: z.ZodType<
  ServiceCreateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceCreateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceCreateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceCreateApiForbiddenError$outboundSchema: z.ZodType<
  ServiceCreateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceCreateApiForbiddenError
> = z.instanceof(ServiceCreateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCreateApiForbiddenError$ {
  /** @deprecated use `ServiceCreateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ServiceCreateApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceCreateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ServiceCreateApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceCreateApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceCreateApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceCreateApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceCreateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceCreateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceCreateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceCreateApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceCreateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceCreateApiUnauthorizedError
> = z.instanceof(ServiceCreateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCreateApiUnauthorizedError$ {
  /** @deprecated use `ServiceCreateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ServiceCreateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceCreateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceCreateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceCreateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceCreateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceCreateApiBadRequestError$inboundSchema: z.ZodType<
  ServiceCreateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceCreateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceCreateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceCreateApiBadRequestError$outboundSchema: z.ZodType<
  ServiceCreateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceCreateApiBadRequestError
> = z.instanceof(ServiceCreateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCreateApiBadRequestError$ {
  /** @deprecated use `ServiceCreateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ServiceCreateApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceCreateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ServiceCreateApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceCreateApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceCreateApiBadRequestError$Outbound;
}
