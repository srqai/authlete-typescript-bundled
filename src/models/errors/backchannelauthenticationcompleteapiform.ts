/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationCompleteApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationCompleteApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiFormInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationCompleteApiFormInternalServerError";
  }
}

export type BackchannelAuthenticationCompleteApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationCompleteApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiFormForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationCompleteApiFormForbiddenError";
  }
}

export type BackchannelAuthenticationCompleteApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationCompleteApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiFormUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationCompleteApiFormUnauthorizedError";
  }
}

export type BackchannelAuthenticationCompleteApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationCompleteApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiFormBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationCompleteApiFormBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiFormInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const BackchannelAuthenticationCompleteApiFormInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormInternalServerError
  > = z.instanceof(BackchannelAuthenticationCompleteApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormForbiddenError
  > = z.instanceof(BackchannelAuthenticationCompleteApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const BackchannelAuthenticationCompleteApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationCompleteApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiFormBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiFormBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiFormBadRequestError
  > = z.instanceof(BackchannelAuthenticationCompleteApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiFormBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiFormBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiFormBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiFormBadRequestError$Outbound;
}
