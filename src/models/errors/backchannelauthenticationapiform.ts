/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiFormInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationApiFormInternalServerError";
  }
}

export type BackchannelAuthenticationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiFormForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationApiFormForbiddenError";
  }
}

export type BackchannelAuthenticationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiFormUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationApiFormUnauthorizedError";
  }
}

export type BackchannelAuthenticationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiFormBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationApiFormBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationApiFormInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiFormInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormInternalServerError
  > = z.instanceof(BackchannelAuthenticationApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationApiFormForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiFormForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormForbiddenError
  > = z.instanceof(BackchannelAuthenticationApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationApiFormBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiFormBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiFormBadRequestError
  > = z.instanceof(BackchannelAuthenticationApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiFormBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiFormBadRequestError$Outbound;
}
