/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type FederationRegistrationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationRegistrationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiInternalServerErrorData;

  constructor(
    err: FederationRegistrationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationRegistrationApiInternalServerError";
  }
}

export type FederationRegistrationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationRegistrationApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiForbiddenErrorData;

  constructor(
    err: FederationRegistrationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationRegistrationApiForbiddenError";
  }
}

export type FederationRegistrationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationRegistrationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiUnauthorizedErrorData;

  constructor(
    err: FederationRegistrationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationRegistrationApiUnauthorizedError";
  }
}

export type FederationRegistrationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class FederationRegistrationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiBadRequestErrorData;

  constructor(
    err: FederationRegistrationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "FederationRegistrationApiBadRequestError";
  }
}

/** @internal */
export const FederationRegistrationApiInternalServerError$inboundSchema:
  z.ZodType<
    FederationRegistrationApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationRegistrationApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationRegistrationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiInternalServerError$outboundSchema:
  z.ZodType<
    FederationRegistrationApiInternalServerError$Outbound,
    z.ZodTypeDef,
    FederationRegistrationApiInternalServerError
  > = z.instanceof(FederationRegistrationApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiInternalServerError$ {
  /** @deprecated use `FederationRegistrationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiInternalServerError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiInternalServerError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiInternalServerError$Outbound` instead. */
  export type Outbound = FederationRegistrationApiInternalServerError$Outbound;
}

/** @internal */
export const FederationRegistrationApiForbiddenError$inboundSchema: z.ZodType<
  FederationRegistrationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FederationRegistrationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FederationRegistrationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiForbiddenError$outboundSchema: z.ZodType<
  FederationRegistrationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiForbiddenError
> = z.instanceof(FederationRegistrationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiForbiddenError$ {
  /** @deprecated use `FederationRegistrationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiForbiddenError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiForbiddenError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiForbiddenError$Outbound` instead. */
  export type Outbound = FederationRegistrationApiForbiddenError$Outbound;
}

/** @internal */
export const FederationRegistrationApiUnauthorizedError$inboundSchema:
  z.ZodType<FederationRegistrationApiUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new FederationRegistrationApiUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type FederationRegistrationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiUnauthorizedError$outboundSchema:
  z.ZodType<
    FederationRegistrationApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    FederationRegistrationApiUnauthorizedError
  > = z.instanceof(FederationRegistrationApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiUnauthorizedError$ {
  /** @deprecated use `FederationRegistrationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = FederationRegistrationApiUnauthorizedError$Outbound;
}

/** @internal */
export const FederationRegistrationApiBadRequestError$inboundSchema: z.ZodType<
  FederationRegistrationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FederationRegistrationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FederationRegistrationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiBadRequestError$outboundSchema: z.ZodType<
  FederationRegistrationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiBadRequestError
> = z.instanceof(FederationRegistrationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiBadRequestError$ {
  /** @deprecated use `FederationRegistrationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiBadRequestError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiBadRequestError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiBadRequestError$Outbound` instead. */
  export type Outbound = FederationRegistrationApiBadRequestError$Outbound;
}
