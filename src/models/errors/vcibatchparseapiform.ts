/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciBatchParseApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchParseApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiFormInternalServerErrorData;

  constructor(
    err: VciBatchParseApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchParseApiFormInternalServerError";
  }
}

export type VciBatchParseApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchParseApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiFormForbiddenErrorData;

  constructor(
    err: VciBatchParseApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchParseApiFormForbiddenError";
  }
}

export type VciBatchParseApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchParseApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiFormUnauthorizedErrorData;

  constructor(
    err: VciBatchParseApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchParseApiFormUnauthorizedError";
  }
}

export type VciBatchParseApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciBatchParseApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiFormBadRequestErrorData;

  constructor(
    err: VciBatchParseApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciBatchParseApiFormBadRequestError";
  }
}

/** @internal */
export const VciBatchParseApiFormInternalServerError$inboundSchema: z.ZodType<
  VciBatchParseApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchParseApiFormInternalServerError$outboundSchema: z.ZodType<
  VciBatchParseApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiFormInternalServerError
> = z.instanceof(VciBatchParseApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormInternalServerError$ {
  /** @deprecated use `VciBatchParseApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciBatchParseApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchParseApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciBatchParseApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciBatchParseApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciBatchParseApiFormForbiddenError$inboundSchema: z.ZodType<
  VciBatchParseApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchParseApiFormForbiddenError$outboundSchema: z.ZodType<
  VciBatchParseApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiFormForbiddenError
> = z.instanceof(VciBatchParseApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormForbiddenError$ {
  /** @deprecated use `VciBatchParseApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchParseApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciBatchParseApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciBatchParseApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciBatchParseApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciBatchParseApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchParseApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciBatchParseApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiFormUnauthorizedError
> = z.instanceof(VciBatchParseApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormUnauthorizedError$ {
  /** @deprecated use `VciBatchParseApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciBatchParseApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchParseApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciBatchParseApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciBatchParseApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciBatchParseApiFormBadRequestError$inboundSchema: z.ZodType<
  VciBatchParseApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciBatchParseApiFormBadRequestError$outboundSchema: z.ZodType<
  VciBatchParseApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiFormBadRequestError
> = z.instanceof(VciBatchParseApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiFormBadRequestError$ {
  /** @deprecated use `VciBatchParseApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    VciBatchParseApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciBatchParseApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchParseApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciBatchParseApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciBatchParseApiFormBadRequestError$Outbound;
}
