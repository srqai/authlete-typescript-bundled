/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthIntrospectionApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiFormInternalServerErrorData;

  constructor(
    err: AuthIntrospectionApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionApiFormInternalServerError";
  }
}

export type AuthIntrospectionApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiFormForbiddenErrorData;

  constructor(
    err: AuthIntrospectionApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionApiFormForbiddenError";
  }
}

export type AuthIntrospectionApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiFormUnauthorizedErrorData;

  constructor(
    err: AuthIntrospectionApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionApiFormUnauthorizedError";
  }
}

export type AuthIntrospectionApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthIntrospectionApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiFormBadRequestErrorData;

  constructor(
    err: AuthIntrospectionApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthIntrospectionApiFormBadRequestError";
  }
}

/** @internal */
export const AuthIntrospectionApiFormInternalServerError$inboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionApiFormInternalServerError
  > = z.instanceof(AuthIntrospectionApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormInternalServerError$ {
  /** @deprecated use `AuthIntrospectionApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthIntrospectionApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormForbiddenError
> = z.instanceof(AuthIntrospectionApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormForbiddenError$ {
  /** @deprecated use `AuthIntrospectionApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthIntrospectionApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthIntrospectionApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionApiFormUnauthorizedError
  > = z.instanceof(AuthIntrospectionApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormUnauthorizedError$ {
  /** @deprecated use `AuthIntrospectionApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthIntrospectionApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthIntrospectionApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthIntrospectionApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiFormBadRequestError
> = z.instanceof(AuthIntrospectionApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiFormBadRequestError$ {
  /** @deprecated use `AuthIntrospectionApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiFormBadRequestError$Outbound;
}
