/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciJwtissuerApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwtissuerApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiFormInternalServerErrorData;

  constructor(
    err: VciJwtissuerApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwtissuerApiFormInternalServerError";
  }
}

export type VciJwtissuerApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwtissuerApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiFormForbiddenErrorData;

  constructor(
    err: VciJwtissuerApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwtissuerApiFormForbiddenError";
  }
}

export type VciJwtissuerApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwtissuerApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiFormUnauthorizedErrorData;

  constructor(
    err: VciJwtissuerApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwtissuerApiFormUnauthorizedError";
  }
}

export type VciJwtissuerApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciJwtissuerApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciJwtissuerApiFormBadRequestErrorData;

  constructor(
    err: VciJwtissuerApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciJwtissuerApiFormBadRequestError";
  }
}

/** @internal */
export const VciJwtissuerApiFormInternalServerError$inboundSchema: z.ZodType<
  VciJwtissuerApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwtissuerApiFormInternalServerError$outboundSchema: z.ZodType<
  VciJwtissuerApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiFormInternalServerError
> = z.instanceof(VciJwtissuerApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormInternalServerError$ {
  /** @deprecated use `VciJwtissuerApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciJwtissuerApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciJwtissuerApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciJwtissuerApiFormForbiddenError$inboundSchema: z.ZodType<
  VciJwtissuerApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwtissuerApiFormForbiddenError$outboundSchema: z.ZodType<
  VciJwtissuerApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiFormForbiddenError
> = z.instanceof(VciJwtissuerApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormForbiddenError$ {
  /** @deprecated use `VciJwtissuerApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciJwtissuerApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciJwtissuerApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciJwtissuerApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwtissuerApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciJwtissuerApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiFormUnauthorizedError
> = z.instanceof(VciJwtissuerApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormUnauthorizedError$ {
  /** @deprecated use `VciJwtissuerApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciJwtissuerApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciJwtissuerApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciJwtissuerApiFormBadRequestError$inboundSchema: z.ZodType<
  VciJwtissuerApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwtissuerApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwtissuerApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciJwtissuerApiFormBadRequestError$outboundSchema: z.ZodType<
  VciJwtissuerApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciJwtissuerApiFormBadRequestError
> = z.instanceof(VciJwtissuerApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerApiFormBadRequestError$ {
  /** @deprecated use `VciJwtissuerApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciJwtissuerApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciJwtissuerApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciJwtissuerApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciJwtissuerApiFormBadRequestError$Outbound;
}
