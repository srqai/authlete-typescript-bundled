/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceDeleteApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceDeleteApiInternalServerErrorData;

  constructor(
    err: ServiceDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceDeleteApiInternalServerError";
  }
}

export type ServiceDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceDeleteApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceDeleteApiForbiddenErrorData;

  constructor(
    err: ServiceDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceDeleteApiForbiddenError";
  }
}

export type ServiceDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceDeleteApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceDeleteApiUnauthorizedErrorData;

  constructor(
    err: ServiceDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceDeleteApiUnauthorizedError";
  }
}

export type ServiceDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceDeleteApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceDeleteApiBadRequestErrorData;

  constructor(
    err: ServiceDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceDeleteApiBadRequestError";
  }
}

/** @internal */
export const ServiceDeleteApiInternalServerError$inboundSchema: z.ZodType<
  ServiceDeleteApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceDeleteApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceDeleteApiInternalServerError$outboundSchema: z.ZodType<
  ServiceDeleteApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ServiceDeleteApiInternalServerError
> = z.instanceof(ServiceDeleteApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteApiInternalServerError$ {
  /** @deprecated use `ServiceDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceDeleteApiForbiddenError$inboundSchema: z.ZodType<
  ServiceDeleteApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceDeleteApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceDeleteApiForbiddenError$outboundSchema: z.ZodType<
  ServiceDeleteApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceDeleteApiForbiddenError
> = z.instanceof(ServiceDeleteApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteApiForbiddenError$ {
  /** @deprecated use `ServiceDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ServiceDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ServiceDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceDeleteApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceDeleteApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceDeleteApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceDeleteApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceDeleteApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceDeleteApiUnauthorizedError
> = z.instanceof(ServiceDeleteApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteApiUnauthorizedError$ {
  /** @deprecated use `ServiceDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ServiceDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceDeleteApiBadRequestError$inboundSchema: z.ZodType<
  ServiceDeleteApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceDeleteApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceDeleteApiBadRequestError$outboundSchema: z.ZodType<
  ServiceDeleteApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceDeleteApiBadRequestError
> = z.instanceof(ServiceDeleteApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceDeleteApiBadRequestError$ {
  /** @deprecated use `ServiceDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ServiceDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ServiceDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceDeleteApiBadRequestError$Outbound;
}
