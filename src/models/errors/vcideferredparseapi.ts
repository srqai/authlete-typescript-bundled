/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciDeferredParseApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredParseApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiInternalServerErrorData;

  constructor(
    err: VciDeferredParseApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredParseApiInternalServerError";
  }
}

export type VciDeferredParseApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredParseApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiForbiddenErrorData;

  constructor(
    err: VciDeferredParseApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredParseApiForbiddenError";
  }
}

export type VciDeferredParseApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredParseApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiUnauthorizedErrorData;

  constructor(
    err: VciDeferredParseApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredParseApiUnauthorizedError";
  }
}

export type VciDeferredParseApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciDeferredParseApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiBadRequestErrorData;

  constructor(
    err: VciDeferredParseApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciDeferredParseApiBadRequestError";
  }
}

/** @internal */
export const VciDeferredParseApiInternalServerError$inboundSchema: z.ZodType<
  VciDeferredParseApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredParseApiInternalServerError$outboundSchema: z.ZodType<
  VciDeferredParseApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiInternalServerError
> = z.instanceof(VciDeferredParseApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiInternalServerError$ {
  /** @deprecated use `VciDeferredParseApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredParseApiInternalServerError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiInternalServerError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiInternalServerError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiInternalServerError$Outbound;
}

/** @internal */
export const VciDeferredParseApiForbiddenError$inboundSchema: z.ZodType<
  VciDeferredParseApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredParseApiForbiddenError$outboundSchema: z.ZodType<
  VciDeferredParseApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiForbiddenError
> = z.instanceof(VciDeferredParseApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiForbiddenError$ {
  /** @deprecated use `VciDeferredParseApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiForbiddenError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiForbiddenError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiForbiddenError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiForbiddenError$Outbound;
}

/** @internal */
export const VciDeferredParseApiUnauthorizedError$inboundSchema: z.ZodType<
  VciDeferredParseApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredParseApiUnauthorizedError$outboundSchema: z.ZodType<
  VciDeferredParseApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiUnauthorizedError
> = z.instanceof(VciDeferredParseApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiUnauthorizedError$ {
  /** @deprecated use `VciDeferredParseApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredParseApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciDeferredParseApiBadRequestError$inboundSchema: z.ZodType<
  VciDeferredParseApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciDeferredParseApiBadRequestError$outboundSchema: z.ZodType<
  VciDeferredParseApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiBadRequestError
> = z.instanceof(VciDeferredParseApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiBadRequestError$ {
  /** @deprecated use `VciDeferredParseApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseApiBadRequestError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiBadRequestError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiBadRequestError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiBadRequestError$Outbound;
}
