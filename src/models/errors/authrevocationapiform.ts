/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthRevocationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthRevocationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiFormInternalServerErrorData;

  constructor(
    err: AuthRevocationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthRevocationApiFormInternalServerError";
  }
}

export type AuthRevocationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthRevocationApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiFormForbiddenErrorData;

  constructor(
    err: AuthRevocationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthRevocationApiFormForbiddenError";
  }
}

export type AuthRevocationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthRevocationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiFormUnauthorizedErrorData;

  constructor(
    err: AuthRevocationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthRevocationApiFormUnauthorizedError";
  }
}

export type AuthRevocationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthRevocationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiFormBadRequestErrorData;

  constructor(
    err: AuthRevocationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthRevocationApiFormBadRequestError";
  }
}

/** @internal */
export const AuthRevocationApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthRevocationApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthRevocationApiFormInternalServerError$outboundSchema: z.ZodType<
  AuthRevocationApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiFormInternalServerError
> = z.instanceof(AuthRevocationApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormInternalServerError$ {
  /** @deprecated use `AuthRevocationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthRevocationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthRevocationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthRevocationApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthRevocationApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthRevocationApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthRevocationApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthRevocationApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthRevocationApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiFormForbiddenError
> = z.instanceof(AuthRevocationApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormForbiddenError$ {
  /** @deprecated use `AuthRevocationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthRevocationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthRevocationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthRevocationApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthRevocationApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthRevocationApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthRevocationApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthRevocationApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthRevocationApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiFormUnauthorizedError
> = z.instanceof(AuthRevocationApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormUnauthorizedError$ {
  /** @deprecated use `AuthRevocationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthRevocationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthRevocationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthRevocationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthRevocationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthRevocationApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthRevocationApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthRevocationApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthRevocationApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiFormBadRequestError
> = z.instanceof(AuthRevocationApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiFormBadRequestError$ {
  /** @deprecated use `AuthRevocationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthRevocationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthRevocationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthRevocationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthRevocationApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthRevocationApiFormBadRequestError$Outbound;
}
