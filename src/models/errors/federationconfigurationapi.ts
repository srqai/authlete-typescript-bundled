/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type FederationConfigurationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationConfigurationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationConfigurationApiInternalServerErrorData;

  constructor(
    err: FederationConfigurationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationConfigurationApiInternalServerError";
  }
}

export type FederationConfigurationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationConfigurationApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationConfigurationApiForbiddenErrorData;

  constructor(
    err: FederationConfigurationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationConfigurationApiForbiddenError";
  }
}

export type FederationConfigurationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationConfigurationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationConfigurationApiUnauthorizedErrorData;

  constructor(
    err: FederationConfigurationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationConfigurationApiUnauthorizedError";
  }
}

export type FederationConfigurationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class FederationConfigurationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: FederationConfigurationApiBadRequestErrorData;

  constructor(
    err: FederationConfigurationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "FederationConfigurationApiBadRequestError";
  }
}

/** @internal */
export const FederationConfigurationApiInternalServerError$inboundSchema:
  z.ZodType<
    FederationConfigurationApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationConfigurationApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationConfigurationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationConfigurationApiInternalServerError$outboundSchema:
  z.ZodType<
    FederationConfigurationApiInternalServerError$Outbound,
    z.ZodTypeDef,
    FederationConfigurationApiInternalServerError
  > = z.instanceof(FederationConfigurationApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiInternalServerError$ {
  /** @deprecated use `FederationConfigurationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FederationConfigurationApiInternalServerError$inboundSchema;
  /** @deprecated use `FederationConfigurationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiInternalServerError$outboundSchema;
  /** @deprecated use `FederationConfigurationApiInternalServerError$Outbound` instead. */
  export type Outbound = FederationConfigurationApiInternalServerError$Outbound;
}

/** @internal */
export const FederationConfigurationApiForbiddenError$inboundSchema: z.ZodType<
  FederationConfigurationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FederationConfigurationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FederationConfigurationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationConfigurationApiForbiddenError$outboundSchema: z.ZodType<
  FederationConfigurationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  FederationConfigurationApiForbiddenError
> = z.instanceof(FederationConfigurationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiForbiddenError$ {
  /** @deprecated use `FederationConfigurationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    FederationConfigurationApiForbiddenError$inboundSchema;
  /** @deprecated use `FederationConfigurationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiForbiddenError$outboundSchema;
  /** @deprecated use `FederationConfigurationApiForbiddenError$Outbound` instead. */
  export type Outbound = FederationConfigurationApiForbiddenError$Outbound;
}

/** @internal */
export const FederationConfigurationApiUnauthorizedError$inboundSchema:
  z.ZodType<
    FederationConfigurationApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationConfigurationApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationConfigurationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationConfigurationApiUnauthorizedError$outboundSchema:
  z.ZodType<
    FederationConfigurationApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    FederationConfigurationApiUnauthorizedError
  > = z.instanceof(FederationConfigurationApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiUnauthorizedError$ {
  /** @deprecated use `FederationConfigurationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    FederationConfigurationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `FederationConfigurationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `FederationConfigurationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = FederationConfigurationApiUnauthorizedError$Outbound;
}

/** @internal */
export const FederationConfigurationApiBadRequestError$inboundSchema: z.ZodType<
  FederationConfigurationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FederationConfigurationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FederationConfigurationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const FederationConfigurationApiBadRequestError$outboundSchema:
  z.ZodType<
    FederationConfigurationApiBadRequestError$Outbound,
    z.ZodTypeDef,
    FederationConfigurationApiBadRequestError
  > = z.instanceof(FederationConfigurationApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationConfigurationApiBadRequestError$ {
  /** @deprecated use `FederationConfigurationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FederationConfigurationApiBadRequestError$inboundSchema;
  /** @deprecated use `FederationConfigurationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FederationConfigurationApiBadRequestError$outboundSchema;
  /** @deprecated use `FederationConfigurationApiBadRequestError$Outbound` instead. */
  export type Outbound = FederationConfigurationApiBadRequestError$Outbound;
}
