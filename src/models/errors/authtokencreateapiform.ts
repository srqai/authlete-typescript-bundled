/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenCreateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenCreateApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiFormInternalServerErrorData;

  constructor(
    err: AuthTokenCreateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenCreateApiFormInternalServerError";
  }
}

export type AuthTokenCreateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenCreateApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiFormForbiddenErrorData;

  constructor(
    err: AuthTokenCreateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenCreateApiFormForbiddenError";
  }
}

export type AuthTokenCreateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenCreateApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiFormUnauthorizedErrorData;

  constructor(
    err: AuthTokenCreateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenCreateApiFormUnauthorizedError";
  }
}

export type AuthTokenCreateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenCreateApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiFormBadRequestErrorData;

  constructor(
    err: AuthTokenCreateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenCreateApiFormBadRequestError";
  }
}

/** @internal */
export const AuthTokenCreateApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthTokenCreateApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthTokenCreateApiFormInternalServerError
  > = z.instanceof(AuthTokenCreateApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormInternalServerError$ {
  /** @deprecated use `AuthTokenCreateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenCreateApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormForbiddenError
> = z.instanceof(AuthTokenCreateApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormForbiddenError$ {
  /** @deprecated use `AuthTokenCreateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenCreateApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormUnauthorizedError
> = z.instanceof(AuthTokenCreateApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormUnauthorizedError$ {
  /** @deprecated use `AuthTokenCreateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenCreateApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthTokenCreateApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenCreateApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthTokenCreateApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiFormBadRequestError
> = z.instanceof(AuthTokenCreateApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiFormBadRequestError$ {
  /** @deprecated use `AuthTokenCreateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiFormBadRequestError$Outbound;
}
