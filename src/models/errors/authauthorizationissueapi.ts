/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthAuthorizationIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationIssueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiInternalServerErrorData;

  constructor(
    err: AuthAuthorizationIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationIssueApiInternalServerError";
  }
}

export type AuthAuthorizationIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationIssueApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiForbiddenErrorData;

  constructor(
    err: AuthAuthorizationIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationIssueApiForbiddenError";
  }
}

export type AuthAuthorizationIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationIssueApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiUnauthorizedErrorData;

  constructor(
    err: AuthAuthorizationIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationIssueApiUnauthorizedError";
  }
}

export type AuthAuthorizationIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthAuthorizationIssueApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiBadRequestErrorData;

  constructor(
    err: AuthAuthorizationIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthAuthorizationIssueApiBadRequestError";
  }
}

/** @internal */
export const AuthAuthorizationIssueApiInternalServerError$inboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationIssueApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationIssueApiInternalServerError$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiInternalServerError
  > = z.instanceof(AuthAuthorizationIssueApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiInternalServerError$ {
  /** @deprecated use `AuthAuthorizationIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiInternalServerError$Outbound;
}

/** @internal */
export const AuthAuthorizationIssueApiForbiddenError$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationIssueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationIssueApiForbiddenError$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiForbiddenError
> = z.instanceof(AuthAuthorizationIssueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiForbiddenError$ {
  /** @deprecated use `AuthAuthorizationIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiForbiddenError$Outbound;
}

/** @internal */
export const AuthAuthorizationIssueApiUnauthorizedError$inboundSchema:
  z.ZodType<AuthAuthorizationIssueApiUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new AuthAuthorizationIssueApiUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type AuthAuthorizationIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationIssueApiUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiUnauthorizedError
  > = z.instanceof(AuthAuthorizationIssueApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiUnauthorizedError$ {
  /** @deprecated use `AuthAuthorizationIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthAuthorizationIssueApiBadRequestError$inboundSchema: z.ZodType<
  AuthAuthorizationIssueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationIssueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiBadRequestError$outboundSchema: z.ZodType<
  AuthAuthorizationIssueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationIssueApiBadRequestError
> = z.instanceof(AuthAuthorizationIssueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiBadRequestError$ {
  /** @deprecated use `AuthAuthorizationIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiBadRequestError$Outbound;
}
