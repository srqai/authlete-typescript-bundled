/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciJwksApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwksApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiInternalServerErrorData;

  constructor(
    err: VciJwksApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwksApiInternalServerError";
  }
}

export type VciJwksApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwksApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiForbiddenErrorData;

  constructor(
    err: VciJwksApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwksApiForbiddenError";
  }
}

export type VciJwksApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwksApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiUnauthorizedErrorData;

  constructor(
    err: VciJwksApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwksApiUnauthorizedError";
  }
}

export type VciJwksApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciJwksApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiBadRequestErrorData;

  constructor(
    err: VciJwksApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciJwksApiBadRequestError";
  }
}

/** @internal */
export const VciJwksApiInternalServerError$inboundSchema: z.ZodType<
  VciJwksApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiInternalServerError$outboundSchema: z.ZodType<
  VciJwksApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciJwksApiInternalServerError
> = z.instanceof(VciJwksApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiInternalServerError$ {
  /** @deprecated use `VciJwksApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiInternalServerError$inboundSchema;
  /** @deprecated use `VciJwksApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiInternalServerError$outboundSchema;
  /** @deprecated use `VciJwksApiInternalServerError$Outbound` instead. */
  export type Outbound = VciJwksApiInternalServerError$Outbound;
}

/** @internal */
export const VciJwksApiForbiddenError$inboundSchema: z.ZodType<
  VciJwksApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiForbiddenError$outboundSchema: z.ZodType<
  VciJwksApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciJwksApiForbiddenError
> = z.instanceof(VciJwksApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiForbiddenError$ {
  /** @deprecated use `VciJwksApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiForbiddenError$inboundSchema;
  /** @deprecated use `VciJwksApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiForbiddenError$outboundSchema;
  /** @deprecated use `VciJwksApiForbiddenError$Outbound` instead. */
  export type Outbound = VciJwksApiForbiddenError$Outbound;
}

/** @internal */
export const VciJwksApiUnauthorizedError$inboundSchema: z.ZodType<
  VciJwksApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiUnauthorizedError$outboundSchema: z.ZodType<
  VciJwksApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciJwksApiUnauthorizedError
> = z.instanceof(VciJwksApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiUnauthorizedError$ {
  /** @deprecated use `VciJwksApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciJwksApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciJwksApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciJwksApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciJwksApiBadRequestError$inboundSchema: z.ZodType<
  VciJwksApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciJwksApiBadRequestError$outboundSchema: z.ZodType<
  VciJwksApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciJwksApiBadRequestError
> = z.instanceof(VciJwksApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiBadRequestError$ {
  /** @deprecated use `VciJwksApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiBadRequestError$inboundSchema;
  /** @deprecated use `VciJwksApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiBadRequestError$outboundSchema;
  /** @deprecated use `VciJwksApiBadRequestError$Outbound` instead. */
  export type Outbound = VciJwksApiBadRequestError$Outbound;
}
