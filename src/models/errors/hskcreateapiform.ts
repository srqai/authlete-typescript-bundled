/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type HskCreateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskCreateApiFormInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiFormInternalServerErrorData;

  constructor(
    err: HskCreateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskCreateApiFormInternalServerError";
  }
}

export type HskCreateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskCreateApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiFormForbiddenErrorData;

  constructor(
    err: HskCreateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskCreateApiFormForbiddenError";
  }
}

export type HskCreateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskCreateApiFormUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiFormUnauthorizedErrorData;

  constructor(
    err: HskCreateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskCreateApiFormUnauthorizedError";
  }
}

export type HskCreateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class HskCreateApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HskCreateApiFormBadRequestErrorData;

  constructor(
    err: HskCreateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "HskCreateApiFormBadRequestError";
  }
}

/** @internal */
export const HskCreateApiFormInternalServerError$inboundSchema: z.ZodType<
  HskCreateApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiFormInternalServerError$outboundSchema: z.ZodType<
  HskCreateApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormInternalServerError
> = z.instanceof(HskCreateApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormInternalServerError$ {
  /** @deprecated use `HskCreateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    HskCreateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `HskCreateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    HskCreateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `HskCreateApiFormInternalServerError$Outbound` instead. */
  export type Outbound = HskCreateApiFormInternalServerError$Outbound;
}

/** @internal */
export const HskCreateApiFormForbiddenError$inboundSchema: z.ZodType<
  HskCreateApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiFormForbiddenError$outboundSchema: z.ZodType<
  HskCreateApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormForbiddenError
> = z.instanceof(HskCreateApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormForbiddenError$ {
  /** @deprecated use `HskCreateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `HskCreateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `HskCreateApiFormForbiddenError$Outbound` instead. */
  export type Outbound = HskCreateApiFormForbiddenError$Outbound;
}

/** @internal */
export const HskCreateApiFormUnauthorizedError$inboundSchema: z.ZodType<
  HskCreateApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskCreateApiFormUnauthorizedError$outboundSchema: z.ZodType<
  HskCreateApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormUnauthorizedError
> = z.instanceof(HskCreateApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormUnauthorizedError$ {
  /** @deprecated use `HskCreateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `HskCreateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    HskCreateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `HskCreateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = HskCreateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const HskCreateApiFormBadRequestError$inboundSchema: z.ZodType<
  HskCreateApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskCreateApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskCreateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const HskCreateApiFormBadRequestError$outboundSchema: z.ZodType<
  HskCreateApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  HskCreateApiFormBadRequestError
> = z.instanceof(HskCreateApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateApiFormBadRequestError$ {
  /** @deprecated use `HskCreateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = HskCreateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `HskCreateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema = HskCreateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `HskCreateApiFormBadRequestError$Outbound` instead. */
  export type Outbound = HskCreateApiFormBadRequestError$Outbound;
}
