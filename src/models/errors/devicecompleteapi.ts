/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type DeviceCompleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceCompleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiInternalServerErrorData;

  constructor(
    err: DeviceCompleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceCompleteApiInternalServerError";
  }
}

export type DeviceCompleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceCompleteApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiForbiddenErrorData;

  constructor(
    err: DeviceCompleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceCompleteApiForbiddenError";
  }
}

export type DeviceCompleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceCompleteApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiUnauthorizedErrorData;

  constructor(
    err: DeviceCompleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceCompleteApiUnauthorizedError";
  }
}

export type DeviceCompleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class DeviceCompleteApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiBadRequestErrorData;

  constructor(
    err: DeviceCompleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "DeviceCompleteApiBadRequestError";
  }
}

/** @internal */
export const DeviceCompleteApiInternalServerError$inboundSchema: z.ZodType<
  DeviceCompleteApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceCompleteApiInternalServerError$outboundSchema: z.ZodType<
  DeviceCompleteApiInternalServerError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiInternalServerError
> = z.instanceof(DeviceCompleteApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiInternalServerError$ {
  /** @deprecated use `DeviceCompleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceCompleteApiInternalServerError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceCompleteApiInternalServerError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiInternalServerError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiInternalServerError$Outbound;
}

/** @internal */
export const DeviceCompleteApiForbiddenError$inboundSchema: z.ZodType<
  DeviceCompleteApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceCompleteApiForbiddenError$outboundSchema: z.ZodType<
  DeviceCompleteApiForbiddenError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiForbiddenError
> = z.instanceof(DeviceCompleteApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiForbiddenError$ {
  /** @deprecated use `DeviceCompleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiForbiddenError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiForbiddenError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiForbiddenError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiForbiddenError$Outbound;
}

/** @internal */
export const DeviceCompleteApiUnauthorizedError$inboundSchema: z.ZodType<
  DeviceCompleteApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceCompleteApiUnauthorizedError$outboundSchema: z.ZodType<
  DeviceCompleteApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiUnauthorizedError
> = z.instanceof(DeviceCompleteApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiUnauthorizedError$ {
  /** @deprecated use `DeviceCompleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceCompleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const DeviceCompleteApiBadRequestError$inboundSchema: z.ZodType<
  DeviceCompleteApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceCompleteApiBadRequestError$outboundSchema: z.ZodType<
  DeviceCompleteApiBadRequestError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiBadRequestError
> = z.instanceof(DeviceCompleteApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiBadRequestError$ {
  /** @deprecated use `DeviceCompleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteApiBadRequestError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteApiBadRequestError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiBadRequestError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiBadRequestError$Outbound;
}
