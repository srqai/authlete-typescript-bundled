/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type HskGetListApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskGetListApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskGetListApiInternalServerErrorData;

  constructor(
    err: HskGetListApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskGetListApiInternalServerError";
  }
}

export type HskGetListApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskGetListApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskGetListApiForbiddenErrorData;

  constructor(
    err: HskGetListApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskGetListApiForbiddenError";
  }
}

export type HskGetListApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskGetListApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskGetListApiUnauthorizedErrorData;

  constructor(
    err: HskGetListApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskGetListApiUnauthorizedError";
  }
}

export type HskGetListApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class HskGetListApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HskGetListApiBadRequestErrorData;

  constructor(
    err: HskGetListApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "HskGetListApiBadRequestError";
  }
}

/** @internal */
export const HskGetListApiInternalServerError$inboundSchema: z.ZodType<
  HskGetListApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetListApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetListApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskGetListApiInternalServerError$outboundSchema: z.ZodType<
  HskGetListApiInternalServerError$Outbound,
  z.ZodTypeDef,
  HskGetListApiInternalServerError
> = z.instanceof(HskGetListApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiInternalServerError$ {
  /** @deprecated use `HskGetListApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiInternalServerError$inboundSchema;
  /** @deprecated use `HskGetListApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiInternalServerError$outboundSchema;
  /** @deprecated use `HskGetListApiInternalServerError$Outbound` instead. */
  export type Outbound = HskGetListApiInternalServerError$Outbound;
}

/** @internal */
export const HskGetListApiForbiddenError$inboundSchema: z.ZodType<
  HskGetListApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetListApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetListApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskGetListApiForbiddenError$outboundSchema: z.ZodType<
  HskGetListApiForbiddenError$Outbound,
  z.ZodTypeDef,
  HskGetListApiForbiddenError
> = z.instanceof(HskGetListApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiForbiddenError$ {
  /** @deprecated use `HskGetListApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiForbiddenError$inboundSchema;
  /** @deprecated use `HskGetListApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiForbiddenError$outboundSchema;
  /** @deprecated use `HskGetListApiForbiddenError$Outbound` instead. */
  export type Outbound = HskGetListApiForbiddenError$Outbound;
}

/** @internal */
export const HskGetListApiUnauthorizedError$inboundSchema: z.ZodType<
  HskGetListApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetListApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetListApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskGetListApiUnauthorizedError$outboundSchema: z.ZodType<
  HskGetListApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  HskGetListApiUnauthorizedError
> = z.instanceof(HskGetListApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiUnauthorizedError$ {
  /** @deprecated use `HskGetListApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiUnauthorizedError$inboundSchema;
  /** @deprecated use `HskGetListApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiUnauthorizedError$outboundSchema;
  /** @deprecated use `HskGetListApiUnauthorizedError$Outbound` instead. */
  export type Outbound = HskGetListApiUnauthorizedError$Outbound;
}

/** @internal */
export const HskGetListApiBadRequestError$inboundSchema: z.ZodType<
  HskGetListApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetListApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetListApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const HskGetListApiBadRequestError$outboundSchema: z.ZodType<
  HskGetListApiBadRequestError$Outbound,
  z.ZodTypeDef,
  HskGetListApiBadRequestError
> = z.instanceof(HskGetListApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetListApiBadRequestError$ {
  /** @deprecated use `HskGetListApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = HskGetListApiBadRequestError$inboundSchema;
  /** @deprecated use `HskGetListApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = HskGetListApiBadRequestError$outboundSchema;
  /** @deprecated use `HskGetListApiBadRequestError$Outbound` instead. */
  export type Outbound = HskGetListApiBadRequestError$Outbound;
}
