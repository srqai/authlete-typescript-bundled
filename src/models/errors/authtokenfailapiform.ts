/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenFailApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenFailApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiFormInternalServerErrorData;

  constructor(
    err: AuthTokenFailApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenFailApiFormInternalServerError";
  }
}

export type AuthTokenFailApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenFailApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiFormForbiddenErrorData;

  constructor(
    err: AuthTokenFailApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenFailApiFormForbiddenError";
  }
}

export type AuthTokenFailApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenFailApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiFormUnauthorizedErrorData;

  constructor(
    err: AuthTokenFailApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenFailApiFormUnauthorizedError";
  }
}

export type AuthTokenFailApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenFailApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenFailApiFormBadRequestErrorData;

  constructor(
    err: AuthTokenFailApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenFailApiFormBadRequestError";
  }
}

/** @internal */
export const AuthTokenFailApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthTokenFailApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiFormInternalServerError$outboundSchema: z.ZodType<
  AuthTokenFailApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormInternalServerError
> = z.instanceof(AuthTokenFailApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormInternalServerError$ {
  /** @deprecated use `AuthTokenFailApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenFailApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenFailApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenFailApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthTokenFailApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthTokenFailApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormForbiddenError
> = z.instanceof(AuthTokenFailApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormForbiddenError$ {
  /** @deprecated use `AuthTokenFailApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenFailApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenFailApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenFailApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenFailApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenFailApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenFailApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormUnauthorizedError
> = z.instanceof(AuthTokenFailApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormUnauthorizedError$ {
  /** @deprecated use `AuthTokenFailApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenFailApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenFailApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenFailApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthTokenFailApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenFailApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenFailApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenFailApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthTokenFailApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenFailApiFormBadRequestError
> = z.instanceof(AuthTokenFailApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenFailApiFormBadRequestError$ {
  /** @deprecated use `AuthTokenFailApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenFailApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenFailApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenFailApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenFailApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenFailApiFormBadRequestError$Outbound;
}
