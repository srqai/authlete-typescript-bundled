/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceConfigurationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceConfigurationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceConfigurationApiInternalServerErrorData;

  constructor(
    err: ServiceConfigurationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceConfigurationApiInternalServerError";
  }
}

export type ServiceConfigurationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceConfigurationApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceConfigurationApiForbiddenErrorData;

  constructor(
    err: ServiceConfigurationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceConfigurationApiForbiddenError";
  }
}

export type ServiceConfigurationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceConfigurationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceConfigurationApiUnauthorizedErrorData;

  constructor(
    err: ServiceConfigurationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceConfigurationApiUnauthorizedError";
  }
}

export type ServiceConfigurationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceConfigurationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceConfigurationApiBadRequestErrorData;

  constructor(
    err: ServiceConfigurationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceConfigurationApiBadRequestError";
  }
}

/** @internal */
export const ServiceConfigurationApiInternalServerError$inboundSchema:
  z.ZodType<ServiceConfigurationApiInternalServerError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ServiceConfigurationApiInternalServerError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ServiceConfigurationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceConfigurationApiInternalServerError$outboundSchema:
  z.ZodType<
    ServiceConfigurationApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ServiceConfigurationApiInternalServerError
  > = z.instanceof(ServiceConfigurationApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigurationApiInternalServerError$ {
  /** @deprecated use `ServiceConfigurationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceConfigurationApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceConfigurationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceConfigurationApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceConfigurationApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceConfigurationApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceConfigurationApiForbiddenError$inboundSchema: z.ZodType<
  ServiceConfigurationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceConfigurationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceConfigurationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceConfigurationApiForbiddenError$outboundSchema: z.ZodType<
  ServiceConfigurationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceConfigurationApiForbiddenError
> = z.instanceof(ServiceConfigurationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigurationApiForbiddenError$ {
  /** @deprecated use `ServiceConfigurationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceConfigurationApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceConfigurationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceConfigurationApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceConfigurationApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceConfigurationApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceConfigurationApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceConfigurationApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceConfigurationApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceConfigurationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceConfigurationApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceConfigurationApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceConfigurationApiUnauthorizedError
> = z.instanceof(ServiceConfigurationApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigurationApiUnauthorizedError$ {
  /** @deprecated use `ServiceConfigurationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceConfigurationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceConfigurationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceConfigurationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceConfigurationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceConfigurationApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceConfigurationApiBadRequestError$inboundSchema: z.ZodType<
  ServiceConfigurationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceConfigurationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceConfigurationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceConfigurationApiBadRequestError$outboundSchema: z.ZodType<
  ServiceConfigurationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceConfigurationApiBadRequestError
> = z.instanceof(ServiceConfigurationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigurationApiBadRequestError$ {
  /** @deprecated use `ServiceConfigurationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceConfigurationApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceConfigurationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceConfigurationApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceConfigurationApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceConfigurationApiBadRequestError$Outbound;
}
