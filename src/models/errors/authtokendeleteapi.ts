/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenDeleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenDeleteApiInternalServerErrorData;

  constructor(
    err: AuthTokenDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenDeleteApiInternalServerError";
  }
}

export type AuthTokenDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenDeleteApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenDeleteApiForbiddenErrorData;

  constructor(
    err: AuthTokenDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenDeleteApiForbiddenError";
  }
}

export type AuthTokenDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenDeleteApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenDeleteApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenDeleteApiUnauthorizedError";
  }
}

export type AuthTokenDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenDeleteApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenDeleteApiBadRequestErrorData;

  constructor(
    err: AuthTokenDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenDeleteApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenDeleteApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenDeleteApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenDeleteApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenDeleteApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenDeleteApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenDeleteApiInternalServerError
> = z.instanceof(AuthTokenDeleteApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenDeleteApiInternalServerError$ {
  /** @deprecated use `AuthTokenDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenDeleteApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenDeleteApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenDeleteApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenDeleteApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenDeleteApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenDeleteApiForbiddenError
> = z.instanceof(AuthTokenDeleteApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenDeleteApiForbiddenError$ {
  /** @deprecated use `AuthTokenDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenDeleteApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenDeleteApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenDeleteApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenDeleteApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenDeleteApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenDeleteApiUnauthorizedError
> = z.instanceof(AuthTokenDeleteApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenDeleteApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenDeleteApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenDeleteApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenDeleteApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenDeleteApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenDeleteApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenDeleteApiBadRequestError
> = z.instanceof(AuthTokenDeleteApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenDeleteApiBadRequestError$ {
  /** @deprecated use `AuthTokenDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenDeleteApiBadRequestError$Outbound;
}
