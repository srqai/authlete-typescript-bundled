/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenRevokeApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenRevokeApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiInternalServerErrorData;

  constructor(
    err: AuthTokenRevokeApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenRevokeApiInternalServerError";
  }
}

export type AuthTokenRevokeApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenRevokeApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiForbiddenErrorData;

  constructor(
    err: AuthTokenRevokeApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenRevokeApiForbiddenError";
  }
}

export type AuthTokenRevokeApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenRevokeApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenRevokeApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenRevokeApiUnauthorizedError";
  }
}

export type AuthTokenRevokeApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenRevokeApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenRevokeApiBadRequestErrorData;

  constructor(
    err: AuthTokenRevokeApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenRevokeApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenRevokeApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenRevokeApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiInternalServerError
> = z.instanceof(AuthTokenRevokeApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiInternalServerError$ {
  /** @deprecated use `AuthTokenRevokeApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenRevokeApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenRevokeApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenRevokeApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiForbiddenError
> = z.instanceof(AuthTokenRevokeApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiForbiddenError$ {
  /** @deprecated use `AuthTokenRevokeApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenRevokeApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenRevokeApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiUnauthorizedError
> = z.instanceof(AuthTokenRevokeApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenRevokeApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenRevokeApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenRevokeApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenRevokeApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenRevokeApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenRevokeApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenRevokeApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenRevokeApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiBadRequestError
> = z.instanceof(AuthTokenRevokeApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiBadRequestError$ {
  /** @deprecated use `AuthTokenRevokeApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenRevokeApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiBadRequestError$Outbound;
}
