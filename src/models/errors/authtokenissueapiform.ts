/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenIssueApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenIssueApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiFormInternalServerErrorData;

  constructor(
    err: AuthTokenIssueApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenIssueApiFormInternalServerError";
  }
}

export type AuthTokenIssueApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenIssueApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiFormForbiddenErrorData;

  constructor(
    err: AuthTokenIssueApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenIssueApiFormForbiddenError";
  }
}

export type AuthTokenIssueApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenIssueApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiFormUnauthorizedErrorData;

  constructor(
    err: AuthTokenIssueApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenIssueApiFormUnauthorizedError";
  }
}

export type AuthTokenIssueApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenIssueApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiFormBadRequestErrorData;

  constructor(
    err: AuthTokenIssueApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenIssueApiFormBadRequestError";
  }
}

/** @internal */
export const AuthTokenIssueApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiFormInternalServerError$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormInternalServerError
> = z.instanceof(AuthTokenIssueApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormInternalServerError$ {
  /** @deprecated use `AuthTokenIssueApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenIssueApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormForbiddenError
> = z.instanceof(AuthTokenIssueApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormForbiddenError$ {
  /** @deprecated use `AuthTokenIssueApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenIssueApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormUnauthorizedError
> = z.instanceof(AuthTokenIssueApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormUnauthorizedError$ {
  /** @deprecated use `AuthTokenIssueApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenIssueApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthTokenIssueApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenIssueApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthTokenIssueApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiFormBadRequestError
> = z.instanceof(AuthTokenIssueApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiFormBadRequestError$ {
  /** @deprecated use `AuthTokenIssueApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiFormBadRequestError$Outbound;
}
