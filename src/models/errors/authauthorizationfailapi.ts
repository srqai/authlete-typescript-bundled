/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthAuthorizationFailApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationFailApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiInternalServerErrorData;

  constructor(
    err: AuthAuthorizationFailApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationFailApiInternalServerError";
  }
}

export type AuthAuthorizationFailApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationFailApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiForbiddenErrorData;

  constructor(
    err: AuthAuthorizationFailApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationFailApiForbiddenError";
  }
}

export type AuthAuthorizationFailApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationFailApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiUnauthorizedErrorData;

  constructor(
    err: AuthAuthorizationFailApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationFailApiUnauthorizedError";
  }
}

export type AuthAuthorizationFailApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthAuthorizationFailApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiBadRequestErrorData;

  constructor(
    err: AuthAuthorizationFailApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthAuthorizationFailApiBadRequestError";
  }
}

/** @internal */
export const AuthAuthorizationFailApiInternalServerError$inboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationFailApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationFailApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationFailApiInternalServerError$outboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationFailApiInternalServerError
  > = z.instanceof(AuthAuthorizationFailApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiInternalServerError$ {
  /** @deprecated use `AuthAuthorizationFailApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiInternalServerError$Outbound;
}

/** @internal */
export const AuthAuthorizationFailApiForbiddenError$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationFailApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationFailApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationFailApiForbiddenError$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiForbiddenError
> = z.instanceof(AuthAuthorizationFailApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiForbiddenError$ {
  /** @deprecated use `AuthAuthorizationFailApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiForbiddenError$Outbound;
}

/** @internal */
export const AuthAuthorizationFailApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationFailApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationFailApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationFailApiUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationFailApiUnauthorizedError
  > = z.instanceof(AuthAuthorizationFailApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiUnauthorizedError$ {
  /** @deprecated use `AuthAuthorizationFailApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthAuthorizationFailApiBadRequestError$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationFailApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationFailApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiBadRequestError$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiBadRequestError
> = z.instanceof(AuthAuthorizationFailApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiBadRequestError$ {
  /** @deprecated use `AuthAuthorizationFailApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiBadRequestError$Outbound;
}
