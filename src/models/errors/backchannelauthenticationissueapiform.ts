/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationIssueApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationIssueApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiFormInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationIssueApiFormInternalServerError";
  }
}

export type BackchannelAuthenticationIssueApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationIssueApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiFormForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationIssueApiFormForbiddenError";
  }
}

export type BackchannelAuthenticationIssueApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationIssueApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiFormUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationIssueApiFormUnauthorizedError";
  }
}

export type BackchannelAuthenticationIssueApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationIssueApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiFormBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationIssueApiFormBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationIssueApiFormInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiFormInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const BackchannelAuthenticationIssueApiFormInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiFormInternalServerError
  > = z.instanceof(BackchannelAuthenticationIssueApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiFormInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationIssueApiFormForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationIssueApiFormForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiFormForbiddenError
  > = z.instanceof(BackchannelAuthenticationIssueApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiFormForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationIssueApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationIssueApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiFormUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationIssueApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationIssueApiFormBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueApiFormBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiFormBadRequestError
  > = z.instanceof(BackchannelAuthenticationIssueApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiFormBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiFormBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiFormBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiFormBadRequestError$Outbound;
}
