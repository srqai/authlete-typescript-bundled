/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientSecretRefreshApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretRefreshApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretRefreshApiInternalServerErrorData;

  constructor(
    err: ClientSecretRefreshApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretRefreshApiInternalServerError";
  }
}

export type ClientSecretRefreshApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretRefreshApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretRefreshApiForbiddenErrorData;

  constructor(
    err: ClientSecretRefreshApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretRefreshApiForbiddenError";
  }
}

export type ClientSecretRefreshApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretRefreshApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretRefreshApiUnauthorizedErrorData;

  constructor(
    err: ClientSecretRefreshApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretRefreshApiUnauthorizedError";
  }
}

export type ClientSecretRefreshApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientSecretRefreshApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretRefreshApiBadRequestErrorData;

  constructor(
    err: ClientSecretRefreshApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientSecretRefreshApiBadRequestError";
  }
}

/** @internal */
export const ClientSecretRefreshApiInternalServerError$inboundSchema: z.ZodType<
  ClientSecretRefreshApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretRefreshApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretRefreshApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretRefreshApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientSecretRefreshApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientSecretRefreshApiInternalServerError
  > = z.instanceof(ClientSecretRefreshApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretRefreshApiInternalServerError$ {
  /** @deprecated use `ClientSecretRefreshApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretRefreshApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientSecretRefreshApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretRefreshApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientSecretRefreshApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientSecretRefreshApiInternalServerError$Outbound;
}

/** @internal */
export const ClientSecretRefreshApiForbiddenError$inboundSchema: z.ZodType<
  ClientSecretRefreshApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretRefreshApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretRefreshApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretRefreshApiForbiddenError$outboundSchema: z.ZodType<
  ClientSecretRefreshApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientSecretRefreshApiForbiddenError
> = z.instanceof(ClientSecretRefreshApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretRefreshApiForbiddenError$ {
  /** @deprecated use `ClientSecretRefreshApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretRefreshApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientSecretRefreshApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretRefreshApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientSecretRefreshApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientSecretRefreshApiForbiddenError$Outbound;
}

/** @internal */
export const ClientSecretRefreshApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientSecretRefreshApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretRefreshApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretRefreshApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretRefreshApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientSecretRefreshApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientSecretRefreshApiUnauthorizedError
> = z.instanceof(ClientSecretRefreshApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretRefreshApiUnauthorizedError$ {
  /** @deprecated use `ClientSecretRefreshApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretRefreshApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientSecretRefreshApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretRefreshApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientSecretRefreshApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientSecretRefreshApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientSecretRefreshApiBadRequestError$inboundSchema: z.ZodType<
  ClientSecretRefreshApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretRefreshApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretRefreshApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientSecretRefreshApiBadRequestError$outboundSchema: z.ZodType<
  ClientSecretRefreshApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientSecretRefreshApiBadRequestError
> = z.instanceof(ClientSecretRefreshApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretRefreshApiBadRequestError$ {
  /** @deprecated use `ClientSecretRefreshApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretRefreshApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientSecretRefreshApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretRefreshApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientSecretRefreshApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientSecretRefreshApiBadRequestError$Outbound;
}
