/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciBatchParseApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchParseApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiInternalServerErrorData;

  constructor(
    err: VciBatchParseApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchParseApiInternalServerError";
  }
}

export type VciBatchParseApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchParseApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiForbiddenErrorData;

  constructor(
    err: VciBatchParseApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchParseApiForbiddenError";
  }
}

export type VciBatchParseApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchParseApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiUnauthorizedErrorData;

  constructor(
    err: VciBatchParseApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchParseApiUnauthorizedError";
  }
}

export type VciBatchParseApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciBatchParseApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciBatchParseApiBadRequestErrorData;

  constructor(
    err: VciBatchParseApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciBatchParseApiBadRequestError";
  }
}

/** @internal */
export const VciBatchParseApiInternalServerError$inboundSchema: z.ZodType<
  VciBatchParseApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchParseApiInternalServerError$outboundSchema: z.ZodType<
  VciBatchParseApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiInternalServerError
> = z.instanceof(VciBatchParseApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiInternalServerError$ {
  /** @deprecated use `VciBatchParseApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciBatchParseApiInternalServerError$inboundSchema;
  /** @deprecated use `VciBatchParseApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchParseApiInternalServerError$outboundSchema;
  /** @deprecated use `VciBatchParseApiInternalServerError$Outbound` instead. */
  export type Outbound = VciBatchParseApiInternalServerError$Outbound;
}

/** @internal */
export const VciBatchParseApiForbiddenError$inboundSchema: z.ZodType<
  VciBatchParseApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchParseApiForbiddenError$outboundSchema: z.ZodType<
  VciBatchParseApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiForbiddenError
> = z.instanceof(VciBatchParseApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiForbiddenError$ {
  /** @deprecated use `VciBatchParseApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiForbiddenError$inboundSchema;
  /** @deprecated use `VciBatchParseApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiForbiddenError$outboundSchema;
  /** @deprecated use `VciBatchParseApiForbiddenError$Outbound` instead. */
  export type Outbound = VciBatchParseApiForbiddenError$Outbound;
}

/** @internal */
export const VciBatchParseApiUnauthorizedError$inboundSchema: z.ZodType<
  VciBatchParseApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchParseApiUnauthorizedError$outboundSchema: z.ZodType<
  VciBatchParseApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiUnauthorizedError
> = z.instanceof(VciBatchParseApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiUnauthorizedError$ {
  /** @deprecated use `VciBatchParseApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciBatchParseApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchParseApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciBatchParseApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciBatchParseApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciBatchParseApiBadRequestError$inboundSchema: z.ZodType<
  VciBatchParseApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchParseApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchParseApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciBatchParseApiBadRequestError$outboundSchema: z.ZodType<
  VciBatchParseApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciBatchParseApiBadRequestError
> = z.instanceof(VciBatchParseApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseApiBadRequestError$ {
  /** @deprecated use `VciBatchParseApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseApiBadRequestError$inboundSchema;
  /** @deprecated use `VciBatchParseApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseApiBadRequestError$outboundSchema;
  /** @deprecated use `VciBatchParseApiBadRequestError$Outbound` instead. */
  export type Outbound = VciBatchParseApiBadRequestError$Outbound;
}
