/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type GetApiServiceIdAuthAuthorizationTicketInfoInternalServerErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: GetApiServiceIdAuthAuthorizationTicketInfoInternalServerErrorData;

  constructor(
    err: GetApiServiceIdAuthAuthorizationTicketInfoInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError";
  }
}

export type GetApiServiceIdAuthAuthorizationTicketInfoForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: GetApiServiceIdAuthAuthorizationTicketInfoForbiddenErrorData;

  constructor(
    err: GetApiServiceIdAuthAuthorizationTicketInfoForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError";
  }
}

export type GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedErrorData;

  constructor(
    err: GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError";
  }
}

export type GetApiServiceIdAuthAuthorizationTicketInfoBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetApiServiceIdAuthAuthorizationTicketInfoBadRequestErrorData;

  constructor(
    err: GetApiServiceIdAuthAuthorizationTicketInfoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError";
  }
}

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$inboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$outboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$Outbound,
    z.ZodTypeDef,
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError
  > = z.instanceof(
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$ {
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$inboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$outboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$Outbound` instead. */
  export type Outbound =
    GetApiServiceIdAuthAuthorizationTicketInfoInternalServerError$Outbound;
}

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$inboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$outboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$Outbound,
    z.ZodTypeDef,
    GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError
  > = z.instanceof(GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$ {
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$inboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$outboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$Outbound` instead. */
  export type Outbound =
    GetApiServiceIdAuthAuthorizationTicketInfoForbiddenError$Outbound;
}

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$inboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$outboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$Outbound,
    z.ZodTypeDef,
    GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError
  > = z.instanceof(GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$ {
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$inboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$outboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$Outbound` instead. */
  export type Outbound =
    GetApiServiceIdAuthAuthorizationTicketInfoUnauthorizedError$Outbound;
}

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$inboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$Outbound =
  {
    resultCode?: string | undefined;
    resultMessage?: string | undefined;
  };

/** @internal */
export const GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$outboundSchema:
  z.ZodType<
    GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$Outbound,
    z.ZodTypeDef,
    GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError
  > = z.instanceof(GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$ {
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$inboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$outboundSchema;
  /** @deprecated use `GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$Outbound` instead. */
  export type Outbound =
    GetApiServiceIdAuthAuthorizationTicketInfoBadRequestError$Outbound;
}
