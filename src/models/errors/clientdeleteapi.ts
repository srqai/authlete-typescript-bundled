/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientDeleteApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientDeleteApiInternalServerErrorData;

  constructor(
    err: ClientDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientDeleteApiInternalServerError";
  }
}

export type ClientDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientDeleteApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientDeleteApiForbiddenErrorData;

  constructor(
    err: ClientDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientDeleteApiForbiddenError";
  }
}

export type ClientDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientDeleteApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientDeleteApiUnauthorizedErrorData;

  constructor(
    err: ClientDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientDeleteApiUnauthorizedError";
  }
}

export type ClientDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientDeleteApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientDeleteApiBadRequestErrorData;

  constructor(
    err: ClientDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientDeleteApiBadRequestError";
  }
}

/** @internal */
export const ClientDeleteApiInternalServerError$inboundSchema: z.ZodType<
  ClientDeleteApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientDeleteApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientDeleteApiInternalServerError$outboundSchema: z.ZodType<
  ClientDeleteApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientDeleteApiInternalServerError
> = z.instanceof(ClientDeleteApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientDeleteApiInternalServerError$ {
  /** @deprecated use `ClientDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = ClientDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const ClientDeleteApiForbiddenError$inboundSchema: z.ZodType<
  ClientDeleteApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientDeleteApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientDeleteApiForbiddenError$outboundSchema: z.ZodType<
  ClientDeleteApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientDeleteApiForbiddenError
> = z.instanceof(ClientDeleteApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientDeleteApiForbiddenError$ {
  /** @deprecated use `ClientDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ClientDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ClientDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const ClientDeleteApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientDeleteApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientDeleteApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientDeleteApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientDeleteApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientDeleteApiUnauthorizedError
> = z.instanceof(ClientDeleteApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientDeleteApiUnauthorizedError$ {
  /** @deprecated use `ClientDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ClientDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = ClientDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientDeleteApiBadRequestError$inboundSchema: z.ZodType<
  ClientDeleteApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientDeleteApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientDeleteApiBadRequestError$outboundSchema: z.ZodType<
  ClientDeleteApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientDeleteApiBadRequestError
> = z.instanceof(ClientDeleteApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientDeleteApiBadRequestError$ {
  /** @deprecated use `ClientDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ClientDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ClientDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientDeleteApiBadRequestError$Outbound;
}
