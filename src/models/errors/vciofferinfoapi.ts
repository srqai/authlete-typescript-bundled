/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciOfferInfoApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferInfoApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiInternalServerErrorData;

  constructor(
    err: VciOfferInfoApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferInfoApiInternalServerError";
  }
}

export type VciOfferInfoApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferInfoApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiForbiddenErrorData;

  constructor(
    err: VciOfferInfoApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferInfoApiForbiddenError";
  }
}

export type VciOfferInfoApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferInfoApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiUnauthorizedErrorData;

  constructor(
    err: VciOfferInfoApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferInfoApiUnauthorizedError";
  }
}

export type VciOfferInfoApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciOfferInfoApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciOfferInfoApiBadRequestErrorData;

  constructor(
    err: VciOfferInfoApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciOfferInfoApiBadRequestError";
  }
}

/** @internal */
export const VciOfferInfoApiInternalServerError$inboundSchema: z.ZodType<
  VciOfferInfoApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiInternalServerError$outboundSchema: z.ZodType<
  VciOfferInfoApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiInternalServerError
> = z.instanceof(VciOfferInfoApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiInternalServerError$ {
  /** @deprecated use `VciOfferInfoApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiInternalServerError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferInfoApiInternalServerError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiInternalServerError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiInternalServerError$Outbound;
}

/** @internal */
export const VciOfferInfoApiForbiddenError$inboundSchema: z.ZodType<
  VciOfferInfoApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiForbiddenError$outboundSchema: z.ZodType<
  VciOfferInfoApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiForbiddenError
> = z.instanceof(VciOfferInfoApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiForbiddenError$ {
  /** @deprecated use `VciOfferInfoApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiForbiddenError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiForbiddenError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiForbiddenError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiForbiddenError$Outbound;
}

/** @internal */
export const VciOfferInfoApiUnauthorizedError$inboundSchema: z.ZodType<
  VciOfferInfoApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferInfoApiUnauthorizedError$outboundSchema: z.ZodType<
  VciOfferInfoApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiUnauthorizedError
> = z.instanceof(VciOfferInfoApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiUnauthorizedError$ {
  /** @deprecated use `VciOfferInfoApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciOfferInfoApiBadRequestError$inboundSchema: z.ZodType<
  VciOfferInfoApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferInfoApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferInfoApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciOfferInfoApiBadRequestError$outboundSchema: z.ZodType<
  VciOfferInfoApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiBadRequestError
> = z.instanceof(VciOfferInfoApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiBadRequestError$ {
  /** @deprecated use `VciOfferInfoApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiBadRequestError$inboundSchema;
  /** @deprecated use `VciOfferInfoApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiBadRequestError$outboundSchema;
  /** @deprecated use `VciOfferInfoApiBadRequestError$Outbound` instead. */
  export type Outbound = VciOfferInfoApiBadRequestError$Outbound;
}
