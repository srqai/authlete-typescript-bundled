/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type IdtokenReissueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class IdtokenReissueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: IdtokenReissueApiInternalServerErrorData;

  constructor(
    err: IdtokenReissueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "IdtokenReissueApiInternalServerError";
  }
}

export type IdtokenReissueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class IdtokenReissueApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: IdtokenReissueApiForbiddenErrorData;

  constructor(
    err: IdtokenReissueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "IdtokenReissueApiForbiddenError";
  }
}

export type IdtokenReissueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class IdtokenReissueApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: IdtokenReissueApiUnauthorizedErrorData;

  constructor(
    err: IdtokenReissueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "IdtokenReissueApiUnauthorizedError";
  }
}

export type IdtokenReissueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class IdtokenReissueApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: IdtokenReissueApiBadRequestErrorData;

  constructor(
    err: IdtokenReissueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "IdtokenReissueApiBadRequestError";
  }
}

/** @internal */
export const IdtokenReissueApiInternalServerError$inboundSchema: z.ZodType<
  IdtokenReissueApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new IdtokenReissueApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type IdtokenReissueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const IdtokenReissueApiInternalServerError$outboundSchema: z.ZodType<
  IdtokenReissueApiInternalServerError$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiInternalServerError
> = z.instanceof(IdtokenReissueApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiInternalServerError$ {
  /** @deprecated use `IdtokenReissueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    IdtokenReissueApiInternalServerError$inboundSchema;
  /** @deprecated use `IdtokenReissueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    IdtokenReissueApiInternalServerError$outboundSchema;
  /** @deprecated use `IdtokenReissueApiInternalServerError$Outbound` instead. */
  export type Outbound = IdtokenReissueApiInternalServerError$Outbound;
}

/** @internal */
export const IdtokenReissueApiForbiddenError$inboundSchema: z.ZodType<
  IdtokenReissueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new IdtokenReissueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type IdtokenReissueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const IdtokenReissueApiForbiddenError$outboundSchema: z.ZodType<
  IdtokenReissueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiForbiddenError
> = z.instanceof(IdtokenReissueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiForbiddenError$ {
  /** @deprecated use `IdtokenReissueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiForbiddenError$inboundSchema;
  /** @deprecated use `IdtokenReissueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueApiForbiddenError$outboundSchema;
  /** @deprecated use `IdtokenReissueApiForbiddenError$Outbound` instead. */
  export type Outbound = IdtokenReissueApiForbiddenError$Outbound;
}

/** @internal */
export const IdtokenReissueApiUnauthorizedError$inboundSchema: z.ZodType<
  IdtokenReissueApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new IdtokenReissueApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type IdtokenReissueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const IdtokenReissueApiUnauthorizedError$outboundSchema: z.ZodType<
  IdtokenReissueApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiUnauthorizedError
> = z.instanceof(IdtokenReissueApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiUnauthorizedError$ {
  /** @deprecated use `IdtokenReissueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `IdtokenReissueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    IdtokenReissueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `IdtokenReissueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = IdtokenReissueApiUnauthorizedError$Outbound;
}

/** @internal */
export const IdtokenReissueApiBadRequestError$inboundSchema: z.ZodType<
  IdtokenReissueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new IdtokenReissueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type IdtokenReissueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const IdtokenReissueApiBadRequestError$outboundSchema: z.ZodType<
  IdtokenReissueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  IdtokenReissueApiBadRequestError
> = z.instanceof(IdtokenReissueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueApiBadRequestError$ {
  /** @deprecated use `IdtokenReissueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueApiBadRequestError$inboundSchema;
  /** @deprecated use `IdtokenReissueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueApiBadRequestError$outboundSchema;
  /** @deprecated use `IdtokenReissueApiBadRequestError$Outbound` instead. */
  export type Outbound = IdtokenReissueApiBadRequestError$Outbound;
}
