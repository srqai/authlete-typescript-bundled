/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthAuthorizationIssueApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationIssueApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiFormInternalServerErrorData;

  constructor(
    err: AuthAuthorizationIssueApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationIssueApiFormInternalServerError";
  }
}

export type AuthAuthorizationIssueApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationIssueApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiFormForbiddenErrorData;

  constructor(
    err: AuthAuthorizationIssueApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationIssueApiFormForbiddenError";
  }
}

export type AuthAuthorizationIssueApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationIssueApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiFormUnauthorizedErrorData;

  constructor(
    err: AuthAuthorizationIssueApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationIssueApiFormUnauthorizedError";
  }
}

export type AuthAuthorizationIssueApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthAuthorizationIssueApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationIssueApiFormBadRequestErrorData;

  constructor(
    err: AuthAuthorizationIssueApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthAuthorizationIssueApiFormBadRequestError";
  }
}

/** @internal */
export const AuthAuthorizationIssueApiFormInternalServerError$inboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationIssueApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationIssueApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationIssueApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiFormInternalServerError
  > = z.instanceof(AuthAuthorizationIssueApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormInternalServerError$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    AuthAuthorizationIssueApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthAuthorizationIssueApiFormForbiddenError$inboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationIssueApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationIssueApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationIssueApiFormForbiddenError$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiFormForbiddenError
  > = z.instanceof(AuthAuthorizationIssueApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormForbiddenError$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthAuthorizationIssueApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationIssueApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationIssueApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationIssueApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiFormUnauthorizedError
  > = z.instanceof(AuthAuthorizationIssueApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormUnauthorizedError$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    AuthAuthorizationIssueApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthAuthorizationIssueApiFormBadRequestError$inboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationIssueApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationIssueApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthAuthorizationIssueApiFormBadRequestError$outboundSchema:
  z.ZodType<
    AuthAuthorizationIssueApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationIssueApiFormBadRequestError
  > = z.instanceof(AuthAuthorizationIssueApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationIssueApiFormBadRequestError$ {
  /** @deprecated use `AuthAuthorizationIssueApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationIssueApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationIssueApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthAuthorizationIssueApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthAuthorizationIssueApiFormBadRequestError$Outbound;
}
