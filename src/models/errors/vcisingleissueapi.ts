/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciSingleIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleIssueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleIssueApiInternalServerErrorData;

  constructor(
    err: VciSingleIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleIssueApiInternalServerError";
  }
}

export type VciSingleIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleIssueApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleIssueApiForbiddenErrorData;

  constructor(
    err: VciSingleIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleIssueApiForbiddenError";
  }
}

export type VciSingleIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleIssueApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleIssueApiUnauthorizedErrorData;

  constructor(
    err: VciSingleIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleIssueApiUnauthorizedError";
  }
}

export type VciSingleIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciSingleIssueApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciSingleIssueApiBadRequestErrorData;

  constructor(
    err: VciSingleIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciSingleIssueApiBadRequestError";
  }
}

/** @internal */
export const VciSingleIssueApiInternalServerError$inboundSchema: z.ZodType<
  VciSingleIssueApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleIssueApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleIssueApiInternalServerError$outboundSchema: z.ZodType<
  VciSingleIssueApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiInternalServerError
> = z.instanceof(VciSingleIssueApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiInternalServerError$ {
  /** @deprecated use `VciSingleIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciSingleIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `VciSingleIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `VciSingleIssueApiInternalServerError$Outbound` instead. */
  export type Outbound = VciSingleIssueApiInternalServerError$Outbound;
}

/** @internal */
export const VciSingleIssueApiForbiddenError$inboundSchema: z.ZodType<
  VciSingleIssueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleIssueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleIssueApiForbiddenError$outboundSchema: z.ZodType<
  VciSingleIssueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiForbiddenError
> = z.instanceof(VciSingleIssueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiForbiddenError$ {
  /** @deprecated use `VciSingleIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `VciSingleIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `VciSingleIssueApiForbiddenError$Outbound` instead. */
  export type Outbound = VciSingleIssueApiForbiddenError$Outbound;
}

/** @internal */
export const VciSingleIssueApiUnauthorizedError$inboundSchema: z.ZodType<
  VciSingleIssueApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleIssueApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleIssueApiUnauthorizedError$outboundSchema: z.ZodType<
  VciSingleIssueApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiUnauthorizedError
> = z.instanceof(VciSingleIssueApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiUnauthorizedError$ {
  /** @deprecated use `VciSingleIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciSingleIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciSingleIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciSingleIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciSingleIssueApiBadRequestError$inboundSchema: z.ZodType<
  VciSingleIssueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleIssueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciSingleIssueApiBadRequestError$outboundSchema: z.ZodType<
  VciSingleIssueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciSingleIssueApiBadRequestError
> = z.instanceof(VciSingleIssueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueApiBadRequestError$ {
  /** @deprecated use `VciSingleIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `VciSingleIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `VciSingleIssueApiBadRequestError$Outbound` instead. */
  export type Outbound = VciSingleIssueApiBadRequestError$Outbound;
}
