/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationUpdateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationUpdateApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiFormInternalServerErrorData;

  constructor(
    err: ClientRegistrationUpdateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationUpdateApiFormInternalServerError";
  }
}

export type ClientRegistrationUpdateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationUpdateApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiFormForbiddenErrorData;

  constructor(
    err: ClientRegistrationUpdateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationUpdateApiFormForbiddenError";
  }
}

export type ClientRegistrationUpdateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationUpdateApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiFormUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationUpdateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationUpdateApiFormUnauthorizedError";
  }
}

export type ClientRegistrationUpdateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationUpdateApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiFormBadRequestErrorData;

  constructor(
    err: ClientRegistrationUpdateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationUpdateApiFormBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationUpdateApiFormInternalServerError$inboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationUpdateApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationUpdateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationUpdateApiFormInternalServerError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiFormInternalServerError
  > = z.instanceof(ClientRegistrationUpdateApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormInternalServerError$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationUpdateApiFormInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationUpdateApiFormForbiddenError$inboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationUpdateApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationUpdateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationUpdateApiFormForbiddenError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiFormForbiddenError
  > = z.instanceof(ClientRegistrationUpdateApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormForbiddenError$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiFormForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationUpdateApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationUpdateApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationUpdateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationUpdateApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiFormUnauthorizedError
  > = z.instanceof(ClientRegistrationUpdateApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationUpdateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationUpdateApiFormBadRequestError$inboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationUpdateApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationUpdateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationUpdateApiFormBadRequestError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiFormBadRequestError
  > = z.instanceof(ClientRegistrationUpdateApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiFormBadRequestError$ {
  /** @deprecated use `ClientRegistrationUpdateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationUpdateApiFormBadRequestError$Outbound;
}
