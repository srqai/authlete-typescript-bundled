/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientGrantedScopesGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGrantedScopesGetApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesGetApiInternalServerErrorData;

  constructor(
    err: ClientGrantedScopesGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGrantedScopesGetApiInternalServerError";
  }
}

export type ClientGrantedScopesGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGrantedScopesGetApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesGetApiForbiddenErrorData;

  constructor(
    err: ClientGrantedScopesGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGrantedScopesGetApiForbiddenError";
  }
}

export type ClientGrantedScopesGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGrantedScopesGetApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesGetApiUnauthorizedErrorData;

  constructor(
    err: ClientGrantedScopesGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGrantedScopesGetApiUnauthorizedError";
  }
}

export type ClientGrantedScopesGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientGrantedScopesGetApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesGetApiBadRequestErrorData;

  constructor(
    err: ClientGrantedScopesGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientGrantedScopesGetApiBadRequestError";
  }
}

/** @internal */
export const ClientGrantedScopesGetApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientGrantedScopesGetApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientGrantedScopesGetApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientGrantedScopesGetApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGrantedScopesGetApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientGrantedScopesGetApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientGrantedScopesGetApiInternalServerError
  > = z.instanceof(ClientGrantedScopesGetApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesGetApiInternalServerError$ {
  /** @deprecated use `ClientGrantedScopesGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesGetApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesGetApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesGetApiInternalServerError$Outbound;
}

/** @internal */
export const ClientGrantedScopesGetApiForbiddenError$inboundSchema: z.ZodType<
  ClientGrantedScopesGetApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGrantedScopesGetApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGrantedScopesGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGrantedScopesGetApiForbiddenError$outboundSchema: z.ZodType<
  ClientGrantedScopesGetApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientGrantedScopesGetApiForbiddenError
> = z.instanceof(ClientGrantedScopesGetApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesGetApiForbiddenError$ {
  /** @deprecated use `ClientGrantedScopesGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesGetApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesGetApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesGetApiForbiddenError$Outbound;
}

/** @internal */
export const ClientGrantedScopesGetApiUnauthorizedError$inboundSchema:
  z.ZodType<ClientGrantedScopesGetApiUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientGrantedScopesGetApiUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientGrantedScopesGetApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGrantedScopesGetApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientGrantedScopesGetApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientGrantedScopesGetApiUnauthorizedError
  > = z.instanceof(ClientGrantedScopesGetApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesGetApiUnauthorizedError$ {
  /** @deprecated use `ClientGrantedScopesGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientGrantedScopesGetApiBadRequestError$inboundSchema: z.ZodType<
  ClientGrantedScopesGetApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientGrantedScopesGetApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientGrantedScopesGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientGrantedScopesGetApiBadRequestError$outboundSchema: z.ZodType<
  ClientGrantedScopesGetApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientGrantedScopesGetApiBadRequestError
> = z.instanceof(ClientGrantedScopesGetApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesGetApiBadRequestError$ {
  /** @deprecated use `ClientGrantedScopesGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesGetApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesGetApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesGetApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesGetApiBadRequestError$Outbound;
}
