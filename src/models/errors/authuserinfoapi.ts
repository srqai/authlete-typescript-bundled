/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthUserinfoApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiInternalServerErrorData;

  constructor(
    err: AuthUserinfoApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoApiInternalServerError";
  }
}

export type AuthUserinfoApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiForbiddenErrorData;

  constructor(
    err: AuthUserinfoApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoApiForbiddenError";
  }
}

export type AuthUserinfoApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiUnauthorizedErrorData;

  constructor(
    err: AuthUserinfoApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoApiUnauthorizedError";
  }
}

export type AuthUserinfoApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthUserinfoApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiBadRequestErrorData;

  constructor(
    err: AuthUserinfoApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthUserinfoApiBadRequestError";
  }
}

/** @internal */
export const AuthUserinfoApiInternalServerError$inboundSchema: z.ZodType<
  AuthUserinfoApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoApiInternalServerError$outboundSchema: z.ZodType<
  AuthUserinfoApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiInternalServerError
> = z.instanceof(AuthUserinfoApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiInternalServerError$ {
  /** @deprecated use `AuthUserinfoApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiInternalServerError$Outbound;
}

/** @internal */
export const AuthUserinfoApiForbiddenError$inboundSchema: z.ZodType<
  AuthUserinfoApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoApiForbiddenError$outboundSchema: z.ZodType<
  AuthUserinfoApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiForbiddenError
> = z.instanceof(AuthUserinfoApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiForbiddenError$ {
  /** @deprecated use `AuthUserinfoApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiForbiddenError$Outbound;
}

/** @internal */
export const AuthUserinfoApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthUserinfoApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthUserinfoApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiUnauthorizedError
> = z.instanceof(AuthUserinfoApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiUnauthorizedError$ {
  /** @deprecated use `AuthUserinfoApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthUserinfoApiBadRequestError$inboundSchema: z.ZodType<
  AuthUserinfoApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthUserinfoApiBadRequestError$outboundSchema: z.ZodType<
  AuthUserinfoApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiBadRequestError
> = z.instanceof(AuthUserinfoApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiBadRequestError$ {
  /** @deprecated use `AuthUserinfoApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiBadRequestError$Outbound;
}
