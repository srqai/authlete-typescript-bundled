/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciJwksApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwksApiFormInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiFormInternalServerErrorData;

  constructor(
    err: VciJwksApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwksApiFormInternalServerError";
  }
}

export type VciJwksApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwksApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiFormForbiddenErrorData;

  constructor(
    err: VciJwksApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwksApiFormForbiddenError";
  }
}

export type VciJwksApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciJwksApiFormUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiFormUnauthorizedErrorData;

  constructor(
    err: VciJwksApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciJwksApiFormUnauthorizedError";
  }
}

export type VciJwksApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciJwksApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciJwksApiFormBadRequestErrorData;

  constructor(
    err: VciJwksApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciJwksApiFormBadRequestError";
  }
}

/** @internal */
export const VciJwksApiFormInternalServerError$inboundSchema: z.ZodType<
  VciJwksApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiFormInternalServerError$outboundSchema: z.ZodType<
  VciJwksApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormInternalServerError
> = z.instanceof(VciJwksApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormInternalServerError$ {
  /** @deprecated use `VciJwksApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciJwksApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciJwksApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciJwksApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciJwksApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciJwksApiFormForbiddenError$inboundSchema: z.ZodType<
  VciJwksApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiFormForbiddenError$outboundSchema: z.ZodType<
  VciJwksApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormForbiddenError
> = z.instanceof(VciJwksApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormForbiddenError$ {
  /** @deprecated use `VciJwksApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciJwksApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciJwksApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciJwksApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciJwksApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciJwksApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciJwksApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciJwksApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormUnauthorizedError
> = z.instanceof(VciJwksApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormUnauthorizedError$ {
  /** @deprecated use `VciJwksApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciJwksApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciJwksApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciJwksApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciJwksApiFormBadRequestError$inboundSchema: z.ZodType<
  VciJwksApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciJwksApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciJwksApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciJwksApiFormBadRequestError$outboundSchema: z.ZodType<
  VciJwksApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciJwksApiFormBadRequestError
> = z.instanceof(VciJwksApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksApiFormBadRequestError$ {
  /** @deprecated use `VciJwksApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciJwksApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciJwksApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciJwksApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciJwksApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciJwksApiFormBadRequestError$Outbound;
}
