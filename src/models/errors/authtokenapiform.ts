/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenApiFormInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiFormInternalServerErrorData;

  constructor(
    err: AuthTokenApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenApiFormInternalServerError";
  }
}

export type AuthTokenApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiFormForbiddenErrorData;

  constructor(
    err: AuthTokenApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenApiFormForbiddenError";
  }
}

export type AuthTokenApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenApiFormUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiFormUnauthorizedErrorData;

  constructor(
    err: AuthTokenApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenApiFormUnauthorizedError";
  }
}

export type AuthTokenApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiFormBadRequestErrorData;

  constructor(
    err: AuthTokenApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenApiFormBadRequestError";
  }
}

/** @internal */
export const AuthTokenApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthTokenApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiFormInternalServerError$outboundSchema: z.ZodType<
  AuthTokenApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormInternalServerError
> = z.instanceof(AuthTokenApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormInternalServerError$ {
  /** @deprecated use `AuthTokenApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthTokenApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthTokenApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormForbiddenError
> = z.instanceof(AuthTokenApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormForbiddenError$ {
  /** @deprecated use `AuthTokenApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormUnauthorizedError
> = z.instanceof(AuthTokenApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormUnauthorizedError$ {
  /** @deprecated use `AuthTokenApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthTokenApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthTokenApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiFormBadRequestError
> = z.instanceof(AuthTokenApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiFormBadRequestError$ {
  /** @deprecated use `AuthTokenApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenApiFormBadRequestError$Outbound;
}
