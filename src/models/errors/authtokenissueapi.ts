/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenIssueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiInternalServerErrorData;

  constructor(
    err: AuthTokenIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenIssueApiInternalServerError";
  }
}

export type AuthTokenIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenIssueApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiForbiddenErrorData;

  constructor(
    err: AuthTokenIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenIssueApiForbiddenError";
  }
}

export type AuthTokenIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenIssueApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenIssueApiUnauthorizedError";
  }
}

export type AuthTokenIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenIssueApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenIssueApiBadRequestErrorData;

  constructor(
    err: AuthTokenIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenIssueApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenIssueApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenIssueApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenIssueApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiInternalServerError
> = z.instanceof(AuthTokenIssueApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiInternalServerError$ {
  /** @deprecated use `AuthTokenIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenIssueApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenIssueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenIssueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiForbiddenError
> = z.instanceof(AuthTokenIssueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiForbiddenError$ {
  /** @deprecated use `AuthTokenIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenIssueApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenIssueApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenIssueApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenIssueApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiUnauthorizedError
> = z.instanceof(AuthTokenIssueApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenIssueApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenIssueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenIssueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenIssueApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenIssueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenIssueApiBadRequestError
> = z.instanceof(AuthTokenIssueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenIssueApiBadRequestError$ {
  /** @deprecated use `AuthTokenIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenIssueApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenIssueApiBadRequestError$Outbound;
}
