/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientAuthorizationUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationUpdateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiInternalServerErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationUpdateApiInternalServerError";
  }
}

export type ClientAuthorizationUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationUpdateApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiForbiddenErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationUpdateApiForbiddenError";
  }
}

export type ClientAuthorizationUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientAuthorizationUpdateApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiUnauthorizedErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientAuthorizationUpdateApiUnauthorizedError";
  }
}

export type ClientAuthorizationUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientAuthorizationUpdateApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientAuthorizationUpdateApiBadRequestErrorData;

  constructor(
    err: ClientAuthorizationUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientAuthorizationUpdateApiBadRequestError";
  }
}

/** @internal */
export const ClientAuthorizationUpdateApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationUpdateApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiInternalServerError
  > = z.instanceof(ClientAuthorizationUpdateApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiInternalServerError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientAuthorizationUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientAuthorizationUpdateApiForbiddenError$inboundSchema:
  z.ZodType<ClientAuthorizationUpdateApiForbiddenError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientAuthorizationUpdateApiForbiddenError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientAuthorizationUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationUpdateApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiForbiddenError
  > = z.instanceof(ClientAuthorizationUpdateApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiForbiddenError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientAuthorizationUpdateApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientAuthorizationUpdateApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiUnauthorizedError
  > = z.instanceof(ClientAuthorizationUpdateApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiUnauthorizedError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientAuthorizationUpdateApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientAuthorizationUpdateApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientAuthorizationUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientAuthorizationUpdateApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientAuthorizationUpdateApiBadRequestError
  > = z.instanceof(ClientAuthorizationUpdateApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiBadRequestError$ {
  /** @deprecated use `ClientAuthorizationUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiBadRequestError$Outbound;
}
