/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenUpdateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenUpdateApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiFormInternalServerErrorData;

  constructor(
    err: AuthTokenUpdateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenUpdateApiFormInternalServerError";
  }
}

export type AuthTokenUpdateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenUpdateApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiFormForbiddenErrorData;

  constructor(
    err: AuthTokenUpdateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenUpdateApiFormForbiddenError";
  }
}

export type AuthTokenUpdateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenUpdateApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiFormUnauthorizedErrorData;

  constructor(
    err: AuthTokenUpdateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenUpdateApiFormUnauthorizedError";
  }
}

export type AuthTokenUpdateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenUpdateApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiFormBadRequestErrorData;

  constructor(
    err: AuthTokenUpdateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenUpdateApiFormBadRequestError";
  }
}

/** @internal */
export const AuthTokenUpdateApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthTokenUpdateApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthTokenUpdateApiFormInternalServerError
  > = z.instanceof(AuthTokenUpdateApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormInternalServerError$ {
  /** @deprecated use `AuthTokenUpdateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenUpdateApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormForbiddenError
> = z.instanceof(AuthTokenUpdateApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormForbiddenError$ {
  /** @deprecated use `AuthTokenUpdateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenUpdateApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormUnauthorizedError
> = z.instanceof(AuthTokenUpdateApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormUnauthorizedError$ {
  /** @deprecated use `AuthTokenUpdateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenUpdateApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenUpdateApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiFormBadRequestError
> = z.instanceof(AuthTokenUpdateApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiFormBadRequestError$ {
  /** @deprecated use `AuthTokenUpdateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiFormBadRequestError$Outbound;
}
