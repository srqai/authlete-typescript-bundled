/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciMetadataApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciMetadataApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiFormInternalServerErrorData;

  constructor(
    err: VciMetadataApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciMetadataApiFormInternalServerError";
  }
}

export type VciMetadataApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciMetadataApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiFormForbiddenErrorData;

  constructor(
    err: VciMetadataApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciMetadataApiFormForbiddenError";
  }
}

export type VciMetadataApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciMetadataApiFormUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiFormUnauthorizedErrorData;

  constructor(
    err: VciMetadataApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciMetadataApiFormUnauthorizedError";
  }
}

export type VciMetadataApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciMetadataApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiFormBadRequestErrorData;

  constructor(
    err: VciMetadataApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciMetadataApiFormBadRequestError";
  }
}

/** @internal */
export const VciMetadataApiFormInternalServerError$inboundSchema: z.ZodType<
  VciMetadataApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciMetadataApiFormInternalServerError$outboundSchema: z.ZodType<
  VciMetadataApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiFormInternalServerError
> = z.instanceof(VciMetadataApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormInternalServerError$ {
  /** @deprecated use `VciMetadataApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciMetadataApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciMetadataApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciMetadataApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciMetadataApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciMetadataApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciMetadataApiFormForbiddenError$inboundSchema: z.ZodType<
  VciMetadataApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciMetadataApiFormForbiddenError$outboundSchema: z.ZodType<
  VciMetadataApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiFormForbiddenError
> = z.instanceof(VciMetadataApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormForbiddenError$ {
  /** @deprecated use `VciMetadataApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciMetadataApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciMetadataApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciMetadataApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciMetadataApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciMetadataApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciMetadataApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciMetadataApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiFormUnauthorizedError
> = z.instanceof(VciMetadataApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormUnauthorizedError$ {
  /** @deprecated use `VciMetadataApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciMetadataApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciMetadataApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciMetadataApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciMetadataApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciMetadataApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciMetadataApiFormBadRequestError$inboundSchema: z.ZodType<
  VciMetadataApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciMetadataApiFormBadRequestError$outboundSchema: z.ZodType<
  VciMetadataApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiFormBadRequestError
> = z.instanceof(VciMetadataApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiFormBadRequestError$ {
  /** @deprecated use `VciMetadataApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciMetadataApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciMetadataApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciMetadataApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciMetadataApiFormBadRequestError$Outbound;
}
