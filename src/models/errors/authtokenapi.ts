/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiInternalServerErrorData;

  constructor(
    err: AuthTokenApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenApiInternalServerError";
  }
}

export type AuthTokenApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiForbiddenErrorData;

  constructor(
    err: AuthTokenApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenApiForbiddenError";
  }
}

export type AuthTokenApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenApiUnauthorizedError";
  }
}

export type AuthTokenApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenApiBadRequestErrorData;

  constructor(
    err: AuthTokenApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiInternalServerError
> = z.instanceof(AuthTokenApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiInternalServerError$ {
  /** @deprecated use `AuthTokenApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiForbiddenError
> = z.instanceof(AuthTokenApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiForbiddenError$ {
  /** @deprecated use `AuthTokenApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiUnauthorizedError
> = z.instanceof(AuthTokenApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenApiBadRequestError
> = z.instanceof(AuthTokenApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenApiBadRequestError$ {
  /** @deprecated use `AuthTokenApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenApiBadRequestError$Outbound;
}
