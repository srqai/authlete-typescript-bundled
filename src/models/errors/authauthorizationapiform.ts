/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthAuthorizationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiFormInternalServerErrorData;

  constructor(
    err: AuthAuthorizationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationApiFormInternalServerError";
  }
}

export type AuthAuthorizationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiFormForbiddenErrorData;

  constructor(
    err: AuthAuthorizationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationApiFormForbiddenError";
  }
}

export type AuthAuthorizationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiFormUnauthorizedErrorData;

  constructor(
    err: AuthAuthorizationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationApiFormUnauthorizedError";
  }
}

export type AuthAuthorizationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthAuthorizationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiFormBadRequestErrorData;

  constructor(
    err: AuthAuthorizationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthAuthorizationApiFormBadRequestError";
  }
}

/** @internal */
export const AuthAuthorizationApiFormInternalServerError$inboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormInternalServerError
  > = z.instanceof(AuthAuthorizationApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormInternalServerError$ {
  /** @deprecated use `AuthAuthorizationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthAuthorizationApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormForbiddenError
> = z.instanceof(AuthAuthorizationApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormForbiddenError$ {
  /** @deprecated use `AuthAuthorizationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthAuthorizationApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthAuthorizationApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationApiFormUnauthorizedError
  > = z.instanceof(AuthAuthorizationApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormUnauthorizedError$ {
  /** @deprecated use `AuthAuthorizationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthAuthorizationApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthAuthorizationApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthAuthorizationApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiFormBadRequestError
> = z.instanceof(AuthAuthorizationApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiFormBadRequestError$ {
  /** @deprecated use `AuthAuthorizationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiFormBadRequestError$Outbound;
}
