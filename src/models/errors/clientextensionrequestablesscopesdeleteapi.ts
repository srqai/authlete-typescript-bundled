/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientExtensionRequestablesScopesDeleteApiInternalServerErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class ClientExtensionRequestablesScopesDeleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesDeleteApiInternalServerErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesDeleteApiInternalServerError";
  }
}

export type ClientExtensionRequestablesScopesDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesDeleteApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesDeleteApiForbiddenErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesDeleteApiForbiddenError";
  }
}

export type ClientExtensionRequestablesScopesDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesDeleteApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesDeleteApiUnauthorizedErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesDeleteApiUnauthorizedError";
  }
}

export type ClientExtensionRequestablesScopesDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientExtensionRequestablesScopesDeleteApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesDeleteApiBadRequestErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientExtensionRequestablesScopesDeleteApiBadRequestError";
  }
}

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesDeleteApiInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type ClientExtensionRequestablesScopesDeleteApiInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesDeleteApiInternalServerError
  > = z.instanceof(
    ClientExtensionRequestablesScopesDeleteApiInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesDeleteApiInternalServerError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiForbiddenError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesDeleteApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesDeleteApiForbiddenError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesDeleteApiForbiddenError
  > = z.instanceof(ClientExtensionRequestablesScopesDeleteApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesDeleteApiForbiddenError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesDeleteApiUnauthorizedError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesDeleteApiUnauthorizedError
  > = z.instanceof(ClientExtensionRequestablesScopesDeleteApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesDeleteApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesDeleteApiBadRequestError$Outbound =
  {
    resultCode?: string | undefined;
    resultMessage?: string | undefined;
  };

/** @internal */
export const ClientExtensionRequestablesScopesDeleteApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesDeleteApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesDeleteApiBadRequestError
  > = z.instanceof(ClientExtensionRequestablesScopesDeleteApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesDeleteApiBadRequestError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesDeleteApiBadRequestError$Outbound;
}
