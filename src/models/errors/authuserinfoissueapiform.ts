/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthUserinfoIssueApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoIssueApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiFormInternalServerErrorData;

  constructor(
    err: AuthUserinfoIssueApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoIssueApiFormInternalServerError";
  }
}

export type AuthUserinfoIssueApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoIssueApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiFormForbiddenErrorData;

  constructor(
    err: AuthUserinfoIssueApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoIssueApiFormForbiddenError";
  }
}

export type AuthUserinfoIssueApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoIssueApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiFormUnauthorizedErrorData;

  constructor(
    err: AuthUserinfoIssueApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoIssueApiFormUnauthorizedError";
  }
}

export type AuthUserinfoIssueApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthUserinfoIssueApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiFormBadRequestErrorData;

  constructor(
    err: AuthUserinfoIssueApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthUserinfoIssueApiFormBadRequestError";
  }
}

/** @internal */
export const AuthUserinfoIssueApiFormInternalServerError$inboundSchema:
  z.ZodType<
    AuthUserinfoIssueApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthUserinfoIssueApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthUserinfoIssueApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthUserinfoIssueApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthUserinfoIssueApiFormInternalServerError
  > = z.instanceof(AuthUserinfoIssueApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormInternalServerError$ {
  /** @deprecated use `AuthUserinfoIssueApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthUserinfoIssueApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiFormForbiddenError
> = z.instanceof(AuthUserinfoIssueApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormForbiddenError$ {
  /** @deprecated use `AuthUserinfoIssueApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthUserinfoIssueApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthUserinfoIssueApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthUserinfoIssueApiFormUnauthorizedError
  > = z.instanceof(AuthUserinfoIssueApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormUnauthorizedError$ {
  /** @deprecated use `AuthUserinfoIssueApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthUserinfoIssueApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiFormBadRequestError
> = z.instanceof(AuthUserinfoIssueApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiFormBadRequestError$ {
  /** @deprecated use `AuthUserinfoIssueApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiFormBadRequestError$Outbound;
}
