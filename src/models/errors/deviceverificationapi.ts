/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type DeviceVerificationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceVerificationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiInternalServerErrorData;

  constructor(
    err: DeviceVerificationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceVerificationApiInternalServerError";
  }
}

export type DeviceVerificationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceVerificationApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiForbiddenErrorData;

  constructor(
    err: DeviceVerificationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceVerificationApiForbiddenError";
  }
}

export type DeviceVerificationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceVerificationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiUnauthorizedErrorData;

  constructor(
    err: DeviceVerificationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceVerificationApiUnauthorizedError";
  }
}

export type DeviceVerificationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class DeviceVerificationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiBadRequestErrorData;

  constructor(
    err: DeviceVerificationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "DeviceVerificationApiBadRequestError";
  }
}

/** @internal */
export const DeviceVerificationApiInternalServerError$inboundSchema: z.ZodType<
  DeviceVerificationApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceVerificationApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceVerificationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiInternalServerError$outboundSchema: z.ZodType<
  DeviceVerificationApiInternalServerError$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiInternalServerError
> = z.instanceof(DeviceVerificationApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiInternalServerError$ {
  /** @deprecated use `DeviceVerificationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiInternalServerError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiInternalServerError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiInternalServerError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiInternalServerError$Outbound;
}

/** @internal */
export const DeviceVerificationApiForbiddenError$inboundSchema: z.ZodType<
  DeviceVerificationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceVerificationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceVerificationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiForbiddenError$outboundSchema: z.ZodType<
  DeviceVerificationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiForbiddenError
> = z.instanceof(DeviceVerificationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiForbiddenError$ {
  /** @deprecated use `DeviceVerificationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiForbiddenError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiForbiddenError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiForbiddenError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiForbiddenError$Outbound;
}

/** @internal */
export const DeviceVerificationApiUnauthorizedError$inboundSchema: z.ZodType<
  DeviceVerificationApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceVerificationApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceVerificationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiUnauthorizedError$outboundSchema: z.ZodType<
  DeviceVerificationApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiUnauthorizedError
> = z.instanceof(DeviceVerificationApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiUnauthorizedError$ {
  /** @deprecated use `DeviceVerificationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiUnauthorizedError$Outbound;
}

/** @internal */
export const DeviceVerificationApiBadRequestError$inboundSchema: z.ZodType<
  DeviceVerificationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceVerificationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceVerificationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiBadRequestError$outboundSchema: z.ZodType<
  DeviceVerificationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiBadRequestError
> = z.instanceof(DeviceVerificationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiBadRequestError$ {
  /** @deprecated use `DeviceVerificationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiBadRequestError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiBadRequestError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiBadRequestError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiBadRequestError$Outbound;
}
