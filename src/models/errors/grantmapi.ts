/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type GrantMApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class GrantMApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: GrantMApiInternalServerErrorData;

  constructor(
    err: GrantMApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "GrantMApiInternalServerError";
  }
}

export type GrantMApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class GrantMApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: GrantMApiForbiddenErrorData;

  constructor(
    err: GrantMApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "GrantMApiForbiddenError";
  }
}

export type GrantMApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class GrantMApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: GrantMApiUnauthorizedErrorData;

  constructor(
    err: GrantMApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "GrantMApiUnauthorizedError";
  }
}

export type GrantMApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class GrantMApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: GrantMApiBadRequestErrorData;

  constructor(
    err: GrantMApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "GrantMApiBadRequestError";
  }
}

/** @internal */
export const GrantMApiInternalServerError$inboundSchema: z.ZodType<
  GrantMApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GrantMApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GrantMApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const GrantMApiInternalServerError$outboundSchema: z.ZodType<
  GrantMApiInternalServerError$Outbound,
  z.ZodTypeDef,
  GrantMApiInternalServerError
> = z.instanceof(GrantMApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiInternalServerError$ {
  /** @deprecated use `GrantMApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = GrantMApiInternalServerError$inboundSchema;
  /** @deprecated use `GrantMApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = GrantMApiInternalServerError$outboundSchema;
  /** @deprecated use `GrantMApiInternalServerError$Outbound` instead. */
  export type Outbound = GrantMApiInternalServerError$Outbound;
}

/** @internal */
export const GrantMApiForbiddenError$inboundSchema: z.ZodType<
  GrantMApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GrantMApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GrantMApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const GrantMApiForbiddenError$outboundSchema: z.ZodType<
  GrantMApiForbiddenError$Outbound,
  z.ZodTypeDef,
  GrantMApiForbiddenError
> = z.instanceof(GrantMApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiForbiddenError$ {
  /** @deprecated use `GrantMApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = GrantMApiForbiddenError$inboundSchema;
  /** @deprecated use `GrantMApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = GrantMApiForbiddenError$outboundSchema;
  /** @deprecated use `GrantMApiForbiddenError$Outbound` instead. */
  export type Outbound = GrantMApiForbiddenError$Outbound;
}

/** @internal */
export const GrantMApiUnauthorizedError$inboundSchema: z.ZodType<
  GrantMApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GrantMApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GrantMApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const GrantMApiUnauthorizedError$outboundSchema: z.ZodType<
  GrantMApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  GrantMApiUnauthorizedError
> = z.instanceof(GrantMApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiUnauthorizedError$ {
  /** @deprecated use `GrantMApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = GrantMApiUnauthorizedError$inboundSchema;
  /** @deprecated use `GrantMApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = GrantMApiUnauthorizedError$outboundSchema;
  /** @deprecated use `GrantMApiUnauthorizedError$Outbound` instead. */
  export type Outbound = GrantMApiUnauthorizedError$Outbound;
}

/** @internal */
export const GrantMApiBadRequestError$inboundSchema: z.ZodType<
  GrantMApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GrantMApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GrantMApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const GrantMApiBadRequestError$outboundSchema: z.ZodType<
  GrantMApiBadRequestError$Outbound,
  z.ZodTypeDef,
  GrantMApiBadRequestError
> = z.instanceof(GrantMApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiBadRequestError$ {
  /** @deprecated use `GrantMApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = GrantMApiBadRequestError$inboundSchema;
  /** @deprecated use `GrantMApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = GrantMApiBadRequestError$outboundSchema;
  /** @deprecated use `GrantMApiBadRequestError$Outbound` instead. */
  export type Outbound = GrantMApiBadRequestError$Outbound;
}
