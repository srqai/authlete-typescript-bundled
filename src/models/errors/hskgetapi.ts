/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type HskGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskGetApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskGetApiInternalServerErrorData;

  constructor(
    err: HskGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskGetApiInternalServerError";
  }
}

export type HskGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskGetApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskGetApiForbiddenErrorData;

  constructor(
    err: HskGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskGetApiForbiddenError";
  }
}

export type HskGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class HskGetApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: HskGetApiUnauthorizedErrorData;

  constructor(
    err: HskGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "HskGetApiUnauthorizedError";
  }
}

export type HskGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class HskGetApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HskGetApiBadRequestErrorData;

  constructor(
    err: HskGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "HskGetApiBadRequestError";
  }
}

/** @internal */
export const HskGetApiInternalServerError$inboundSchema: z.ZodType<
  HskGetApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskGetApiInternalServerError$outboundSchema: z.ZodType<
  HskGetApiInternalServerError$Outbound,
  z.ZodTypeDef,
  HskGetApiInternalServerError
> = z.instanceof(HskGetApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiInternalServerError$ {
  /** @deprecated use `HskGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = HskGetApiInternalServerError$inboundSchema;
  /** @deprecated use `HskGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = HskGetApiInternalServerError$outboundSchema;
  /** @deprecated use `HskGetApiInternalServerError$Outbound` instead. */
  export type Outbound = HskGetApiInternalServerError$Outbound;
}

/** @internal */
export const HskGetApiForbiddenError$inboundSchema: z.ZodType<
  HskGetApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskGetApiForbiddenError$outboundSchema: z.ZodType<
  HskGetApiForbiddenError$Outbound,
  z.ZodTypeDef,
  HskGetApiForbiddenError
> = z.instanceof(HskGetApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiForbiddenError$ {
  /** @deprecated use `HskGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = HskGetApiForbiddenError$inboundSchema;
  /** @deprecated use `HskGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = HskGetApiForbiddenError$outboundSchema;
  /** @deprecated use `HskGetApiForbiddenError$Outbound` instead. */
  export type Outbound = HskGetApiForbiddenError$Outbound;
}

/** @internal */
export const HskGetApiUnauthorizedError$inboundSchema: z.ZodType<
  HskGetApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const HskGetApiUnauthorizedError$outboundSchema: z.ZodType<
  HskGetApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  HskGetApiUnauthorizedError
> = z.instanceof(HskGetApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiUnauthorizedError$ {
  /** @deprecated use `HskGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = HskGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `HskGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = HskGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `HskGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound = HskGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const HskGetApiBadRequestError$inboundSchema: z.ZodType<
  HskGetApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HskGetApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HskGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const HskGetApiBadRequestError$outboundSchema: z.ZodType<
  HskGetApiBadRequestError$Outbound,
  z.ZodTypeDef,
  HskGetApiBadRequestError
> = z.instanceof(HskGetApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetApiBadRequestError$ {
  /** @deprecated use `HskGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = HskGetApiBadRequestError$inboundSchema;
  /** @deprecated use `HskGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = HskGetApiBadRequestError$outboundSchema;
  /** @deprecated use `HskGetApiBadRequestError$Outbound` instead. */
  export type Outbound = HskGetApiBadRequestError$Outbound;
}
