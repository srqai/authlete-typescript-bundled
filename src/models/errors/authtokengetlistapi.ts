/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenGetListApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenGetListApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenGetListApiInternalServerErrorData;

  constructor(
    err: AuthTokenGetListApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenGetListApiInternalServerError";
  }
}

export type AuthTokenGetListApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenGetListApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenGetListApiForbiddenErrorData;

  constructor(
    err: AuthTokenGetListApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenGetListApiForbiddenError";
  }
}

export type AuthTokenGetListApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenGetListApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenGetListApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenGetListApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenGetListApiUnauthorizedError";
  }
}

export type AuthTokenGetListApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenGetListApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenGetListApiBadRequestErrorData;

  constructor(
    err: AuthTokenGetListApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenGetListApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenGetListApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenGetListApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenGetListApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenGetListApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenGetListApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenGetListApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiInternalServerError
> = z.instanceof(AuthTokenGetListApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiInternalServerError$ {
  /** @deprecated use `AuthTokenGetListApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenGetListApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenGetListApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenGetListApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenGetListApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenGetListApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenGetListApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenGetListApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenGetListApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiForbiddenError
> = z.instanceof(AuthTokenGetListApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiForbiddenError$ {
  /** @deprecated use `AuthTokenGetListApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenGetListApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenGetListApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenGetListApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenGetListApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenGetListApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenGetListApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenGetListApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiUnauthorizedError
> = z.instanceof(AuthTokenGetListApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenGetListApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenGetListApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenGetListApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenGetListApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenGetListApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenGetListApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenGetListApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenGetListApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenGetListApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenGetListApiBadRequestError
> = z.instanceof(AuthTokenGetListApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenGetListApiBadRequestError$ {
  /** @deprecated use `AuthTokenGetListApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenGetListApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenGetListApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenGetListApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenGetListApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenGetListApiBadRequestError$Outbound;
}
