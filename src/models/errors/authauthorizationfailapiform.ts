/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthAuthorizationFailApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationFailApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiFormInternalServerErrorData;

  constructor(
    err: AuthAuthorizationFailApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationFailApiFormInternalServerError";
  }
}

export type AuthAuthorizationFailApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationFailApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiFormForbiddenErrorData;

  constructor(
    err: AuthAuthorizationFailApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationFailApiFormForbiddenError";
  }
}

export type AuthAuthorizationFailApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationFailApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiFormUnauthorizedErrorData;

  constructor(
    err: AuthAuthorizationFailApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationFailApiFormUnauthorizedError";
  }
}

export type AuthAuthorizationFailApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthAuthorizationFailApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationFailApiFormBadRequestErrorData;

  constructor(
    err: AuthAuthorizationFailApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthAuthorizationFailApiFormBadRequestError";
  }
}

/** @internal */
export const AuthAuthorizationFailApiFormInternalServerError$inboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationFailApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationFailApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationFailApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationFailApiFormInternalServerError
  > = z.instanceof(AuthAuthorizationFailApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormInternalServerError$ {
  /** @deprecated use `AuthAuthorizationFailApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    AuthAuthorizationFailApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthAuthorizationFailApiFormForbiddenError$inboundSchema:
  z.ZodType<AuthAuthorizationFailApiFormForbiddenError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new AuthAuthorizationFailApiFormForbiddenError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type AuthAuthorizationFailApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationFailApiFormForbiddenError$outboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationFailApiFormForbiddenError
  > = z.instanceof(AuthAuthorizationFailApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormForbiddenError$ {
  /** @deprecated use `AuthAuthorizationFailApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthAuthorizationFailApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationFailApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationFailApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationFailApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationFailApiFormUnauthorizedError
  > = z.instanceof(AuthAuthorizationFailApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormUnauthorizedError$ {
  /** @deprecated use `AuthAuthorizationFailApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthAuthorizationFailApiFormBadRequestError$inboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthAuthorizationFailApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthAuthorizationFailApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthAuthorizationFailApiFormBadRequestError$outboundSchema:
  z.ZodType<
    AuthAuthorizationFailApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    AuthAuthorizationFailApiFormBadRequestError
  > = z.instanceof(AuthAuthorizationFailApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiFormBadRequestError$ {
  /** @deprecated use `AuthAuthorizationFailApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationFailApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationFailApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiFormBadRequestError$Outbound;
}
