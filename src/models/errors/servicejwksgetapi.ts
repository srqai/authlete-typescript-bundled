/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceJwksGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceJwksGetApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceJwksGetApiInternalServerErrorData;

  constructor(
    err: ServiceJwksGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceJwksGetApiInternalServerError";
  }
}

export type ServiceJwksGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceJwksGetApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceJwksGetApiForbiddenErrorData;

  constructor(
    err: ServiceJwksGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceJwksGetApiForbiddenError";
  }
}

export type ServiceJwksGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceJwksGetApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceJwksGetApiUnauthorizedErrorData;

  constructor(
    err: ServiceJwksGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceJwksGetApiUnauthorizedError";
  }
}

export type ServiceJwksGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceJwksGetApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceJwksGetApiBadRequestErrorData;

  constructor(
    err: ServiceJwksGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceJwksGetApiBadRequestError";
  }
}

/** @internal */
export const ServiceJwksGetApiInternalServerError$inboundSchema: z.ZodType<
  ServiceJwksGetApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceJwksGetApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceJwksGetApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceJwksGetApiInternalServerError$outboundSchema: z.ZodType<
  ServiceJwksGetApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetApiInternalServerError
> = z.instanceof(ServiceJwksGetApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetApiInternalServerError$ {
  /** @deprecated use `ServiceJwksGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceJwksGetApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceJwksGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceJwksGetApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceJwksGetApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceJwksGetApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceJwksGetApiForbiddenError$inboundSchema: z.ZodType<
  ServiceJwksGetApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceJwksGetApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceJwksGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceJwksGetApiForbiddenError$outboundSchema: z.ZodType<
  ServiceJwksGetApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetApiForbiddenError
> = z.instanceof(ServiceJwksGetApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetApiForbiddenError$ {
  /** @deprecated use `ServiceJwksGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ServiceJwksGetApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceJwksGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ServiceJwksGetApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceJwksGetApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceJwksGetApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceJwksGetApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceJwksGetApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceJwksGetApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceJwksGetApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceJwksGetApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceJwksGetApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetApiUnauthorizedError
> = z.instanceof(ServiceJwksGetApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetApiUnauthorizedError$ {
  /** @deprecated use `ServiceJwksGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ServiceJwksGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceJwksGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceJwksGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceJwksGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceJwksGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceJwksGetApiBadRequestError$inboundSchema: z.ZodType<
  ServiceJwksGetApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceJwksGetApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceJwksGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceJwksGetApiBadRequestError$outboundSchema: z.ZodType<
  ServiceJwksGetApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetApiBadRequestError
> = z.instanceof(ServiceJwksGetApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetApiBadRequestError$ {
  /** @deprecated use `ServiceJwksGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ServiceJwksGetApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceJwksGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ServiceJwksGetApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceJwksGetApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceJwksGetApiBadRequestError$Outbound;
}
