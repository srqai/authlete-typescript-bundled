/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthIntrospectionApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiInternalServerErrorData;

  constructor(
    err: AuthIntrospectionApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionApiInternalServerError";
  }
}

export type AuthIntrospectionApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiForbiddenErrorData;

  constructor(
    err: AuthIntrospectionApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionApiForbiddenError";
  }
}

export type AuthIntrospectionApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiUnauthorizedErrorData;

  constructor(
    err: AuthIntrospectionApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionApiUnauthorizedError";
  }
}

export type AuthIntrospectionApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthIntrospectionApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionApiBadRequestErrorData;

  constructor(
    err: AuthIntrospectionApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthIntrospectionApiBadRequestError";
  }
}

/** @internal */
export const AuthIntrospectionApiInternalServerError$inboundSchema: z.ZodType<
  AuthIntrospectionApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiInternalServerError$outboundSchema: z.ZodType<
  AuthIntrospectionApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiInternalServerError
> = z.instanceof(AuthIntrospectionApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiInternalServerError$ {
  /** @deprecated use `AuthIntrospectionApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiInternalServerError$Outbound;
}

/** @internal */
export const AuthIntrospectionApiForbiddenError$inboundSchema: z.ZodType<
  AuthIntrospectionApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiForbiddenError$outboundSchema: z.ZodType<
  AuthIntrospectionApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiForbiddenError
> = z.instanceof(AuthIntrospectionApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiForbiddenError$ {
  /** @deprecated use `AuthIntrospectionApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiForbiddenError$Outbound;
}

/** @internal */
export const AuthIntrospectionApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthIntrospectionApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthIntrospectionApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiUnauthorizedError
> = z.instanceof(AuthIntrospectionApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiUnauthorizedError$ {
  /** @deprecated use `AuthIntrospectionApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthIntrospectionApiBadRequestError$inboundSchema: z.ZodType<
  AuthIntrospectionApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthIntrospectionApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthIntrospectionApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthIntrospectionApiBadRequestError$outboundSchema: z.ZodType<
  AuthIntrospectionApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiBadRequestError
> = z.instanceof(AuthIntrospectionApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiBadRequestError$ {
  /** @deprecated use `AuthIntrospectionApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiBadRequestError$Outbound;
}
