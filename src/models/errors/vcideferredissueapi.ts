/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciDeferredIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredIssueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredIssueApiInternalServerErrorData;

  constructor(
    err: VciDeferredIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredIssueApiInternalServerError";
  }
}

export type VciDeferredIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredIssueApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredIssueApiForbiddenErrorData;

  constructor(
    err: VciDeferredIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredIssueApiForbiddenError";
  }
}

export type VciDeferredIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredIssueApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredIssueApiUnauthorizedErrorData;

  constructor(
    err: VciDeferredIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredIssueApiUnauthorizedError";
  }
}

export type VciDeferredIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciDeferredIssueApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredIssueApiBadRequestErrorData;

  constructor(
    err: VciDeferredIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciDeferredIssueApiBadRequestError";
  }
}

/** @internal */
export const VciDeferredIssueApiInternalServerError$inboundSchema: z.ZodType<
  VciDeferredIssueApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredIssueApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredIssueApiInternalServerError$outboundSchema: z.ZodType<
  VciDeferredIssueApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiInternalServerError
> = z.instanceof(VciDeferredIssueApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiInternalServerError$ {
  /** @deprecated use `VciDeferredIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiInternalServerError$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiInternalServerError$Outbound;
}

/** @internal */
export const VciDeferredIssueApiForbiddenError$inboundSchema: z.ZodType<
  VciDeferredIssueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredIssueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredIssueApiForbiddenError$outboundSchema: z.ZodType<
  VciDeferredIssueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiForbiddenError
> = z.instanceof(VciDeferredIssueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiForbiddenError$ {
  /** @deprecated use `VciDeferredIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiForbiddenError$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiForbiddenError$Outbound;
}

/** @internal */
export const VciDeferredIssueApiUnauthorizedError$inboundSchema: z.ZodType<
  VciDeferredIssueApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredIssueApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredIssueApiUnauthorizedError$outboundSchema: z.ZodType<
  VciDeferredIssueApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiUnauthorizedError
> = z.instanceof(VciDeferredIssueApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiUnauthorizedError$ {
  /** @deprecated use `VciDeferredIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciDeferredIssueApiBadRequestError$inboundSchema: z.ZodType<
  VciDeferredIssueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredIssueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciDeferredIssueApiBadRequestError$outboundSchema: z.ZodType<
  VciDeferredIssueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueApiBadRequestError
> = z.instanceof(VciDeferredIssueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueApiBadRequestError$ {
  /** @deprecated use `VciDeferredIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `VciDeferredIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `VciDeferredIssueApiBadRequestError$Outbound` instead. */
  export type Outbound = VciDeferredIssueApiBadRequestError$Outbound;
}
