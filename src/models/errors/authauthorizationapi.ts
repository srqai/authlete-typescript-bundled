/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthAuthorizationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiInternalServerErrorData;

  constructor(
    err: AuthAuthorizationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationApiInternalServerError";
  }
}

export type AuthAuthorizationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiForbiddenErrorData;

  constructor(
    err: AuthAuthorizationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationApiForbiddenError";
  }
}

export type AuthAuthorizationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthAuthorizationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiUnauthorizedErrorData;

  constructor(
    err: AuthAuthorizationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthAuthorizationApiUnauthorizedError";
  }
}

export type AuthAuthorizationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthAuthorizationApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthAuthorizationApiBadRequestErrorData;

  constructor(
    err: AuthAuthorizationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthAuthorizationApiBadRequestError";
  }
}

/** @internal */
export const AuthAuthorizationApiInternalServerError$inboundSchema: z.ZodType<
  AuthAuthorizationApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiInternalServerError$outboundSchema: z.ZodType<
  AuthAuthorizationApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiInternalServerError
> = z.instanceof(AuthAuthorizationApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiInternalServerError$ {
  /** @deprecated use `AuthAuthorizationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiInternalServerError$Outbound;
}

/** @internal */
export const AuthAuthorizationApiForbiddenError$inboundSchema: z.ZodType<
  AuthAuthorizationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiForbiddenError$outboundSchema: z.ZodType<
  AuthAuthorizationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiForbiddenError
> = z.instanceof(AuthAuthorizationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiForbiddenError$ {
  /** @deprecated use `AuthAuthorizationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiForbiddenError$Outbound;
}

/** @internal */
export const AuthAuthorizationApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthAuthorizationApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthAuthorizationApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthAuthorizationApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiUnauthorizedError
> = z.instanceof(AuthAuthorizationApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiUnauthorizedError$ {
  /** @deprecated use `AuthAuthorizationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthAuthorizationApiBadRequestError$inboundSchema: z.ZodType<
  AuthAuthorizationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthAuthorizationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthAuthorizationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthAuthorizationApiBadRequestError$outboundSchema: z.ZodType<
  AuthAuthorizationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiBadRequestError
> = z.instanceof(AuthAuthorizationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiBadRequestError$ {
  /** @deprecated use `AuthAuthorizationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthAuthorizationApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthAuthorizationApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiBadRequestError$Outbound;
}
