/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type JoseVerifyApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class JoseVerifyApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiFormInternalServerErrorData;

  constructor(
    err: JoseVerifyApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "JoseVerifyApiFormInternalServerError";
  }
}

export type JoseVerifyApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class JoseVerifyApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiFormForbiddenErrorData;

  constructor(
    err: JoseVerifyApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "JoseVerifyApiFormForbiddenError";
  }
}

export type JoseVerifyApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class JoseVerifyApiFormUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiFormUnauthorizedErrorData;

  constructor(
    err: JoseVerifyApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "JoseVerifyApiFormUnauthorizedError";
  }
}

export type JoseVerifyApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class JoseVerifyApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiFormBadRequestErrorData;

  constructor(
    err: JoseVerifyApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "JoseVerifyApiFormBadRequestError";
  }
}

/** @internal */
export const JoseVerifyApiFormInternalServerError$inboundSchema: z.ZodType<
  JoseVerifyApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiFormInternalServerError$outboundSchema: z.ZodType<
  JoseVerifyApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormInternalServerError
> = z.instanceof(JoseVerifyApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormInternalServerError$ {
  /** @deprecated use `JoseVerifyApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    JoseVerifyApiFormInternalServerError$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    JoseVerifyApiFormInternalServerError$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormInternalServerError$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormInternalServerError$Outbound;
}

/** @internal */
export const JoseVerifyApiFormForbiddenError$inboundSchema: z.ZodType<
  JoseVerifyApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiFormForbiddenError$outboundSchema: z.ZodType<
  JoseVerifyApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormForbiddenError
> = z.instanceof(JoseVerifyApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormForbiddenError$ {
  /** @deprecated use `JoseVerifyApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiFormForbiddenError$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiFormForbiddenError$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormForbiddenError$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormForbiddenError$Outbound;
}

/** @internal */
export const JoseVerifyApiFormUnauthorizedError$inboundSchema: z.ZodType<
  JoseVerifyApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiFormUnauthorizedError$outboundSchema: z.ZodType<
  JoseVerifyApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormUnauthorizedError
> = z.instanceof(JoseVerifyApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormUnauthorizedError$ {
  /** @deprecated use `JoseVerifyApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    JoseVerifyApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const JoseVerifyApiFormBadRequestError$inboundSchema: z.ZodType<
  JoseVerifyApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const JoseVerifyApiFormBadRequestError$outboundSchema: z.ZodType<
  JoseVerifyApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiFormBadRequestError
> = z.instanceof(JoseVerifyApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiFormBadRequestError$ {
  /** @deprecated use `JoseVerifyApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiFormBadRequestError$inboundSchema;
  /** @deprecated use `JoseVerifyApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiFormBadRequestError$outboundSchema;
  /** @deprecated use `JoseVerifyApiFormBadRequestError$Outbound` instead. */
  export type Outbound = JoseVerifyApiFormBadRequestError$Outbound;
}
