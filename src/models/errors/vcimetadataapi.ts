/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciMetadataApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciMetadataApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiInternalServerErrorData;

  constructor(
    err: VciMetadataApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciMetadataApiInternalServerError";
  }
}

export type VciMetadataApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciMetadataApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiForbiddenErrorData;

  constructor(
    err: VciMetadataApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciMetadataApiForbiddenError";
  }
}

export type VciMetadataApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciMetadataApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiUnauthorizedErrorData;

  constructor(
    err: VciMetadataApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciMetadataApiUnauthorizedError";
  }
}

export type VciMetadataApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciMetadataApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciMetadataApiBadRequestErrorData;

  constructor(
    err: VciMetadataApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciMetadataApiBadRequestError";
  }
}

/** @internal */
export const VciMetadataApiInternalServerError$inboundSchema: z.ZodType<
  VciMetadataApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciMetadataApiInternalServerError$outboundSchema: z.ZodType<
  VciMetadataApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiInternalServerError
> = z.instanceof(VciMetadataApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiInternalServerError$ {
  /** @deprecated use `VciMetadataApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiInternalServerError$inboundSchema;
  /** @deprecated use `VciMetadataApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciMetadataApiInternalServerError$outboundSchema;
  /** @deprecated use `VciMetadataApiInternalServerError$Outbound` instead. */
  export type Outbound = VciMetadataApiInternalServerError$Outbound;
}

/** @internal */
export const VciMetadataApiForbiddenError$inboundSchema: z.ZodType<
  VciMetadataApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciMetadataApiForbiddenError$outboundSchema: z.ZodType<
  VciMetadataApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiForbiddenError
> = z.instanceof(VciMetadataApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiForbiddenError$ {
  /** @deprecated use `VciMetadataApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiForbiddenError$inboundSchema;
  /** @deprecated use `VciMetadataApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiForbiddenError$outboundSchema;
  /** @deprecated use `VciMetadataApiForbiddenError$Outbound` instead. */
  export type Outbound = VciMetadataApiForbiddenError$Outbound;
}

/** @internal */
export const VciMetadataApiUnauthorizedError$inboundSchema: z.ZodType<
  VciMetadataApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciMetadataApiUnauthorizedError$outboundSchema: z.ZodType<
  VciMetadataApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiUnauthorizedError
> = z.instanceof(VciMetadataApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiUnauthorizedError$ {
  /** @deprecated use `VciMetadataApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciMetadataApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciMetadataApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciMetadataApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciMetadataApiBadRequestError$inboundSchema: z.ZodType<
  VciMetadataApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciMetadataApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciMetadataApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciMetadataApiBadRequestError$outboundSchema: z.ZodType<
  VciMetadataApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciMetadataApiBadRequestError
> = z.instanceof(VciMetadataApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataApiBadRequestError$ {
  /** @deprecated use `VciMetadataApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciMetadataApiBadRequestError$inboundSchema;
  /** @deprecated use `VciMetadataApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciMetadataApiBadRequestError$outboundSchema;
  /** @deprecated use `VciMetadataApiBadRequestError$Outbound` instead. */
  export type Outbound = VciMetadataApiBadRequestError$Outbound;
}
