/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type DeviceAuthorizationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceAuthorizationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiFormInternalServerErrorData;

  constructor(
    err: DeviceAuthorizationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceAuthorizationApiFormInternalServerError";
  }
}

export type DeviceAuthorizationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceAuthorizationApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiFormForbiddenErrorData;

  constructor(
    err: DeviceAuthorizationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceAuthorizationApiFormForbiddenError";
  }
}

export type DeviceAuthorizationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceAuthorizationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiFormUnauthorizedErrorData;

  constructor(
    err: DeviceAuthorizationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceAuthorizationApiFormUnauthorizedError";
  }
}

export type DeviceAuthorizationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class DeviceAuthorizationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeviceAuthorizationApiFormBadRequestErrorData;

  constructor(
    err: DeviceAuthorizationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "DeviceAuthorizationApiFormBadRequestError";
  }
}

/** @internal */
export const DeviceAuthorizationApiFormInternalServerError$inboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DeviceAuthorizationApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DeviceAuthorizationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiFormInternalServerError$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormInternalServerError
  > = z.instanceof(DeviceAuthorizationApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormInternalServerError$ {
  /** @deprecated use `DeviceAuthorizationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormInternalServerError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormInternalServerError$Outbound;
}

/** @internal */
export const DeviceAuthorizationApiFormForbiddenError$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceAuthorizationApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceAuthorizationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiFormForbiddenError$outboundSchema: z.ZodType<
  DeviceAuthorizationApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationApiFormForbiddenError
> = z.instanceof(DeviceAuthorizationApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormForbiddenError$ {
  /** @deprecated use `DeviceAuthorizationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormForbiddenError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormForbiddenError$Outbound;
}

/** @internal */
export const DeviceAuthorizationApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DeviceAuthorizationApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DeviceAuthorizationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceAuthorizationApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormUnauthorizedError
  > = z.instanceof(DeviceAuthorizationApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormUnauthorizedError$ {
  /** @deprecated use `DeviceAuthorizationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const DeviceAuthorizationApiFormBadRequestError$inboundSchema: z.ZodType<
  DeviceAuthorizationApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceAuthorizationApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceAuthorizationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationApiFormBadRequestError$outboundSchema:
  z.ZodType<
    DeviceAuthorizationApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    DeviceAuthorizationApiFormBadRequestError
  > = z.instanceof(DeviceAuthorizationApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationApiFormBadRequestError$ {
  /** @deprecated use `DeviceAuthorizationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceAuthorizationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceAuthorizationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `DeviceAuthorizationApiFormBadRequestError$Outbound` instead. */
  export type Outbound = DeviceAuthorizationApiFormBadRequestError$Outbound;
}
