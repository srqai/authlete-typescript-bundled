/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciOfferCreateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferCreateApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiFormInternalServerErrorData;

  constructor(
    err: VciOfferCreateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferCreateApiFormInternalServerError";
  }
}

export type VciOfferCreateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferCreateApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiFormForbiddenErrorData;

  constructor(
    err: VciOfferCreateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferCreateApiFormForbiddenError";
  }
}

export type VciOfferCreateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferCreateApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiFormUnauthorizedErrorData;

  constructor(
    err: VciOfferCreateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferCreateApiFormUnauthorizedError";
  }
}

export type VciOfferCreateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciOfferCreateApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiFormBadRequestErrorData;

  constructor(
    err: VciOfferCreateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciOfferCreateApiFormBadRequestError";
  }
}

/** @internal */
export const VciOfferCreateApiFormInternalServerError$inboundSchema: z.ZodType<
  VciOfferCreateApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiFormInternalServerError$outboundSchema: z.ZodType<
  VciOfferCreateApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormInternalServerError
> = z.instanceof(VciOfferCreateApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormInternalServerError$ {
  /** @deprecated use `VciOfferCreateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferCreateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferCreateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciOfferCreateApiFormForbiddenError$inboundSchema: z.ZodType<
  VciOfferCreateApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiFormForbiddenError$outboundSchema: z.ZodType<
  VciOfferCreateApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormForbiddenError
> = z.instanceof(VciOfferCreateApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormForbiddenError$ {
  /** @deprecated use `VciOfferCreateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferCreateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferCreateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciOfferCreateApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciOfferCreateApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciOfferCreateApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormUnauthorizedError
> = z.instanceof(VciOfferCreateApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormUnauthorizedError$ {
  /** @deprecated use `VciOfferCreateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferCreateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferCreateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciOfferCreateApiFormBadRequestError$inboundSchema: z.ZodType<
  VciOfferCreateApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciOfferCreateApiFormBadRequestError$outboundSchema: z.ZodType<
  VciOfferCreateApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiFormBadRequestError
> = z.instanceof(VciOfferCreateApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiFormBadRequestError$ {
  /** @deprecated use `VciOfferCreateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferCreateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferCreateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiFormBadRequestError$Outbound;
}
