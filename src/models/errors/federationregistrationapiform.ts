/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type FederationRegistrationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationRegistrationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiFormInternalServerErrorData;

  constructor(
    err: FederationRegistrationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationRegistrationApiFormInternalServerError";
  }
}

export type FederationRegistrationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationRegistrationApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiFormForbiddenErrorData;

  constructor(
    err: FederationRegistrationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationRegistrationApiFormForbiddenError";
  }
}

export type FederationRegistrationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class FederationRegistrationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiFormUnauthorizedErrorData;

  constructor(
    err: FederationRegistrationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "FederationRegistrationApiFormUnauthorizedError";
  }
}

export type FederationRegistrationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class FederationRegistrationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: FederationRegistrationApiFormBadRequestErrorData;

  constructor(
    err: FederationRegistrationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "FederationRegistrationApiFormBadRequestError";
  }
}

/** @internal */
export const FederationRegistrationApiFormInternalServerError$inboundSchema:
  z.ZodType<
    FederationRegistrationApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationRegistrationApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationRegistrationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiFormInternalServerError$outboundSchema:
  z.ZodType<
    FederationRegistrationApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    FederationRegistrationApiFormInternalServerError
  > = z.instanceof(FederationRegistrationApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormInternalServerError$ {
  /** @deprecated use `FederationRegistrationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    FederationRegistrationApiFormInternalServerError$Outbound;
}

/** @internal */
export const FederationRegistrationApiFormForbiddenError$inboundSchema:
  z.ZodType<
    FederationRegistrationApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationRegistrationApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationRegistrationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiFormForbiddenError$outboundSchema:
  z.ZodType<
    FederationRegistrationApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    FederationRegistrationApiFormForbiddenError
  > = z.instanceof(FederationRegistrationApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormForbiddenError$ {
  /** @deprecated use `FederationRegistrationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormForbiddenError$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormForbiddenError$Outbound;
}

/** @internal */
export const FederationRegistrationApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    FederationRegistrationApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationRegistrationApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationRegistrationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const FederationRegistrationApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    FederationRegistrationApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    FederationRegistrationApiFormUnauthorizedError
  > = z.instanceof(FederationRegistrationApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormUnauthorizedError$ {
  /** @deprecated use `FederationRegistrationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    FederationRegistrationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const FederationRegistrationApiFormBadRequestError$inboundSchema:
  z.ZodType<
    FederationRegistrationApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FederationRegistrationApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FederationRegistrationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const FederationRegistrationApiFormBadRequestError$outboundSchema:
  z.ZodType<
    FederationRegistrationApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    FederationRegistrationApiFormBadRequestError
  > = z.instanceof(FederationRegistrationApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiFormBadRequestError$ {
  /** @deprecated use `FederationRegistrationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `FederationRegistrationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `FederationRegistrationApiFormBadRequestError$Outbound` instead. */
  export type Outbound = FederationRegistrationApiFormBadRequestError$Outbound;
}
