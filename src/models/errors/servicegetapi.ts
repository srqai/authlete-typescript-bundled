/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceGetApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetApiInternalServerErrorData;

  constructor(
    err: ServiceGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceGetApiInternalServerError";
  }
}

export type ServiceGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceGetApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetApiForbiddenErrorData;

  constructor(
    err: ServiceGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceGetApiForbiddenError";
  }
}

export type ServiceGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceGetApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetApiUnauthorizedErrorData;

  constructor(
    err: ServiceGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceGetApiUnauthorizedError";
  }
}

export type ServiceGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceGetApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetApiBadRequestErrorData;

  constructor(
    err: ServiceGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceGetApiBadRequestError";
  }
}

/** @internal */
export const ServiceGetApiInternalServerError$inboundSchema: z.ZodType<
  ServiceGetApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceGetApiInternalServerError$outboundSchema: z.ZodType<
  ServiceGetApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ServiceGetApiInternalServerError
> = z.instanceof(ServiceGetApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetApiInternalServerError$ {
  /** @deprecated use `ServiceGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = ServiceGetApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceGetApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceGetApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceGetApiForbiddenError$inboundSchema: z.ZodType<
  ServiceGetApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceGetApiForbiddenError$outboundSchema: z.ZodType<
  ServiceGetApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceGetApiForbiddenError
> = z.instanceof(ServiceGetApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetApiForbiddenError$ {
  /** @deprecated use `ServiceGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ServiceGetApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceGetApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceGetApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceGetApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceGetApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceGetApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceGetApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceGetApiUnauthorizedError
> = z.instanceof(ServiceGetApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetApiUnauthorizedError$ {
  /** @deprecated use `ServiceGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = ServiceGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceGetApiBadRequestError$inboundSchema: z.ZodType<
  ServiceGetApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceGetApiBadRequestError$outboundSchema: z.ZodType<
  ServiceGetApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceGetApiBadRequestError
> = z.instanceof(ServiceGetApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetApiBadRequestError$ {
  /** @deprecated use `ServiceGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ServiceGetApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceGetApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceGetApiBadRequestError$Outbound;
}
