/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationCompleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationCompleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationCompleteApiInternalServerError";
  }
}

export type BackchannelAuthenticationCompleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationCompleteApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationCompleteApiForbiddenError";
  }
}

export type BackchannelAuthenticationCompleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationCompleteApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationCompleteApiUnauthorizedError";
  }
}

export type BackchannelAuthenticationCompleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationCompleteApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationCompleteApiBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationCompleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationCompleteApiBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationCompleteApiInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiInternalServerError
  > = z.instanceof(BackchannelAuthenticationCompleteApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiForbiddenError
  > = z.instanceof(BackchannelAuthenticationCompleteApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationCompleteApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationCompleteApiBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationCompleteApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationCompleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiBadRequestError
  > = z.instanceof(BackchannelAuthenticationCompleteApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationCompleteApiBadRequestError$Outbound;
}
