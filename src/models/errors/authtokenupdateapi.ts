/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenUpdateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiInternalServerErrorData;

  constructor(
    err: AuthTokenUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenUpdateApiInternalServerError";
  }
}

export type AuthTokenUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenUpdateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiForbiddenErrorData;

  constructor(
    err: AuthTokenUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenUpdateApiForbiddenError";
  }
}

export type AuthTokenUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenUpdateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenUpdateApiUnauthorizedError";
  }
}

export type AuthTokenUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenUpdateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenUpdateApiBadRequestErrorData;

  constructor(
    err: AuthTokenUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenUpdateApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenUpdateApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiInternalServerError
> = z.instanceof(AuthTokenUpdateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiInternalServerError$ {
  /** @deprecated use `AuthTokenUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenUpdateApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiForbiddenError
> = z.instanceof(AuthTokenUpdateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiForbiddenError$ {
  /** @deprecated use `AuthTokenUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenUpdateApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenUpdateApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiUnauthorizedError
> = z.instanceof(AuthTokenUpdateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenUpdateApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenUpdateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenUpdateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenUpdateApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenUpdateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiBadRequestError
> = z.instanceof(AuthTokenUpdateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiBadRequestError$ {
  /** @deprecated use `AuthTokenUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiBadRequestError$Outbound;
}
