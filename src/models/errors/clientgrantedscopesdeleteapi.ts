/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientGrantedScopesDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGrantedScopesDeleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesDeleteApiInternalServerErrorData;

  constructor(
    err: ClientGrantedScopesDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGrantedScopesDeleteApiInternalServerError";
  }
}

export type ClientGrantedScopesDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGrantedScopesDeleteApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesDeleteApiForbiddenErrorData;

  constructor(
    err: ClientGrantedScopesDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGrantedScopesDeleteApiForbiddenError";
  }
}

export type ClientGrantedScopesDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientGrantedScopesDeleteApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesDeleteApiUnauthorizedErrorData;

  constructor(
    err: ClientGrantedScopesDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientGrantedScopesDeleteApiUnauthorizedError";
  }
}

export type ClientGrantedScopesDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientGrantedScopesDeleteApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientGrantedScopesDeleteApiBadRequestErrorData;

  constructor(
    err: ClientGrantedScopesDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientGrantedScopesDeleteApiBadRequestError";
  }
}

/** @internal */
export const ClientGrantedScopesDeleteApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientGrantedScopesDeleteApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientGrantedScopesDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGrantedScopesDeleteApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientGrantedScopesDeleteApiInternalServerError
  > = z.instanceof(ClientGrantedScopesDeleteApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesDeleteApiInternalServerError$ {
  /** @deprecated use `ClientGrantedScopesDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientGrantedScopesDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const ClientGrantedScopesDeleteApiForbiddenError$inboundSchema:
  z.ZodType<ClientGrantedScopesDeleteApiForbiddenError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientGrantedScopesDeleteApiForbiddenError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientGrantedScopesDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGrantedScopesDeleteApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientGrantedScopesDeleteApiForbiddenError
  > = z.instanceof(ClientGrantedScopesDeleteApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesDeleteApiForbiddenError$ {
  /** @deprecated use `ClientGrantedScopesDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const ClientGrantedScopesDeleteApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientGrantedScopesDeleteApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientGrantedScopesDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientGrantedScopesDeleteApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientGrantedScopesDeleteApiUnauthorizedError
  > = z.instanceof(ClientGrantedScopesDeleteApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesDeleteApiUnauthorizedError$ {
  /** @deprecated use `ClientGrantedScopesDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientGrantedScopesDeleteApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientGrantedScopesDeleteApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientGrantedScopesDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientGrantedScopesDeleteApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientGrantedScopesDeleteApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientGrantedScopesDeleteApiBadRequestError
  > = z.instanceof(ClientGrantedScopesDeleteApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGrantedScopesDeleteApiBadRequestError$ {
  /** @deprecated use `ClientGrantedScopesDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientGrantedScopesDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientGrantedScopesDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientGrantedScopesDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientGrantedScopesDeleteApiBadRequestError$Outbound;
}
