/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthRevocationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthRevocationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiInternalServerErrorData;

  constructor(
    err: AuthRevocationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthRevocationApiInternalServerError";
  }
}

export type AuthRevocationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthRevocationApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiForbiddenErrorData;

  constructor(
    err: AuthRevocationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthRevocationApiForbiddenError";
  }
}

export type AuthRevocationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthRevocationApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiUnauthorizedErrorData;

  constructor(
    err: AuthRevocationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthRevocationApiUnauthorizedError";
  }
}

export type AuthRevocationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthRevocationApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthRevocationApiBadRequestErrorData;

  constructor(
    err: AuthRevocationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthRevocationApiBadRequestError";
  }
}

/** @internal */
export const AuthRevocationApiInternalServerError$inboundSchema: z.ZodType<
  AuthRevocationApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthRevocationApiInternalServerError$outboundSchema: z.ZodType<
  AuthRevocationApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiInternalServerError
> = z.instanceof(AuthRevocationApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiInternalServerError$ {
  /** @deprecated use `AuthRevocationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthRevocationApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthRevocationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthRevocationApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthRevocationApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthRevocationApiInternalServerError$Outbound;
}

/** @internal */
export const AuthRevocationApiForbiddenError$inboundSchema: z.ZodType<
  AuthRevocationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthRevocationApiForbiddenError$outboundSchema: z.ZodType<
  AuthRevocationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiForbiddenError
> = z.instanceof(AuthRevocationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiForbiddenError$ {
  /** @deprecated use `AuthRevocationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthRevocationApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthRevocationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthRevocationApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthRevocationApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthRevocationApiForbiddenError$Outbound;
}

/** @internal */
export const AuthRevocationApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthRevocationApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthRevocationApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthRevocationApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiUnauthorizedError
> = z.instanceof(AuthRevocationApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiUnauthorizedError$ {
  /** @deprecated use `AuthRevocationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = AuthRevocationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthRevocationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthRevocationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthRevocationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthRevocationApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthRevocationApiBadRequestError$inboundSchema: z.ZodType<
  AuthRevocationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthRevocationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthRevocationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthRevocationApiBadRequestError$outboundSchema: z.ZodType<
  AuthRevocationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthRevocationApiBadRequestError
> = z.instanceof(AuthRevocationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthRevocationApiBadRequestError$ {
  /** @deprecated use `AuthRevocationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthRevocationApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthRevocationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = AuthRevocationApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthRevocationApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthRevocationApiBadRequestError$Outbound;
}
