/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationApiInternalServerError";
  }
}

export type BackchannelAuthenticationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationApiForbiddenError";
  }
}

export type BackchannelAuthenticationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationApiUnauthorizedError";
  }
}

export type BackchannelAuthenticationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationApiBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationApiBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationApiInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiInternalServerError
  > = z.instanceof(BackchannelAuthenticationApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationApiInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationApiForbiddenError$inboundSchema:
  z.ZodType<BackchannelAuthenticationApiForbiddenError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new BackchannelAuthenticationApiForbiddenError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type BackchannelAuthenticationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiForbiddenError
  > = z.instanceof(BackchannelAuthenticationApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiForbiddenError$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationApiUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationApiUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationApiBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationApiBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationApiBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationApiBadRequestError
  > = z.instanceof(BackchannelAuthenticationApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiBadRequestError$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiBadRequestError$Outbound;
}
