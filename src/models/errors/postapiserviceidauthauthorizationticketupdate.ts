/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name =
      "PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError";
  }
}

export type PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError";
  }
}

export type PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name =
      "PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError";
  }
}

export type PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestErrorData;

  constructor(
    err: PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError";
  }
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError
  > = z.instanceof(
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateInternalServerError$Outbound;
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError
  > = z.instanceof(PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateForbiddenError$Outbound;
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError
  > = z.instanceof(
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateUnauthorizedError$Outbound;
}

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$inboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$Outbound =
  {
    resultCode?: string | undefined;
    resultMessage?: string | undefined;
  };

/** @internal */
export const PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$outboundSchema:
  z.ZodType<
    PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$Outbound,
    z.ZodTypeDef,
    PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError
  > = z.instanceof(PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$ {
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$inboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$outboundSchema;
  /** @deprecated use `PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$Outbound` instead. */
  export type Outbound =
    PostApiServiceIdAuthAuthorizationTicketUpdateBadRequestError$Outbound;
}
