/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type JoseVerifyApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class JoseVerifyApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiInternalServerErrorData;

  constructor(
    err: JoseVerifyApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "JoseVerifyApiInternalServerError";
  }
}

export type JoseVerifyApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class JoseVerifyApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiForbiddenErrorData;

  constructor(
    err: JoseVerifyApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "JoseVerifyApiForbiddenError";
  }
}

export type JoseVerifyApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class JoseVerifyApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiUnauthorizedErrorData;

  constructor(
    err: JoseVerifyApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "JoseVerifyApiUnauthorizedError";
  }
}

export type JoseVerifyApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class JoseVerifyApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: JoseVerifyApiBadRequestErrorData;

  constructor(
    err: JoseVerifyApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "JoseVerifyApiBadRequestError";
  }
}

/** @internal */
export const JoseVerifyApiInternalServerError$inboundSchema: z.ZodType<
  JoseVerifyApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiInternalServerError$outboundSchema: z.ZodType<
  JoseVerifyApiInternalServerError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiInternalServerError
> = z.instanceof(JoseVerifyApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiInternalServerError$ {
  /** @deprecated use `JoseVerifyApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiInternalServerError$inboundSchema;
  /** @deprecated use `JoseVerifyApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiInternalServerError$outboundSchema;
  /** @deprecated use `JoseVerifyApiInternalServerError$Outbound` instead. */
  export type Outbound = JoseVerifyApiInternalServerError$Outbound;
}

/** @internal */
export const JoseVerifyApiForbiddenError$inboundSchema: z.ZodType<
  JoseVerifyApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiForbiddenError$outboundSchema: z.ZodType<
  JoseVerifyApiForbiddenError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiForbiddenError
> = z.instanceof(JoseVerifyApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiForbiddenError$ {
  /** @deprecated use `JoseVerifyApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiForbiddenError$inboundSchema;
  /** @deprecated use `JoseVerifyApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiForbiddenError$outboundSchema;
  /** @deprecated use `JoseVerifyApiForbiddenError$Outbound` instead. */
  export type Outbound = JoseVerifyApiForbiddenError$Outbound;
}

/** @internal */
export const JoseVerifyApiUnauthorizedError$inboundSchema: z.ZodType<
  JoseVerifyApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const JoseVerifyApiUnauthorizedError$outboundSchema: z.ZodType<
  JoseVerifyApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiUnauthorizedError
> = z.instanceof(JoseVerifyApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiUnauthorizedError$ {
  /** @deprecated use `JoseVerifyApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiUnauthorizedError$inboundSchema;
  /** @deprecated use `JoseVerifyApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiUnauthorizedError$outboundSchema;
  /** @deprecated use `JoseVerifyApiUnauthorizedError$Outbound` instead. */
  export type Outbound = JoseVerifyApiUnauthorizedError$Outbound;
}

/** @internal */
export const JoseVerifyApiBadRequestError$inboundSchema: z.ZodType<
  JoseVerifyApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new JoseVerifyApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type JoseVerifyApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const JoseVerifyApiBadRequestError$outboundSchema: z.ZodType<
  JoseVerifyApiBadRequestError$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiBadRequestError
> = z.instanceof(JoseVerifyApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiBadRequestError$ {
  /** @deprecated use `JoseVerifyApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiBadRequestError$inboundSchema;
  /** @deprecated use `JoseVerifyApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiBadRequestError$outboundSchema;
  /** @deprecated use `JoseVerifyApiBadRequestError$Outbound` instead. */
  export type Outbound = JoseVerifyApiBadRequestError$Outbound;
}
