/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationUpdateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiInternalServerErrorData;

  constructor(
    err: ClientRegistrationUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationUpdateApiInternalServerError";
  }
}

export type ClientRegistrationUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationUpdateApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiForbiddenErrorData;

  constructor(
    err: ClientRegistrationUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationUpdateApiForbiddenError";
  }
}

export type ClientRegistrationUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationUpdateApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationUpdateApiUnauthorizedError";
  }
}

export type ClientRegistrationUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationUpdateApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationUpdateApiBadRequestErrorData;

  constructor(
    err: ClientRegistrationUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationUpdateApiBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationUpdateApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationUpdateApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationUpdateApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiInternalServerError
  > = z.instanceof(ClientRegistrationUpdateApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiInternalServerError$ {
  /** @deprecated use `ClientRegistrationUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationUpdateApiForbiddenError$inboundSchema: z.ZodType<
  ClientRegistrationUpdateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationUpdateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationUpdateApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiForbiddenError
  > = z.instanceof(ClientRegistrationUpdateApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiForbiddenError$ {
  /** @deprecated use `ClientRegistrationUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationUpdateApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationUpdateApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationUpdateApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiUnauthorizedError
  > = z.instanceof(ClientRegistrationUpdateApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationUpdateApiBadRequestError$inboundSchema:
  z.ZodType<ClientRegistrationUpdateApiBadRequestError, z.ZodTypeDef, unknown> =
    z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientRegistrationUpdateApiBadRequestError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientRegistrationUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationUpdateApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientRegistrationUpdateApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationUpdateApiBadRequestError
  > = z.instanceof(ClientRegistrationUpdateApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationUpdateApiBadRequestError$ {
  /** @deprecated use `ClientRegistrationUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientRegistrationUpdateApiBadRequestError$Outbound;
}
