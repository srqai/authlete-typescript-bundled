/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciDeferredParseApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredParseApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiFormInternalServerErrorData;

  constructor(
    err: VciDeferredParseApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredParseApiFormInternalServerError";
  }
}

export type VciDeferredParseApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredParseApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiFormForbiddenErrorData;

  constructor(
    err: VciDeferredParseApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredParseApiFormForbiddenError";
  }
}

export type VciDeferredParseApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciDeferredParseApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiFormUnauthorizedErrorData;

  constructor(
    err: VciDeferredParseApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciDeferredParseApiFormUnauthorizedError";
  }
}

export type VciDeferredParseApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciDeferredParseApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciDeferredParseApiFormBadRequestErrorData;

  constructor(
    err: VciDeferredParseApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciDeferredParseApiFormBadRequestError";
  }
}

/** @internal */
export const VciDeferredParseApiFormInternalServerError$inboundSchema:
  z.ZodType<VciDeferredParseApiFormInternalServerError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new VciDeferredParseApiFormInternalServerError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type VciDeferredParseApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredParseApiFormInternalServerError$outboundSchema:
  z.ZodType<
    VciDeferredParseApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    VciDeferredParseApiFormInternalServerError
  > = z.instanceof(VciDeferredParseApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormInternalServerError$ {
  /** @deprecated use `VciDeferredParseApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredParseApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciDeferredParseApiFormForbiddenError$inboundSchema: z.ZodType<
  VciDeferredParseApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredParseApiFormForbiddenError$outboundSchema: z.ZodType<
  VciDeferredParseApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiFormForbiddenError
> = z.instanceof(VciDeferredParseApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormForbiddenError$ {
  /** @deprecated use `VciDeferredParseApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredParseApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciDeferredParseApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciDeferredParseApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciDeferredParseApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciDeferredParseApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiFormUnauthorizedError
> = z.instanceof(VciDeferredParseApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormUnauthorizedError$ {
  /** @deprecated use `VciDeferredParseApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredParseApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciDeferredParseApiFormBadRequestError$inboundSchema: z.ZodType<
  VciDeferredParseApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciDeferredParseApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciDeferredParseApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciDeferredParseApiFormBadRequestError$outboundSchema: z.ZodType<
  VciDeferredParseApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciDeferredParseApiFormBadRequestError
> = z.instanceof(VciDeferredParseApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseApiFormBadRequestError$ {
  /** @deprecated use `VciDeferredParseApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    VciDeferredParseApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciDeferredParseApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciDeferredParseApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciDeferredParseApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciDeferredParseApiFormBadRequestError$Outbound;
}
