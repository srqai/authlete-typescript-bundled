/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationDeleteApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationDeleteApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiFormInternalServerErrorData;

  constructor(
    err: ClientRegistrationDeleteApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationDeleteApiFormInternalServerError";
  }
}

export type ClientRegistrationDeleteApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationDeleteApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiFormForbiddenErrorData;

  constructor(
    err: ClientRegistrationDeleteApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationDeleteApiFormForbiddenError";
  }
}

export type ClientRegistrationDeleteApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationDeleteApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiFormUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationDeleteApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationDeleteApiFormUnauthorizedError";
  }
}

export type ClientRegistrationDeleteApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationDeleteApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiFormBadRequestErrorData;

  constructor(
    err: ClientRegistrationDeleteApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationDeleteApiFormBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationDeleteApiFormInternalServerError$inboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationDeleteApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationDeleteApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationDeleteApiFormInternalServerError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiFormInternalServerError
  > = z.instanceof(ClientRegistrationDeleteApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormInternalServerError$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationDeleteApiFormInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationDeleteApiFormForbiddenError$inboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationDeleteApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationDeleteApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationDeleteApiFormForbiddenError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiFormForbiddenError
  > = z.instanceof(ClientRegistrationDeleteApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormForbiddenError$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiFormForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationDeleteApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationDeleteApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationDeleteApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationDeleteApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiFormUnauthorizedError
  > = z.instanceof(ClientRegistrationDeleteApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationDeleteApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationDeleteApiFormBadRequestError$inboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationDeleteApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationDeleteApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationDeleteApiFormBadRequestError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiFormBadRequestError
  > = z.instanceof(ClientRegistrationDeleteApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiFormBadRequestError$ {
  /** @deprecated use `ClientRegistrationDeleteApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiFormBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiFormBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationDeleteApiFormBadRequestError$Outbound;
}
