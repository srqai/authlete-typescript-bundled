/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationIssueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationIssueApiInternalServerError";
  }
}

export type BackchannelAuthenticationIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationIssueApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationIssueApiForbiddenError";
  }
}

export type BackchannelAuthenticationIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationIssueApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationIssueApiUnauthorizedError";
  }
}

export type BackchannelAuthenticationIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationIssueApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationIssueApiBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationIssueApiBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationIssueApiInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationIssueApiInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiInternalServerError
  > = z.instanceof(BackchannelAuthenticationIssueApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationIssueApiForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationIssueApiForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiForbiddenError
  > = z.instanceof(BackchannelAuthenticationIssueApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationIssueApiUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationIssueApiUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationIssueApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationIssueApiBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationIssueApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueApiBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationIssueApiBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationIssueApiBadRequestError
  > = z.instanceof(BackchannelAuthenticationIssueApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationIssueApiBadRequestError$Outbound;
}
