/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciSingleParseApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleParseApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiFormInternalServerErrorData;

  constructor(
    err: VciSingleParseApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleParseApiFormInternalServerError";
  }
}

export type VciSingleParseApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleParseApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiFormForbiddenErrorData;

  constructor(
    err: VciSingleParseApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleParseApiFormForbiddenError";
  }
}

export type VciSingleParseApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleParseApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiFormUnauthorizedErrorData;

  constructor(
    err: VciSingleParseApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleParseApiFormUnauthorizedError";
  }
}

export type VciSingleParseApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciSingleParseApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiFormBadRequestErrorData;

  constructor(
    err: VciSingleParseApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciSingleParseApiFormBadRequestError";
  }
}

/** @internal */
export const VciSingleParseApiFormInternalServerError$inboundSchema: z.ZodType<
  VciSingleParseApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiFormInternalServerError$outboundSchema: z.ZodType<
  VciSingleParseApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormInternalServerError
> = z.instanceof(VciSingleParseApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormInternalServerError$ {
  /** @deprecated use `VciSingleParseApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciSingleParseApiFormInternalServerError$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleParseApiFormInternalServerError$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormInternalServerError$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormInternalServerError$Outbound;
}

/** @internal */
export const VciSingleParseApiFormForbiddenError$inboundSchema: z.ZodType<
  VciSingleParseApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiFormForbiddenError$outboundSchema: z.ZodType<
  VciSingleParseApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormForbiddenError
> = z.instanceof(VciSingleParseApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormForbiddenError$ {
  /** @deprecated use `VciSingleParseApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    VciSingleParseApiFormForbiddenError$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleParseApiFormForbiddenError$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormForbiddenError$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormForbiddenError$Outbound;
}

/** @internal */
export const VciSingleParseApiFormUnauthorizedError$inboundSchema: z.ZodType<
  VciSingleParseApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiFormUnauthorizedError$outboundSchema: z.ZodType<
  VciSingleParseApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormUnauthorizedError
> = z.instanceof(VciSingleParseApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormUnauthorizedError$ {
  /** @deprecated use `VciSingleParseApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    VciSingleParseApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleParseApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const VciSingleParseApiFormBadRequestError$inboundSchema: z.ZodType<
  VciSingleParseApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciSingleParseApiFormBadRequestError$outboundSchema: z.ZodType<
  VciSingleParseApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiFormBadRequestError
> = z.instanceof(VciSingleParseApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiFormBadRequestError$ {
  /** @deprecated use `VciSingleParseApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    VciSingleParseApiFormBadRequestError$inboundSchema;
  /** @deprecated use `VciSingleParseApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleParseApiFormBadRequestError$outboundSchema;
  /** @deprecated use `VciSingleParseApiFormBadRequestError$Outbound` instead. */
  export type Outbound = VciSingleParseApiFormBadRequestError$Outbound;
}
