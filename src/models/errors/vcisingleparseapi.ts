/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciSingleParseApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleParseApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiInternalServerErrorData;

  constructor(
    err: VciSingleParseApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleParseApiInternalServerError";
  }
}

export type VciSingleParseApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleParseApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiForbiddenErrorData;

  constructor(
    err: VciSingleParseApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleParseApiForbiddenError";
  }
}

export type VciSingleParseApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciSingleParseApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiUnauthorizedErrorData;

  constructor(
    err: VciSingleParseApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciSingleParseApiUnauthorizedError";
  }
}

export type VciSingleParseApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciSingleParseApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciSingleParseApiBadRequestErrorData;

  constructor(
    err: VciSingleParseApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciSingleParseApiBadRequestError";
  }
}

/** @internal */
export const VciSingleParseApiInternalServerError$inboundSchema: z.ZodType<
  VciSingleParseApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiInternalServerError$outboundSchema: z.ZodType<
  VciSingleParseApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiInternalServerError
> = z.instanceof(VciSingleParseApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiInternalServerError$ {
  /** @deprecated use `VciSingleParseApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciSingleParseApiInternalServerError$inboundSchema;
  /** @deprecated use `VciSingleParseApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleParseApiInternalServerError$outboundSchema;
  /** @deprecated use `VciSingleParseApiInternalServerError$Outbound` instead. */
  export type Outbound = VciSingleParseApiInternalServerError$Outbound;
}

/** @internal */
export const VciSingleParseApiForbiddenError$inboundSchema: z.ZodType<
  VciSingleParseApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiForbiddenError$outboundSchema: z.ZodType<
  VciSingleParseApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiForbiddenError
> = z.instanceof(VciSingleParseApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiForbiddenError$ {
  /** @deprecated use `VciSingleParseApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiForbiddenError$inboundSchema;
  /** @deprecated use `VciSingleParseApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiForbiddenError$outboundSchema;
  /** @deprecated use `VciSingleParseApiForbiddenError$Outbound` instead. */
  export type Outbound = VciSingleParseApiForbiddenError$Outbound;
}

/** @internal */
export const VciSingleParseApiUnauthorizedError$inboundSchema: z.ZodType<
  VciSingleParseApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciSingleParseApiUnauthorizedError$outboundSchema: z.ZodType<
  VciSingleParseApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiUnauthorizedError
> = z.instanceof(VciSingleParseApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiUnauthorizedError$ {
  /** @deprecated use `VciSingleParseApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciSingleParseApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciSingleParseApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciSingleParseApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciSingleParseApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciSingleParseApiBadRequestError$inboundSchema: z.ZodType<
  VciSingleParseApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciSingleParseApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciSingleParseApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciSingleParseApiBadRequestError$outboundSchema: z.ZodType<
  VciSingleParseApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciSingleParseApiBadRequestError
> = z.instanceof(VciSingleParseApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseApiBadRequestError$ {
  /** @deprecated use `VciSingleParseApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseApiBadRequestError$inboundSchema;
  /** @deprecated use `VciSingleParseApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseApiBadRequestError$outboundSchema;
  /** @deprecated use `VciSingleParseApiBadRequestError$Outbound` instead. */
  export type Outbound = VciSingleParseApiBadRequestError$Outbound;
}
