/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciBatchIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchIssueApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchIssueApiInternalServerErrorData;

  constructor(
    err: VciBatchIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchIssueApiInternalServerError";
  }
}

export type VciBatchIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchIssueApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchIssueApiForbiddenErrorData;

  constructor(
    err: VciBatchIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchIssueApiForbiddenError";
  }
}

export type VciBatchIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciBatchIssueApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciBatchIssueApiUnauthorizedErrorData;

  constructor(
    err: VciBatchIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciBatchIssueApiUnauthorizedError";
  }
}

export type VciBatchIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciBatchIssueApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciBatchIssueApiBadRequestErrorData;

  constructor(
    err: VciBatchIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciBatchIssueApiBadRequestError";
  }
}

/** @internal */
export const VciBatchIssueApiInternalServerError$inboundSchema: z.ZodType<
  VciBatchIssueApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchIssueApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchIssueApiInternalServerError$outboundSchema: z.ZodType<
  VciBatchIssueApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiInternalServerError
> = z.instanceof(VciBatchIssueApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiInternalServerError$ {
  /** @deprecated use `VciBatchIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciBatchIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `VciBatchIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `VciBatchIssueApiInternalServerError$Outbound` instead. */
  export type Outbound = VciBatchIssueApiInternalServerError$Outbound;
}

/** @internal */
export const VciBatchIssueApiForbiddenError$inboundSchema: z.ZodType<
  VciBatchIssueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchIssueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchIssueApiForbiddenError$outboundSchema: z.ZodType<
  VciBatchIssueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiForbiddenError
> = z.instanceof(VciBatchIssueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiForbiddenError$ {
  /** @deprecated use `VciBatchIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `VciBatchIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `VciBatchIssueApiForbiddenError$Outbound` instead. */
  export type Outbound = VciBatchIssueApiForbiddenError$Outbound;
}

/** @internal */
export const VciBatchIssueApiUnauthorizedError$inboundSchema: z.ZodType<
  VciBatchIssueApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchIssueApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciBatchIssueApiUnauthorizedError$outboundSchema: z.ZodType<
  VciBatchIssueApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiUnauthorizedError
> = z.instanceof(VciBatchIssueApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiUnauthorizedError$ {
  /** @deprecated use `VciBatchIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciBatchIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciBatchIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciBatchIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciBatchIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciBatchIssueApiBadRequestError$inboundSchema: z.ZodType<
  VciBatchIssueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciBatchIssueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciBatchIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciBatchIssueApiBadRequestError$outboundSchema: z.ZodType<
  VciBatchIssueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciBatchIssueApiBadRequestError
> = z.instanceof(VciBatchIssueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueApiBadRequestError$ {
  /** @deprecated use `VciBatchIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `VciBatchIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `VciBatchIssueApiBadRequestError$Outbound` instead. */
  export type Outbound = VciBatchIssueApiBadRequestError$Outbound;
}
