/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiInternalServerErrorData;

  constructor(
    err: ClientRegistrationApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationApiInternalServerError";
  }
}

export type ClientRegistrationApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiForbiddenErrorData;

  constructor(
    err: ClientRegistrationApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationApiForbiddenError";
  }
}

export type ClientRegistrationApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationApiUnauthorizedError";
  }
}

export type ClientRegistrationApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationApiBadRequestErrorData;

  constructor(
    err: ClientRegistrationApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationApiBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationApiInternalServerError$inboundSchema: z.ZodType<
  ClientRegistrationApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationApiInternalServerError$outboundSchema: z.ZodType<
  ClientRegistrationApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiInternalServerError
> = z.instanceof(ClientRegistrationApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiInternalServerError$ {
  /** @deprecated use `ClientRegistrationApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationApiForbiddenError$inboundSchema: z.ZodType<
  ClientRegistrationApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationApiForbiddenError$outboundSchema: z.ZodType<
  ClientRegistrationApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiForbiddenError
> = z.instanceof(ClientRegistrationApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiForbiddenError$ {
  /** @deprecated use `ClientRegistrationApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientRegistrationApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientRegistrationApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiUnauthorizedError
> = z.instanceof(ClientRegistrationApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationApiBadRequestError$inboundSchema: z.ZodType<
  ClientRegistrationApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationApiBadRequestError$outboundSchema: z.ZodType<
  ClientRegistrationApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationApiBadRequestError
> = z.instanceof(ClientRegistrationApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationApiBadRequestError$ {
  /** @deprecated use `ClientRegistrationApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientRegistrationApiBadRequestError$Outbound;
}
