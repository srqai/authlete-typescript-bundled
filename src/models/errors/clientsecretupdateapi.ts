/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientSecretUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretUpdateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiInternalServerErrorData;

  constructor(
    err: ClientSecretUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretUpdateApiInternalServerError";
  }
}

export type ClientSecretUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretUpdateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiForbiddenErrorData;

  constructor(
    err: ClientSecretUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretUpdateApiForbiddenError";
  }
}

export type ClientSecretUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretUpdateApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiUnauthorizedErrorData;

  constructor(
    err: ClientSecretUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretUpdateApiUnauthorizedError";
  }
}

export type ClientSecretUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientSecretUpdateApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiBadRequestErrorData;

  constructor(
    err: ClientSecretUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientSecretUpdateApiBadRequestError";
  }
}

/** @internal */
export const ClientSecretUpdateApiInternalServerError$inboundSchema: z.ZodType<
  ClientSecretUpdateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretUpdateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretUpdateApiInternalServerError$outboundSchema: z.ZodType<
  ClientSecretUpdateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiInternalServerError
> = z.instanceof(ClientSecretUpdateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiInternalServerError$ {
  /** @deprecated use `ClientSecretUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientSecretUpdateApiForbiddenError$inboundSchema: z.ZodType<
  ClientSecretUpdateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretUpdateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretUpdateApiForbiddenError$outboundSchema: z.ZodType<
  ClientSecretUpdateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiForbiddenError
> = z.instanceof(ClientSecretUpdateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiForbiddenError$ {
  /** @deprecated use `ClientSecretUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientSecretUpdateApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientSecretUpdateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretUpdateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretUpdateApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientSecretUpdateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiUnauthorizedError
> = z.instanceof(ClientSecretUpdateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiUnauthorizedError$ {
  /** @deprecated use `ClientSecretUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientSecretUpdateApiBadRequestError$inboundSchema: z.ZodType<
  ClientSecretUpdateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretUpdateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientSecretUpdateApiBadRequestError$outboundSchema: z.ZodType<
  ClientSecretUpdateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiBadRequestError
> = z.instanceof(ClientSecretUpdateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiBadRequestError$ {
  /** @deprecated use `ClientSecretUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiBadRequestError$Outbound;
}
