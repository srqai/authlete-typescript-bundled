/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientFlagUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientFlagUpdateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientFlagUpdateApiInternalServerErrorData;

  constructor(
    err: ClientFlagUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientFlagUpdateApiInternalServerError";
  }
}

export type ClientFlagUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientFlagUpdateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientFlagUpdateApiForbiddenErrorData;

  constructor(
    err: ClientFlagUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientFlagUpdateApiForbiddenError";
  }
}

export type ClientFlagUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientFlagUpdateApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientFlagUpdateApiUnauthorizedErrorData;

  constructor(
    err: ClientFlagUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientFlagUpdateApiUnauthorizedError";
  }
}

export type ClientFlagUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientFlagUpdateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientFlagUpdateApiBadRequestErrorData;

  constructor(
    err: ClientFlagUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientFlagUpdateApiBadRequestError";
  }
}

/** @internal */
export const ClientFlagUpdateApiInternalServerError$inboundSchema: z.ZodType<
  ClientFlagUpdateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientFlagUpdateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientFlagUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientFlagUpdateApiInternalServerError$outboundSchema: z.ZodType<
  ClientFlagUpdateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiInternalServerError
> = z.instanceof(ClientFlagUpdateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiInternalServerError$ {
  /** @deprecated use `ClientFlagUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientFlagUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientFlagUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientFlagUpdateApiForbiddenError$inboundSchema: z.ZodType<
  ClientFlagUpdateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientFlagUpdateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientFlagUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientFlagUpdateApiForbiddenError$outboundSchema: z.ZodType<
  ClientFlagUpdateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiForbiddenError
> = z.instanceof(ClientFlagUpdateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiForbiddenError$ {
  /** @deprecated use `ClientFlagUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientFlagUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientFlagUpdateApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientFlagUpdateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientFlagUpdateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientFlagUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientFlagUpdateApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientFlagUpdateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiUnauthorizedError
> = z.instanceof(ClientFlagUpdateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiUnauthorizedError$ {
  /** @deprecated use `ClientFlagUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientFlagUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientFlagUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientFlagUpdateApiBadRequestError$inboundSchema: z.ZodType<
  ClientFlagUpdateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientFlagUpdateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientFlagUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientFlagUpdateApiBadRequestError$outboundSchema: z.ZodType<
  ClientFlagUpdateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateApiBadRequestError
> = z.instanceof(ClientFlagUpdateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateApiBadRequestError$ {
  /** @deprecated use `ClientFlagUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientFlagUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientFlagUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientFlagUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientFlagUpdateApiBadRequestError$Outbound;
}
