/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type PushedAuthReqApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PushedAuthReqApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiFormInternalServerErrorData;

  constructor(
    err: PushedAuthReqApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PushedAuthReqApiFormInternalServerError";
  }
}

export type PushedAuthReqApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PushedAuthReqApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiFormForbiddenErrorData;

  constructor(
    err: PushedAuthReqApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PushedAuthReqApiFormForbiddenError";
  }
}

export type PushedAuthReqApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class PushedAuthReqApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiFormUnauthorizedErrorData;

  constructor(
    err: PushedAuthReqApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "PushedAuthReqApiFormUnauthorizedError";
  }
}

export type PushedAuthReqApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class PushedAuthReqApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PushedAuthReqApiFormBadRequestErrorData;

  constructor(
    err: PushedAuthReqApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "PushedAuthReqApiFormBadRequestError";
  }
}

/** @internal */
export const PushedAuthReqApiFormInternalServerError$inboundSchema: z.ZodType<
  PushedAuthReqApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const PushedAuthReqApiFormInternalServerError$outboundSchema: z.ZodType<
  PushedAuthReqApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiFormInternalServerError
> = z.instanceof(PushedAuthReqApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormInternalServerError$ {
  /** @deprecated use `PushedAuthReqApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    PushedAuthReqApiFormInternalServerError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiFormInternalServerError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiFormInternalServerError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiFormInternalServerError$Outbound;
}

/** @internal */
export const PushedAuthReqApiFormForbiddenError$inboundSchema: z.ZodType<
  PushedAuthReqApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const PushedAuthReqApiFormForbiddenError$outboundSchema: z.ZodType<
  PushedAuthReqApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiFormForbiddenError
> = z.instanceof(PushedAuthReqApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormForbiddenError$ {
  /** @deprecated use `PushedAuthReqApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = PushedAuthReqApiFormForbiddenError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiFormForbiddenError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiFormForbiddenError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiFormForbiddenError$Outbound;
}

/** @internal */
export const PushedAuthReqApiFormUnauthorizedError$inboundSchema: z.ZodType<
  PushedAuthReqApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const PushedAuthReqApiFormUnauthorizedError$outboundSchema: z.ZodType<
  PushedAuthReqApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiFormUnauthorizedError
> = z.instanceof(PushedAuthReqApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormUnauthorizedError$ {
  /** @deprecated use `PushedAuthReqApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PushedAuthReqApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const PushedAuthReqApiFormBadRequestError$inboundSchema: z.ZodType<
  PushedAuthReqApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PushedAuthReqApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PushedAuthReqApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const PushedAuthReqApiFormBadRequestError$outboundSchema: z.ZodType<
  PushedAuthReqApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  PushedAuthReqApiFormBadRequestError
> = z.instanceof(PushedAuthReqApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthReqApiFormBadRequestError$ {
  /** @deprecated use `PushedAuthReqApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    PushedAuthReqApiFormBadRequestError$inboundSchema;
  /** @deprecated use `PushedAuthReqApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthReqApiFormBadRequestError$outboundSchema;
  /** @deprecated use `PushedAuthReqApiFormBadRequestError$Outbound` instead. */
  export type Outbound = PushedAuthReqApiFormBadRequestError$Outbound;
}
