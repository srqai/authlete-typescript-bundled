/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type VciOfferCreateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferCreateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiInternalServerErrorData;

  constructor(
    err: VciOfferCreateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferCreateApiInternalServerError";
  }
}

export type VciOfferCreateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferCreateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiForbiddenErrorData;

  constructor(
    err: VciOfferCreateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferCreateApiForbiddenError";
  }
}

export type VciOfferCreateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class VciOfferCreateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiUnauthorizedErrorData;

  constructor(
    err: VciOfferCreateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "VciOfferCreateApiUnauthorizedError";
  }
}

export type VciOfferCreateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class VciOfferCreateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VciOfferCreateApiBadRequestErrorData;

  constructor(
    err: VciOfferCreateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "VciOfferCreateApiBadRequestError";
  }
}

/** @internal */
export const VciOfferCreateApiInternalServerError$inboundSchema: z.ZodType<
  VciOfferCreateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiInternalServerError$outboundSchema: z.ZodType<
  VciOfferCreateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiInternalServerError
> = z.instanceof(VciOfferCreateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiInternalServerError$ {
  /** @deprecated use `VciOfferCreateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    VciOfferCreateApiInternalServerError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferCreateApiInternalServerError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiInternalServerError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiInternalServerError$Outbound;
}

/** @internal */
export const VciOfferCreateApiForbiddenError$inboundSchema: z.ZodType<
  VciOfferCreateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiForbiddenError$outboundSchema: z.ZodType<
  VciOfferCreateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiForbiddenError
> = z.instanceof(VciOfferCreateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiForbiddenError$ {
  /** @deprecated use `VciOfferCreateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiForbiddenError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiForbiddenError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiForbiddenError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiForbiddenError$Outbound;
}

/** @internal */
export const VciOfferCreateApiUnauthorizedError$inboundSchema: z.ZodType<
  VciOfferCreateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const VciOfferCreateApiUnauthorizedError$outboundSchema: z.ZodType<
  VciOfferCreateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiUnauthorizedError
> = z.instanceof(VciOfferCreateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiUnauthorizedError$ {
  /** @deprecated use `VciOfferCreateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    VciOfferCreateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiUnauthorizedError$Outbound;
}

/** @internal */
export const VciOfferCreateApiBadRequestError$inboundSchema: z.ZodType<
  VciOfferCreateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new VciOfferCreateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type VciOfferCreateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const VciOfferCreateApiBadRequestError$outboundSchema: z.ZodType<
  VciOfferCreateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  VciOfferCreateApiBadRequestError
> = z.instanceof(VciOfferCreateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateApiBadRequestError$ {
  /** @deprecated use `VciOfferCreateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateApiBadRequestError$inboundSchema;
  /** @deprecated use `VciOfferCreateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateApiBadRequestError$outboundSchema;
  /** @deprecated use `VciOfferCreateApiBadRequestError$Outbound` instead. */
  export type Outbound = VciOfferCreateApiBadRequestError$Outbound;
}
