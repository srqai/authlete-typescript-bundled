/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationGetApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationGetApiInternalServerErrorData;

  constructor(
    err: ClientRegistrationGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationGetApiInternalServerError";
  }
}

export type ClientRegistrationGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationGetApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationGetApiForbiddenErrorData;

  constructor(
    err: ClientRegistrationGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationGetApiForbiddenError";
  }
}

export type ClientRegistrationGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationGetApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationGetApiUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationGetApiUnauthorizedError";
  }
}

export type ClientRegistrationGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationGetApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationGetApiBadRequestErrorData;

  constructor(
    err: ClientRegistrationGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationGetApiBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationGetApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientRegistrationGetApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationGetApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationGetApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationGetApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientRegistrationGetApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationGetApiInternalServerError
  > = z.instanceof(ClientRegistrationGetApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiInternalServerError$ {
  /** @deprecated use `ClientRegistrationGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationGetApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationGetApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationGetApiForbiddenError$inboundSchema: z.ZodType<
  ClientRegistrationGetApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationGetApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationGetApiForbiddenError$outboundSchema: z.ZodType<
  ClientRegistrationGetApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationGetApiForbiddenError
> = z.instanceof(ClientRegistrationGetApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiForbiddenError$ {
  /** @deprecated use `ClientRegistrationGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationGetApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationGetApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationGetApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientRegistrationGetApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationGetApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationGetApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationGetApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientRegistrationGetApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationGetApiUnauthorizedError
  > = z.instanceof(ClientRegistrationGetApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationGetApiBadRequestError$inboundSchema: z.ZodType<
  ClientRegistrationGetApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationGetApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationGetApiBadRequestError$outboundSchema: z.ZodType<
  ClientRegistrationGetApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientRegistrationGetApiBadRequestError
> = z.instanceof(ClientRegistrationGetApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationGetApiBadRequestError$ {
  /** @deprecated use `ClientRegistrationGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationGetApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationGetApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationGetApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientRegistrationGetApiBadRequestError$Outbound;
}
