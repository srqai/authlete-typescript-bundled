/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type DeviceCompleteApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceCompleteApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiFormInternalServerErrorData;

  constructor(
    err: DeviceCompleteApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceCompleteApiFormInternalServerError";
  }
}

export type DeviceCompleteApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceCompleteApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiFormForbiddenErrorData;

  constructor(
    err: DeviceCompleteApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceCompleteApiFormForbiddenError";
  }
}

export type DeviceCompleteApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceCompleteApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiFormUnauthorizedErrorData;

  constructor(
    err: DeviceCompleteApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceCompleteApiFormUnauthorizedError";
  }
}

export type DeviceCompleteApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class DeviceCompleteApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeviceCompleteApiFormBadRequestErrorData;

  constructor(
    err: DeviceCompleteApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "DeviceCompleteApiFormBadRequestError";
  }
}

/** @internal */
export const DeviceCompleteApiFormInternalServerError$inboundSchema: z.ZodType<
  DeviceCompleteApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceCompleteApiFormInternalServerError$outboundSchema: z.ZodType<
  DeviceCompleteApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiFormInternalServerError
> = z.instanceof(DeviceCompleteApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormInternalServerError$ {
  /** @deprecated use `DeviceCompleteApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceCompleteApiFormInternalServerError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceCompleteApiFormInternalServerError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiFormInternalServerError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiFormInternalServerError$Outbound;
}

/** @internal */
export const DeviceCompleteApiFormForbiddenError$inboundSchema: z.ZodType<
  DeviceCompleteApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceCompleteApiFormForbiddenError$outboundSchema: z.ZodType<
  DeviceCompleteApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiFormForbiddenError
> = z.instanceof(DeviceCompleteApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormForbiddenError$ {
  /** @deprecated use `DeviceCompleteApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceCompleteApiFormForbiddenError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceCompleteApiFormForbiddenError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiFormForbiddenError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiFormForbiddenError$Outbound;
}

/** @internal */
export const DeviceCompleteApiFormUnauthorizedError$inboundSchema: z.ZodType<
  DeviceCompleteApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceCompleteApiFormUnauthorizedError$outboundSchema: z.ZodType<
  DeviceCompleteApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiFormUnauthorizedError
> = z.instanceof(DeviceCompleteApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormUnauthorizedError$ {
  /** @deprecated use `DeviceCompleteApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceCompleteApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceCompleteApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const DeviceCompleteApiFormBadRequestError$inboundSchema: z.ZodType<
  DeviceCompleteApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceCompleteApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceCompleteApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceCompleteApiFormBadRequestError$outboundSchema: z.ZodType<
  DeviceCompleteApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  DeviceCompleteApiFormBadRequestError
> = z.instanceof(DeviceCompleteApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteApiFormBadRequestError$ {
  /** @deprecated use `DeviceCompleteApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceCompleteApiFormBadRequestError$inboundSchema;
  /** @deprecated use `DeviceCompleteApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceCompleteApiFormBadRequestError$outboundSchema;
  /** @deprecated use `DeviceCompleteApiFormBadRequestError$Outbound` instead. */
  export type Outbound = DeviceCompleteApiFormBadRequestError$Outbound;
}
