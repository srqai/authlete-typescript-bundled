/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientRegistrationDeleteApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationDeleteApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiInternalServerErrorData;

  constructor(
    err: ClientRegistrationDeleteApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationDeleteApiInternalServerError";
  }
}

export type ClientRegistrationDeleteApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationDeleteApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiForbiddenErrorData;

  constructor(
    err: ClientRegistrationDeleteApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationDeleteApiForbiddenError";
  }
}

export type ClientRegistrationDeleteApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientRegistrationDeleteApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiUnauthorizedErrorData;

  constructor(
    err: ClientRegistrationDeleteApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientRegistrationDeleteApiUnauthorizedError";
  }
}

export type ClientRegistrationDeleteApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientRegistrationDeleteApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientRegistrationDeleteApiBadRequestErrorData;

  constructor(
    err: ClientRegistrationDeleteApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientRegistrationDeleteApiBadRequestError";
  }
}

/** @internal */
export const ClientRegistrationDeleteApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationDeleteApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationDeleteApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationDeleteApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiInternalServerError
  > = z.instanceof(ClientRegistrationDeleteApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiInternalServerError$ {
  /** @deprecated use `ClientRegistrationDeleteApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientRegistrationDeleteApiInternalServerError$Outbound;
}

/** @internal */
export const ClientRegistrationDeleteApiForbiddenError$inboundSchema: z.ZodType<
  ClientRegistrationDeleteApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientRegistrationDeleteApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientRegistrationDeleteApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationDeleteApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiForbiddenError
  > = z.instanceof(ClientRegistrationDeleteApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiForbiddenError$ {
  /** @deprecated use `ClientRegistrationDeleteApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiForbiddenError$Outbound;
}

/** @internal */
export const ClientRegistrationDeleteApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientRegistrationDeleteApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientRegistrationDeleteApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientRegistrationDeleteApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiUnauthorizedError
  > = z.instanceof(ClientRegistrationDeleteApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiUnauthorizedError$ {
  /** @deprecated use `ClientRegistrationDeleteApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientRegistrationDeleteApiBadRequestError$inboundSchema:
  z.ZodType<ClientRegistrationDeleteApiBadRequestError, z.ZodTypeDef, unknown> =
    z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientRegistrationDeleteApiBadRequestError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientRegistrationDeleteApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientRegistrationDeleteApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientRegistrationDeleteApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientRegistrationDeleteApiBadRequestError
  > = z.instanceof(ClientRegistrationDeleteApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationDeleteApiBadRequestError$ {
  /** @deprecated use `ClientRegistrationDeleteApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientRegistrationDeleteApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientRegistrationDeleteApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientRegistrationDeleteApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientRegistrationDeleteApiBadRequestError$Outbound;
}
