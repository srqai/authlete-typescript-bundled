/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientSecretUpdateApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretUpdateApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiFormInternalServerErrorData;

  constructor(
    err: ClientSecretUpdateApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretUpdateApiFormInternalServerError";
  }
}

export type ClientSecretUpdateApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretUpdateApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiFormForbiddenErrorData;

  constructor(
    err: ClientSecretUpdateApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretUpdateApiFormForbiddenError";
  }
}

export type ClientSecretUpdateApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientSecretUpdateApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiFormUnauthorizedErrorData;

  constructor(
    err: ClientSecretUpdateApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientSecretUpdateApiFormUnauthorizedError";
  }
}

export type ClientSecretUpdateApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientSecretUpdateApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientSecretUpdateApiFormBadRequestErrorData;

  constructor(
    err: ClientSecretUpdateApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientSecretUpdateApiFormBadRequestError";
  }
}

/** @internal */
export const ClientSecretUpdateApiFormInternalServerError$inboundSchema:
  z.ZodType<
    ClientSecretUpdateApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientSecretUpdateApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientSecretUpdateApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretUpdateApiFormInternalServerError$outboundSchema:
  z.ZodType<
    ClientSecretUpdateApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientSecretUpdateApiFormInternalServerError
  > = z.instanceof(ClientSecretUpdateApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiFormInternalServerError$ {
  /** @deprecated use `ClientSecretUpdateApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiFormInternalServerError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiFormInternalServerError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormInternalServerError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiFormInternalServerError$Outbound;
}

/** @internal */
export const ClientSecretUpdateApiFormForbiddenError$inboundSchema: z.ZodType<
  ClientSecretUpdateApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretUpdateApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretUpdateApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretUpdateApiFormForbiddenError$outboundSchema: z.ZodType<
  ClientSecretUpdateApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiFormForbiddenError
> = z.instanceof(ClientSecretUpdateApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiFormForbiddenError$ {
  /** @deprecated use `ClientSecretUpdateApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiFormForbiddenError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiFormForbiddenError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormForbiddenError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiFormForbiddenError$Outbound;
}

/** @internal */
export const ClientSecretUpdateApiFormUnauthorizedError$inboundSchema:
  z.ZodType<ClientSecretUpdateApiFormUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ClientSecretUpdateApiFormUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ClientSecretUpdateApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientSecretUpdateApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientSecretUpdateApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientSecretUpdateApiFormUnauthorizedError
  > = z.instanceof(ClientSecretUpdateApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiFormUnauthorizedError$ {
  /** @deprecated use `ClientSecretUpdateApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const ClientSecretUpdateApiFormBadRequestError$inboundSchema: z.ZodType<
  ClientSecretUpdateApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientSecretUpdateApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientSecretUpdateApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientSecretUpdateApiFormBadRequestError$outboundSchema: z.ZodType<
  ClientSecretUpdateApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiFormBadRequestError
> = z.instanceof(ClientSecretUpdateApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiFormBadRequestError$ {
  /** @deprecated use `ClientSecretUpdateApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientSecretUpdateApiFormBadRequestError$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientSecretUpdateApiFormBadRequestError$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiFormBadRequestError$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiFormBadRequestError$Outbound;
}
