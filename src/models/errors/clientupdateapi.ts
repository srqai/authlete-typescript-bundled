/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientUpdateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientUpdateApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientUpdateApiInternalServerErrorData;

  constructor(
    err: ClientUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientUpdateApiInternalServerError";
  }
}

export type ClientUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientUpdateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientUpdateApiForbiddenErrorData;

  constructor(
    err: ClientUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientUpdateApiForbiddenError";
  }
}

export type ClientUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientUpdateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientUpdateApiUnauthorizedErrorData;

  constructor(
    err: ClientUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientUpdateApiUnauthorizedError";
  }
}

export type ClientUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientUpdateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientUpdateApiBadRequestErrorData;

  constructor(
    err: ClientUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientUpdateApiBadRequestError";
  }
}

/** @internal */
export const ClientUpdateApiInternalServerError$inboundSchema: z.ZodType<
  ClientUpdateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientUpdateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientUpdateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientUpdateApiInternalServerError$outboundSchema: z.ZodType<
  ClientUpdateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientUpdateApiInternalServerError
> = z.instanceof(ClientUpdateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientUpdateApiInternalServerError$ {
  /** @deprecated use `ClientUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = ClientUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientUpdateApiForbiddenError$inboundSchema: z.ZodType<
  ClientUpdateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientUpdateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientUpdateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientUpdateApiForbiddenError$outboundSchema: z.ZodType<
  ClientUpdateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientUpdateApiForbiddenError
> = z.instanceof(ClientUpdateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientUpdateApiForbiddenError$ {
  /** @deprecated use `ClientUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ClientUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ClientUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientUpdateApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientUpdateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientUpdateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientUpdateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientUpdateApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientUpdateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientUpdateApiUnauthorizedError
> = z.instanceof(ClientUpdateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientUpdateApiUnauthorizedError$ {
  /** @deprecated use `ClientUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ClientUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = ClientUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientUpdateApiBadRequestError$inboundSchema: z.ZodType<
  ClientUpdateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientUpdateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientUpdateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientUpdateApiBadRequestError$outboundSchema: z.ZodType<
  ClientUpdateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientUpdateApiBadRequestError
> = z.instanceof(ClientUpdateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientUpdateApiBadRequestError$ {
  /** @deprecated use `ClientUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ClientUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ClientUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientUpdateApiBadRequestError$Outbound;
}
