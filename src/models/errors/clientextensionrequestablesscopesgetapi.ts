/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientExtensionRequestablesScopesGetApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesGetApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesGetApiInternalServerErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesGetApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesGetApiInternalServerError";
  }
}

export type ClientExtensionRequestablesScopesGetApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesGetApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesGetApiForbiddenErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesGetApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesGetApiForbiddenError";
  }
}

export type ClientExtensionRequestablesScopesGetApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesGetApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesGetApiUnauthorizedErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesGetApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesGetApiUnauthorizedError";
  }
}

export type ClientExtensionRequestablesScopesGetApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientExtensionRequestablesScopesGetApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesGetApiBadRequestErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesGetApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientExtensionRequestablesScopesGetApiBadRequestError";
  }
}

/** @internal */
export const ClientExtensionRequestablesScopesGetApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesGetApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesGetApiInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesGetApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesGetApiInternalServerError
  > = z.instanceof(ClientExtensionRequestablesScopesGetApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesGetApiInternalServerError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesGetApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesGetApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesGetApiInternalServerError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesGetApiForbiddenError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesGetApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesGetApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientExtensionRequestablesScopesGetApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesGetApiForbiddenError
  > = z.instanceof(ClientExtensionRequestablesScopesGetApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesGetApiForbiddenError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesGetApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesGetApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiForbiddenError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesGetApiForbiddenError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesGetApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesGetApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesGetApiUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesGetApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesGetApiUnauthorizedError
  > = z.instanceof(ClientExtensionRequestablesScopesGetApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesGetApiUnauthorizedError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesGetApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesGetApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesGetApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesGetApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesGetApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesGetApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientExtensionRequestablesScopesGetApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesGetApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesGetApiBadRequestError
  > = z.instanceof(ClientExtensionRequestablesScopesGetApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesGetApiBadRequestError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesGetApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesGetApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesGetApiBadRequestError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesGetApiBadRequestError$Outbound;
}
