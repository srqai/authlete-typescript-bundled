/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type BackchannelAuthenticationFailApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationFailApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiFormInternalServerErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationFailApiFormInternalServerError";
  }
}

export type BackchannelAuthenticationFailApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationFailApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiFormForbiddenErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationFailApiFormForbiddenError";
  }
}

export type BackchannelAuthenticationFailApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class BackchannelAuthenticationFailApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiFormUnauthorizedErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "BackchannelAuthenticationFailApiFormUnauthorizedError";
  }
}

export type BackchannelAuthenticationFailApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class BackchannelAuthenticationFailApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BackchannelAuthenticationFailApiFormBadRequestErrorData;

  constructor(
    err: BackchannelAuthenticationFailApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "BackchannelAuthenticationFailApiFormBadRequestError";
  }
}

/** @internal */
export const BackchannelAuthenticationFailApiFormInternalServerError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormInternalServerError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiFormInternalServerError
  > = z.instanceof(BackchannelAuthenticationFailApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormInternalServerError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormInternalServerError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormInternalServerError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiFormInternalServerError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationFailApiFormForbiddenError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormForbiddenError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiFormForbiddenError
  > = z.instanceof(BackchannelAuthenticationFailApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormForbiddenError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormForbiddenError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormForbiddenError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormForbiddenError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiFormForbiddenError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationFailApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiFormUnauthorizedError
  > = z.instanceof(BackchannelAuthenticationFailApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormUnauthorizedError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const BackchannelAuthenticationFailApiFormBadRequestError$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackchannelAuthenticationFailApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackchannelAuthenticationFailApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailApiFormBadRequestError$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationFailApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationFailApiFormBadRequestError
  > = z.instanceof(BackchannelAuthenticationFailApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiFormBadRequestError$ {
  /** @deprecated use `BackchannelAuthenticationFailApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiFormBadRequestError$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiFormBadRequestError$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    BackchannelAuthenticationFailApiFormBadRequestError$Outbound;
}
