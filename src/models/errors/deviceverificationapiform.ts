/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type DeviceVerificationApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceVerificationApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiFormInternalServerErrorData;

  constructor(
    err: DeviceVerificationApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceVerificationApiFormInternalServerError";
  }
}

export type DeviceVerificationApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceVerificationApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiFormForbiddenErrorData;

  constructor(
    err: DeviceVerificationApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceVerificationApiFormForbiddenError";
  }
}

export type DeviceVerificationApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class DeviceVerificationApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiFormUnauthorizedErrorData;

  constructor(
    err: DeviceVerificationApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "DeviceVerificationApiFormUnauthorizedError";
  }
}

export type DeviceVerificationApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class DeviceVerificationApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeviceVerificationApiFormBadRequestErrorData;

  constructor(
    err: DeviceVerificationApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "DeviceVerificationApiFormBadRequestError";
  }
}

/** @internal */
export const DeviceVerificationApiFormInternalServerError$inboundSchema:
  z.ZodType<
    DeviceVerificationApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DeviceVerificationApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DeviceVerificationApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiFormInternalServerError$outboundSchema:
  z.ZodType<
    DeviceVerificationApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiFormInternalServerError
  > = z.instanceof(DeviceVerificationApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormInternalServerError$ {
  /** @deprecated use `DeviceVerificationApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormInternalServerError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormInternalServerError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormInternalServerError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormInternalServerError$Outbound;
}

/** @internal */
export const DeviceVerificationApiFormForbiddenError$inboundSchema: z.ZodType<
  DeviceVerificationApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceVerificationApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceVerificationApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiFormForbiddenError$outboundSchema: z.ZodType<
  DeviceVerificationApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormForbiddenError
> = z.instanceof(DeviceVerificationApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormForbiddenError$ {
  /** @deprecated use `DeviceVerificationApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormForbiddenError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormForbiddenError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormForbiddenError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormForbiddenError$Outbound;
}

/** @internal */
export const DeviceVerificationApiFormUnauthorizedError$inboundSchema:
  z.ZodType<DeviceVerificationApiFormUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new DeviceVerificationApiFormUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type DeviceVerificationApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const DeviceVerificationApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    DeviceVerificationApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    DeviceVerificationApiFormUnauthorizedError
  > = z.instanceof(DeviceVerificationApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormUnauthorizedError$ {
  /** @deprecated use `DeviceVerificationApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const DeviceVerificationApiFormBadRequestError$inboundSchema: z.ZodType<
  DeviceVerificationApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DeviceVerificationApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DeviceVerificationApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const DeviceVerificationApiFormBadRequestError$outboundSchema: z.ZodType<
  DeviceVerificationApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiFormBadRequestError
> = z.instanceof(DeviceVerificationApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiFormBadRequestError$ {
  /** @deprecated use `DeviceVerificationApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DeviceVerificationApiFormBadRequestError$inboundSchema;
  /** @deprecated use `DeviceVerificationApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DeviceVerificationApiFormBadRequestError$outboundSchema;
  /** @deprecated use `DeviceVerificationApiFormBadRequestError$Outbound` instead. */
  export type Outbound = DeviceVerificationApiFormBadRequestError$Outbound;
}
