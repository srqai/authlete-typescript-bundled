/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthTokenCreateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenCreateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiInternalServerErrorData;

  constructor(
    err: AuthTokenCreateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenCreateApiInternalServerError";
  }
}

export type AuthTokenCreateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenCreateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiForbiddenErrorData;

  constructor(
    err: AuthTokenCreateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenCreateApiForbiddenError";
  }
}

export type AuthTokenCreateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthTokenCreateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiUnauthorizedErrorData;

  constructor(
    err: AuthTokenCreateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthTokenCreateApiUnauthorizedError";
  }
}

export type AuthTokenCreateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthTokenCreateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthTokenCreateApiBadRequestErrorData;

  constructor(
    err: AuthTokenCreateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthTokenCreateApiBadRequestError";
  }
}

/** @internal */
export const AuthTokenCreateApiInternalServerError$inboundSchema: z.ZodType<
  AuthTokenCreateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiInternalServerError$outboundSchema: z.ZodType<
  AuthTokenCreateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiInternalServerError
> = z.instanceof(AuthTokenCreateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiInternalServerError$ {
  /** @deprecated use `AuthTokenCreateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiInternalServerError$Outbound;
}

/** @internal */
export const AuthTokenCreateApiForbiddenError$inboundSchema: z.ZodType<
  AuthTokenCreateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiForbiddenError$outboundSchema: z.ZodType<
  AuthTokenCreateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiForbiddenError
> = z.instanceof(AuthTokenCreateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiForbiddenError$ {
  /** @deprecated use `AuthTokenCreateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = AuthTokenCreateApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiForbiddenError$Outbound;
}

/** @internal */
export const AuthTokenCreateApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthTokenCreateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthTokenCreateApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthTokenCreateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiUnauthorizedError
> = z.instanceof(AuthTokenCreateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiUnauthorizedError$ {
  /** @deprecated use `AuthTokenCreateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthTokenCreateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthTokenCreateApiBadRequestError$inboundSchema: z.ZodType<
  AuthTokenCreateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthTokenCreateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthTokenCreateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthTokenCreateApiBadRequestError$outboundSchema: z.ZodType<
  AuthTokenCreateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthTokenCreateApiBadRequestError
> = z.instanceof(AuthTokenCreateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenCreateApiBadRequestError$ {
  /** @deprecated use `AuthTokenCreateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthTokenCreateApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthTokenCreateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthTokenCreateApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthTokenCreateApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthTokenCreateApiBadRequestError$Outbound;
}
