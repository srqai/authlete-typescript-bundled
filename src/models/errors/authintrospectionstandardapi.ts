/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthIntrospectionStandardApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionStandardApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiInternalServerErrorData;

  constructor(
    err: AuthIntrospectionStandardApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionStandardApiInternalServerError";
  }
}

export type AuthIntrospectionStandardApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionStandardApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiForbiddenErrorData;

  constructor(
    err: AuthIntrospectionStandardApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionStandardApiForbiddenError";
  }
}

export type AuthIntrospectionStandardApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionStandardApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiUnauthorizedErrorData;

  constructor(
    err: AuthIntrospectionStandardApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionStandardApiUnauthorizedError";
  }
}

export type AuthIntrospectionStandardApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthIntrospectionStandardApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiBadRequestErrorData;

  constructor(
    err: AuthIntrospectionStandardApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthIntrospectionStandardApiBadRequestError";
  }
}

/** @internal */
export const AuthIntrospectionStandardApiInternalServerError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionStandardApiInternalServerError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiInternalServerError
  > = z.instanceof(AuthIntrospectionStandardApiInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiInternalServerError$ {
  /** @deprecated use `AuthIntrospectionStandardApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiInternalServerError$Outbound` instead. */
  export type Outbound =
    AuthIntrospectionStandardApiInternalServerError$Outbound;
}

/** @internal */
export const AuthIntrospectionStandardApiForbiddenError$inboundSchema:
  z.ZodType<AuthIntrospectionStandardApiForbiddenError, z.ZodTypeDef, unknown> =
    z.object({
      clientLocked: z.boolean(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new AuthIntrospectionStandardApiForbiddenError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type AuthIntrospectionStandardApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionStandardApiForbiddenError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiForbiddenError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiForbiddenError
  > = z.instanceof(AuthIntrospectionStandardApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiForbiddenError$ {
  /** @deprecated use `AuthIntrospectionStandardApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiForbiddenError$Outbound;
}

/** @internal */
export const AuthIntrospectionStandardApiUnauthorizedError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionStandardApiUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiUnauthorizedError
  > = z.instanceof(AuthIntrospectionStandardApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiUnauthorizedError$ {
  /** @deprecated use `AuthIntrospectionStandardApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthIntrospectionStandardApiBadRequestError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiBadRequestError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiBadRequestError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiBadRequestError
  > = z.instanceof(AuthIntrospectionStandardApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiBadRequestError$ {
  /** @deprecated use `AuthIntrospectionStandardApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiBadRequestError$Outbound;
}
