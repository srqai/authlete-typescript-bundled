/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthIntrospectionStandardApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionStandardApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiFormInternalServerErrorData;

  constructor(
    err: AuthIntrospectionStandardApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionStandardApiFormInternalServerError";
  }
}

export type AuthIntrospectionStandardApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionStandardApiFormForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiFormForbiddenErrorData;

  constructor(
    err: AuthIntrospectionStandardApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionStandardApiFormForbiddenError";
  }
}

export type AuthIntrospectionStandardApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthIntrospectionStandardApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiFormUnauthorizedErrorData;

  constructor(
    err: AuthIntrospectionStandardApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthIntrospectionStandardApiFormUnauthorizedError";
  }
}

export type AuthIntrospectionStandardApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthIntrospectionStandardApiFormBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthIntrospectionStandardApiFormBadRequestErrorData;

  constructor(
    err: AuthIntrospectionStandardApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthIntrospectionStandardApiFormBadRequestError";
  }
}

/** @internal */
export const AuthIntrospectionStandardApiFormInternalServerError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiFormInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionStandardApiFormInternalServerError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormInternalServerError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiFormInternalServerError
  > = z.instanceof(AuthIntrospectionStandardApiFormInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormInternalServerError$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormInternalServerError$Outbound` instead. */
  export type Outbound =
    AuthIntrospectionStandardApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthIntrospectionStandardApiFormForbiddenError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiFormForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionStandardApiFormForbiddenError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormForbiddenError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiFormForbiddenError
  > = z.instanceof(AuthIntrospectionStandardApiFormForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormForbiddenError$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormForbiddenError$Outbound` instead. */
  export type Outbound =
    AuthIntrospectionStandardApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthIntrospectionStandardApiFormUnauthorizedError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiFormUnauthorizedError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthIntrospectionStandardApiFormUnauthorizedError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormUnauthorizedError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiFormUnauthorizedError
  > = z.instanceof(AuthIntrospectionStandardApiFormUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormUnauthorizedError$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound =
    AuthIntrospectionStandardApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthIntrospectionStandardApiFormBadRequestError$inboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AuthIntrospectionStandardApiFormBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AuthIntrospectionStandardApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthIntrospectionStandardApiFormBadRequestError$outboundSchema:
  z.ZodType<
    AuthIntrospectionStandardApiFormBadRequestError$Outbound,
    z.ZodTypeDef,
    AuthIntrospectionStandardApiFormBadRequestError
  > = z.instanceof(AuthIntrospectionStandardApiFormBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiFormBadRequestError$ {
  /** @deprecated use `AuthIntrospectionStandardApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiFormBadRequestError$Outbound` instead. */
  export type Outbound =
    AuthIntrospectionStandardApiFormBadRequestError$Outbound;
}
