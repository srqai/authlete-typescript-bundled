/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientCreateApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientCreateApiInternalServerError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientCreateApiInternalServerErrorData;

  constructor(
    err: ClientCreateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientCreateApiInternalServerError";
  }
}

export type ClientCreateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientCreateApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientCreateApiForbiddenErrorData;

  constructor(
    err: ClientCreateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientCreateApiForbiddenError";
  }
}

export type ClientCreateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientCreateApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientCreateApiUnauthorizedErrorData;

  constructor(
    err: ClientCreateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientCreateApiUnauthorizedError";
  }
}

export type ClientCreateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientCreateApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientCreateApiBadRequestErrorData;

  constructor(
    err: ClientCreateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientCreateApiBadRequestError";
  }
}

/** @internal */
export const ClientCreateApiInternalServerError$inboundSchema: z.ZodType<
  ClientCreateApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientCreateApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientCreateApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientCreateApiInternalServerError$outboundSchema: z.ZodType<
  ClientCreateApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ClientCreateApiInternalServerError
> = z.instanceof(ClientCreateApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiInternalServerError$ {
  /** @deprecated use `ClientCreateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientCreateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientCreateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientCreateApiInternalServerError$Outbound` instead. */
  export type Outbound = ClientCreateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientCreateApiForbiddenError$inboundSchema: z.ZodType<
  ClientCreateApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientCreateApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientCreateApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientCreateApiForbiddenError$outboundSchema: z.ZodType<
  ClientCreateApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ClientCreateApiForbiddenError
> = z.instanceof(ClientCreateApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiForbiddenError$ {
  /** @deprecated use `ClientCreateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientCreateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientCreateApiForbiddenError$Outbound` instead. */
  export type Outbound = ClientCreateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientCreateApiUnauthorizedError$inboundSchema: z.ZodType<
  ClientCreateApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientCreateApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientCreateApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientCreateApiUnauthorizedError$outboundSchema: z.ZodType<
  ClientCreateApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ClientCreateApiUnauthorizedError
> = z.instanceof(ClientCreateApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiUnauthorizedError$ {
  /** @deprecated use `ClientCreateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientCreateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientCreateApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ClientCreateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientCreateApiBadRequestError$inboundSchema: z.ZodType<
  ClientCreateApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ClientCreateApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ClientCreateApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientCreateApiBadRequestError$outboundSchema: z.ZodType<
  ClientCreateApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ClientCreateApiBadRequestError
> = z.instanceof(ClientCreateApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCreateApiBadRequestError$ {
  /** @deprecated use `ClientCreateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ClientCreateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientCreateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ClientCreateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientCreateApiBadRequestError$Outbound` instead. */
  export type Outbound = ClientCreateApiBadRequestError$Outbound;
}
