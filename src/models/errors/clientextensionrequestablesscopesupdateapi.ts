/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ClientExtensionRequestablesScopesUpdateApiInternalServerErrorData =
  {
    /**
     * The flag value to be set
     *
     * @remarks
     */
    clientLocked: boolean;
  };

export class ClientExtensionRequestablesScopesUpdateApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesUpdateApiInternalServerErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesUpdateApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesUpdateApiInternalServerError";
  }
}

export type ClientExtensionRequestablesScopesUpdateApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesUpdateApiForbiddenError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesUpdateApiForbiddenErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesUpdateApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesUpdateApiForbiddenError";
  }
}

export type ClientExtensionRequestablesScopesUpdateApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ClientExtensionRequestablesScopesUpdateApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesUpdateApiUnauthorizedErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesUpdateApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ClientExtensionRequestablesScopesUpdateApiUnauthorizedError";
  }
}

export type ClientExtensionRequestablesScopesUpdateApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ClientExtensionRequestablesScopesUpdateApiBadRequestError
  extends AutheleteBundledError
{
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ClientExtensionRequestablesScopesUpdateApiBadRequestErrorData;

  constructor(
    err: ClientExtensionRequestablesScopesUpdateApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ClientExtensionRequestablesScopesUpdateApiBadRequestError";
  }
}

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiInternalServerError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesUpdateApiInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiInternalServerError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiInternalServerError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiInternalServerError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiInternalServerError
  > = z.instanceof(
    ClientExtensionRequestablesScopesUpdateApiInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiInternalServerError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiInternalServerError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiInternalServerError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiInternalServerError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiInternalServerError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiForbiddenError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiForbiddenError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesUpdateApiForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiForbiddenError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiForbiddenError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiForbiddenError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiForbiddenError
  > = z.instanceof(ClientExtensionRequestablesScopesUpdateApiForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiForbiddenError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiForbiddenError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiForbiddenError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiForbiddenError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiForbiddenError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiUnauthorizedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    clientLocked: z.boolean(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesUpdateApiUnauthorizedError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$Outbound =
  {
    clientLocked: boolean;
  };

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiUnauthorizedError
  > = z.instanceof(ClientExtensionRequestablesScopesUpdateApiUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      clientLocked: z.boolean(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiUnauthorizedError$Outbound;
}

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiBadRequestError$inboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ClientExtensionRequestablesScopesUpdateApiBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ClientExtensionRequestablesScopesUpdateApiBadRequestError$Outbound =
  {
    resultCode?: string | undefined;
    resultMessage?: string | undefined;
  };

/** @internal */
export const ClientExtensionRequestablesScopesUpdateApiBadRequestError$outboundSchema:
  z.ZodType<
    ClientExtensionRequestablesScopesUpdateApiBadRequestError$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestablesScopesUpdateApiBadRequestError
  > = z.instanceof(ClientExtensionRequestablesScopesUpdateApiBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      resultCode: z.string().optional(),
      resultMessage: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestablesScopesUpdateApiBadRequestError$ {
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestablesScopesUpdateApiBadRequestError$inboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestablesScopesUpdateApiBadRequestError$outboundSchema;
  /** @deprecated use `ClientExtensionRequestablesScopesUpdateApiBadRequestError$Outbound` instead. */
  export type Outbound =
    ClientExtensionRequestablesScopesUpdateApiBadRequestError$Outbound;
}
