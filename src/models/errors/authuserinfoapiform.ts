/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthUserinfoApiFormInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoApiFormInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiFormInternalServerErrorData;

  constructor(
    err: AuthUserinfoApiFormInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoApiFormInternalServerError";
  }
}

export type AuthUserinfoApiFormForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoApiFormForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiFormForbiddenErrorData;

  constructor(
    err: AuthUserinfoApiFormForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoApiFormForbiddenError";
  }
}

export type AuthUserinfoApiFormUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoApiFormUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiFormUnauthorizedErrorData;

  constructor(
    err: AuthUserinfoApiFormUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoApiFormUnauthorizedError";
  }
}

export type AuthUserinfoApiFormBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthUserinfoApiFormBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoApiFormBadRequestErrorData;

  constructor(
    err: AuthUserinfoApiFormBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthUserinfoApiFormBadRequestError";
  }
}

/** @internal */
export const AuthUserinfoApiFormInternalServerError$inboundSchema: z.ZodType<
  AuthUserinfoApiFormInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiFormInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiFormInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoApiFormInternalServerError$outboundSchema: z.ZodType<
  AuthUserinfoApiFormInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiFormInternalServerError
> = z.instanceof(AuthUserinfoApiFormInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiFormInternalServerError$ {
  /** @deprecated use `AuthUserinfoApiFormInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoApiFormInternalServerError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiFormInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoApiFormInternalServerError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiFormInternalServerError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiFormInternalServerError$Outbound;
}

/** @internal */
export const AuthUserinfoApiFormForbiddenError$inboundSchema: z.ZodType<
  AuthUserinfoApiFormForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiFormForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiFormForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoApiFormForbiddenError$outboundSchema: z.ZodType<
  AuthUserinfoApiFormForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiFormForbiddenError
> = z.instanceof(AuthUserinfoApiFormForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiFormForbiddenError$ {
  /** @deprecated use `AuthUserinfoApiFormForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoApiFormForbiddenError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiFormForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoApiFormForbiddenError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiFormForbiddenError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiFormForbiddenError$Outbound;
}

/** @internal */
export const AuthUserinfoApiFormUnauthorizedError$inboundSchema: z.ZodType<
  AuthUserinfoApiFormUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiFormUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiFormUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoApiFormUnauthorizedError$outboundSchema: z.ZodType<
  AuthUserinfoApiFormUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiFormUnauthorizedError
> = z.instanceof(AuthUserinfoApiFormUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiFormUnauthorizedError$ {
  /** @deprecated use `AuthUserinfoApiFormUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoApiFormUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiFormUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoApiFormUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiFormUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiFormUnauthorizedError$Outbound;
}

/** @internal */
export const AuthUserinfoApiFormBadRequestError$inboundSchema: z.ZodType<
  AuthUserinfoApiFormBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoApiFormBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoApiFormBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthUserinfoApiFormBadRequestError$outboundSchema: z.ZodType<
  AuthUserinfoApiFormBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoApiFormBadRequestError
> = z.instanceof(AuthUserinfoApiFormBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoApiFormBadRequestError$ {
  /** @deprecated use `AuthUserinfoApiFormBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoApiFormBadRequestError$inboundSchema;
  /** @deprecated use `AuthUserinfoApiFormBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoApiFormBadRequestError$outboundSchema;
  /** @deprecated use `AuthUserinfoApiFormBadRequestError$Outbound` instead. */
  export type Outbound = AuthUserinfoApiFormBadRequestError$Outbound;
}
