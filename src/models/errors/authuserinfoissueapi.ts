/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type AuthUserinfoIssueApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoIssueApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiInternalServerErrorData;

  constructor(
    err: AuthUserinfoIssueApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoIssueApiInternalServerError";
  }
}

export type AuthUserinfoIssueApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoIssueApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiForbiddenErrorData;

  constructor(
    err: AuthUserinfoIssueApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoIssueApiForbiddenError";
  }
}

export type AuthUserinfoIssueApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class AuthUserinfoIssueApiUnauthorizedError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiUnauthorizedErrorData;

  constructor(
    err: AuthUserinfoIssueApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "AuthUserinfoIssueApiUnauthorizedError";
  }
}

export type AuthUserinfoIssueApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class AuthUserinfoIssueApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthUserinfoIssueApiBadRequestErrorData;

  constructor(
    err: AuthUserinfoIssueApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "AuthUserinfoIssueApiBadRequestError";
  }
}

/** @internal */
export const AuthUserinfoIssueApiInternalServerError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiInternalServerError$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiInternalServerError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiInternalServerError
> = z.instanceof(AuthUserinfoIssueApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiInternalServerError$ {
  /** @deprecated use `AuthUserinfoIssueApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiInternalServerError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiInternalServerError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiInternalServerError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiInternalServerError$Outbound;
}

/** @internal */
export const AuthUserinfoIssueApiForbiddenError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiForbiddenError$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiForbiddenError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiForbiddenError
> = z.instanceof(AuthUserinfoIssueApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiForbiddenError$ {
  /** @deprecated use `AuthUserinfoIssueApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiForbiddenError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiForbiddenError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiForbiddenError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiForbiddenError$Outbound;
}

/** @internal */
export const AuthUserinfoIssueApiUnauthorizedError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const AuthUserinfoIssueApiUnauthorizedError$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiUnauthorizedError
> = z.instanceof(AuthUserinfoIssueApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiUnauthorizedError$ {
  /** @deprecated use `AuthUserinfoIssueApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiUnauthorizedError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiUnauthorizedError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiUnauthorizedError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiUnauthorizedError$Outbound;
}

/** @internal */
export const AuthUserinfoIssueApiBadRequestError$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AuthUserinfoIssueApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthUserinfoIssueApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthUserinfoIssueApiBadRequestError$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiBadRequestError$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiBadRequestError
> = z.instanceof(AuthUserinfoIssueApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiBadRequestError$ {
  /** @deprecated use `AuthUserinfoIssueApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AuthUserinfoIssueApiBadRequestError$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AuthUserinfoIssueApiBadRequestError$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiBadRequestError$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiBadRequestError$Outbound;
}
