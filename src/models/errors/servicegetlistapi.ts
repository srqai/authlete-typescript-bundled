/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AutheleteBundledError } from "./autheletebundlederror.js";

export type ServiceGetListApiInternalServerErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceGetListApiInternalServerError
  extends AutheleteBundledError
{
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetListApiInternalServerErrorData;

  constructor(
    err: ServiceGetListApiInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceGetListApiInternalServerError";
  }
}

export type ServiceGetListApiForbiddenErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceGetListApiForbiddenError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetListApiForbiddenErrorData;

  constructor(
    err: ServiceGetListApiForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceGetListApiForbiddenError";
  }
}

export type ServiceGetListApiUnauthorizedErrorData = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

export class ServiceGetListApiUnauthorizedError extends AutheleteBundledError {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetListApiUnauthorizedErrorData;

  constructor(
    err: ServiceGetListApiUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.clientLocked = err.clientLocked;

    this.name = "ServiceGetListApiUnauthorizedError";
  }
}

export type ServiceGetListApiBadRequestErrorData = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

export class ServiceGetListApiBadRequestError extends AutheleteBundledError {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceGetListApiBadRequestErrorData;

  constructor(
    err: ServiceGetListApiBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.resultCode != null) this.resultCode = err.resultCode;
    if (err.resultMessage != null) this.resultMessage = err.resultMessage;

    this.name = "ServiceGetListApiBadRequestError";
  }
}

/** @internal */
export const ServiceGetListApiInternalServerError$inboundSchema: z.ZodType<
  ServiceGetListApiInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetListApiInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetListApiInternalServerError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceGetListApiInternalServerError$outboundSchema: z.ZodType<
  ServiceGetListApiInternalServerError$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiInternalServerError
> = z.instanceof(ServiceGetListApiInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiInternalServerError$ {
  /** @deprecated use `ServiceGetListApiInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    ServiceGetListApiInternalServerError$inboundSchema;
  /** @deprecated use `ServiceGetListApiInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiInternalServerError$outboundSchema;
  /** @deprecated use `ServiceGetListApiInternalServerError$Outbound` instead. */
  export type Outbound = ServiceGetListApiInternalServerError$Outbound;
}

/** @internal */
export const ServiceGetListApiForbiddenError$inboundSchema: z.ZodType<
  ServiceGetListApiForbiddenError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetListApiForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetListApiForbiddenError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceGetListApiForbiddenError$outboundSchema: z.ZodType<
  ServiceGetListApiForbiddenError$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiForbiddenError
> = z.instanceof(ServiceGetListApiForbiddenError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiForbiddenError$ {
  /** @deprecated use `ServiceGetListApiForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiForbiddenError$inboundSchema;
  /** @deprecated use `ServiceGetListApiForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiForbiddenError$outboundSchema;
  /** @deprecated use `ServiceGetListApiForbiddenError$Outbound` instead. */
  export type Outbound = ServiceGetListApiForbiddenError$Outbound;
}

/** @internal */
export const ServiceGetListApiUnauthorizedError$inboundSchema: z.ZodType<
  ServiceGetListApiUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetListApiUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetListApiUnauthorizedError$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ServiceGetListApiUnauthorizedError$outboundSchema: z.ZodType<
  ServiceGetListApiUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiUnauthorizedError
> = z.instanceof(ServiceGetListApiUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    clientLocked: z.boolean(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiUnauthorizedError$ {
  /** @deprecated use `ServiceGetListApiUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiUnauthorizedError$inboundSchema;
  /** @deprecated use `ServiceGetListApiUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    ServiceGetListApiUnauthorizedError$outboundSchema;
  /** @deprecated use `ServiceGetListApiUnauthorizedError$Outbound` instead. */
  export type Outbound = ServiceGetListApiUnauthorizedError$Outbound;
}

/** @internal */
export const ServiceGetListApiBadRequestError$inboundSchema: z.ZodType<
  ServiceGetListApiBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceGetListApiBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceGetListApiBadRequestError$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ServiceGetListApiBadRequestError$outboundSchema: z.ZodType<
  ServiceGetListApiBadRequestError$Outbound,
  z.ZodTypeDef,
  ServiceGetListApiBadRequestError
> = z.instanceof(ServiceGetListApiBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetListApiBadRequestError$ {
  /** @deprecated use `ServiceGetListApiBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ServiceGetListApiBadRequestError$inboundSchema;
  /** @deprecated use `ServiceGetListApiBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ServiceGetListApiBadRequestError$outboundSchema;
  /** @deprecated use `ServiceGetListApiBadRequestError$Outbound` instead. */
  export type Outbound = ServiceGetListApiBadRequestError$Outbound;
}
